Index.PACKAGES = {"scail" : [], "scail.commons.util" : [{"name" : "scail.commons.util.Cache", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/util\/Cache.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/util\/Cache.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Cache[A, B]) ⇒ Boolean, msg: ⇒ Any): Cache[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/Cache.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Cache[A, B]) ⇒ Boolean): Cache[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/Cache.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Cache[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/Cache.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Cache[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/Cache.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Cache[A, B], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/util\/Cache.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Cache[A, B], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/util\/Cache.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/util\/Cache.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/util\/Cache.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/util\/Cache.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/util\/Cache.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/util\/Cache.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/util\/Cache.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/util\/Cache.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/Cache.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/Cache.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/Cache.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/util\/Cache.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/util\/Cache.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/util\/Cache.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/util\/Cache.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/util\/Cache.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/util\/Cache.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/util\/Cache.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/util\/Cache.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/util\/Cache.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "size", "tail" : "(): Int", "member" : "scail.commons.util.Cache.size", "link" : "scail\/commons\/util\/Cache.html#size:Int", "kind" : "abstract def"}, {"label" : "getOrElseUpdate", "tail" : "(key: A, op: ⇒ B): B", "member" : "scail.commons.util.Cache.getOrElseUpdate", "link" : "scail\/commons\/util\/Cache.html#getOrElseUpdate(key:A,op:=>B):B", "kind" : "abstract def"}], "shortDescription" : "Simple facade interface to abstract over cache implementation.", "trait" : "scail\/commons\/util\/Cache.html", "kind" : "trait"}, {"name" : "scail.commons.util.Config", "shortDescription" : "Type class based wrapper for Typesafe Config.", "object" : "scail\/commons\/util\/Config$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/util\/Config.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/util\/Config.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Config) ⇒ Boolean, msg: ⇒ Any): Config", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/Config.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Config) ⇒ Boolean): Config", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/Config.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Config", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/Config.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Config", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/Config.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Config, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/util\/Config.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Config, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/util\/Config.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "self", "tail" : ": Config", "member" : "scail.commons.util.Config.self", "link" : "scail\/commons\/util\/Config.html#self:scail.commons.util.Config", "kind" : "implicit val"}, {"label" : "path", "tail" : "(key: Key): String", "member" : "scail.commons.util.Config.path", "link" : "scail\/commons\/util\/Config.html#path(key:scail.commons.util.Key):String", "kind" : "def"}, {"member" : "scail.commons.util.Config#<init>", "error" : "unsupported entity"}, {"member" : "scail.commons.util.Config#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/util\/Config.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/util\/Config.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/util\/Config.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/util\/Config.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/util\/Config.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/util\/Config.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/util\/Config.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/Config.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/Config.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/Config.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/util\/Config.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/util\/Config.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/util\/Config.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/util\/Config.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/util\/Config.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/util\/Config.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/util\/Config.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/util\/Config.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/util\/Config.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "ConfigOps", "tail" : "", "member" : "scail.commons.util.Config.ConfigOps", "link" : "scail\/commons\/util\/Config$.html#ConfigOpsextendsAnyVal", "kind" : "implicit final class"}, {"label" : "Reader", "tail" : "", "member" : "scail.commons.util.Config.Reader", "link" : "scail\/commons\/util\/Config$.html#Reader", "kind" : "object"}, {"label" : "MappedReader", "tail" : "", "member" : "scail.commons.util.Config.MappedReader", "link" : "scail\/commons\/util\/Config$.html#MappedReader[B,+A]extendsConfig.Reader[A]", "kind" : "sealed abstract class"}, {"label" : "Reader", "tail" : "", "member" : "scail.commons.util.Config.Reader", "link" : "scail\/commons\/util\/Config$.html#Reader[+A]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/util\/Config$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/util\/Config$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/util\/Config$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/util\/Config$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/util\/Config$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/util\/Config$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/util\/Config$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/Config$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/Config$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/Config$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/util\/Config$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/util\/Config$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/util\/Config$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/util\/Config$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/util\/Config$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/util\/Config$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/util\/Config$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/util\/Config$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/util\/Config$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scail\/commons\/util\/Config.html", "kind" : "class"}, {"name" : "scail.commons.util.Key", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/util\/Key.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/util\/Key.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Key) ⇒ Boolean, msg: ⇒ Any): Key", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/Key.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Key) ⇒ Boolean): Key", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/Key.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Key", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/Key.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Key", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/Key.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Key, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/util\/Key.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Key, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/util\/Key.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scail.commons.util.Key.toString", "link" : "scail\/commons\/util\/Key.html#toString():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/util\/Key.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/util\/Key.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/util\/Key.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/util\/Key.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/util\/Key.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/util\/Key.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/util\/Key.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/Key.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/Key.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/Key.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/util\/Key.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/util\/Key.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/util\/Key.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/util\/Key.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/util\/Key.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/util\/Key.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/util\/Key.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/util\/Key.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "name", "tail" : "(): String", "member" : "scail.commons.util.Key.name", "link" : "scail\/commons\/util\/Key.html#name:String", "kind" : "abstract def"}], "shortDescription" : "", "object" : "scail\/commons\/util\/Key$.html", "members_object" : [{"label" : "SymbolKey", "tail" : "", "member" : "scail.commons.util.Key.SymbolKey", "link" : "scail\/commons\/util\/Key$.html#SymbolKeyextendsKey", "kind" : "implicit final class"}, {"label" : "StringKey", "tail" : "", "member" : "scail.commons.util.Key.StringKey", "link" : "scail\/commons\/util\/Key$.html#StringKeyextendsKey", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/util\/Key$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/util\/Key$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/util\/Key$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/util\/Key$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/util\/Key$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/util\/Key$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/util\/Key$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/Key$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/Key$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/Key$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/util\/Key$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/util\/Key$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/util\/Key$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/util\/Key$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/util\/Key$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/util\/Key$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/util\/Key$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/util\/Key$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/util\/Key$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "scail\/commons\/util\/Key.html", "kind" : "trait"}, {"name" : "scail.commons.util.Logging", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/util\/Logging.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/util\/Logging.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Logging) ⇒ Boolean, msg: ⇒ Any): Logging", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/Logging.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Logging) ⇒ Boolean): Logging", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/Logging.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Logging", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/Logging.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Logging", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/Logging.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Logging, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/util\/Logging.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Logging, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/util\/Logging.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "logger", "tail" : ": Logger", "member" : "com.typesafe.scalalogging.LazyLogging.logger", "link" : "scail\/commons\/util\/Logging.html#logger:com.typesafe.scalalogging.Logger", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/util\/Logging.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/util\/Logging.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/util\/Logging.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/util\/Logging.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/util\/Logging.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/util\/Logging.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/util\/Logging.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/Logging.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/Logging.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/Logging.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/util\/Logging.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/util\/Logging.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/util\/Logging.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/util\/Logging.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/util\/Logging.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/util\/Logging.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/util\/Logging.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/util\/Logging.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/util\/Logging.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "scail\/commons\/util\/Logging.html", "kind" : "trait"}, {"name" : "scail.commons.util.MockConfig", "members_trait" : [{"label" : "willBe", "tail" : "(thrown: Thrown.type): ThrownBy[MockConfig]", "member" : "org.mockito.IdiomaticMockitoBase.ThrowSomethingOps.willBe", "link" : "scail\/commons\/util\/MockConfig.html#willBe(thrown:org.mockito.IdiomaticMockitoBase.Thrown.type):org.mockito.IdiomaticMockitoBase.ThrownBy[E]", "kind" : "def"}, {"label" : "willBe", "tail" : "(a: Answered.type): AnsweredBy[MockConfig]", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps.willBe", "link" : "scail\/commons\/util\/MockConfig.html#willBe(a:org.mockito.IdiomaticMockitoBase.Answered.type):org.mockito.IdiomaticMockitoBase.AnsweredBy[R]", "kind" : "def"}, {"label" : "willBe", "tail" : "(r: Returned.type): ReturnedBy[MockConfig]", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps.willBe", "link" : "scail\/commons\/util\/MockConfig.html#willBe(r:org.mockito.IdiomaticMockitoBase.Returned.type):org.mockito.IdiomaticMockitoBase.ReturnedBy[R]", "kind" : "def"}, {"label" : "wasCalled", "tail" : "(called: ScalaVerificationMode)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasCalled", "link" : "scail\/commons\/util\/MockConfig.html#wasCalled(called:org.mockito.ScalaVerificationMode)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "wasNever", "tail" : "(called: CalledAgain)(arg0: <:<[MockConfig, AnyRef]): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasNever", "link" : "scail\/commons\/util\/MockConfig.html#wasNever(called:org.mockito.IdiomaticMockitoBase.CalledAgain)(implicit$ev:T<:<AnyRef):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "wasNever", "tail" : "(called: Called.type)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasNever", "link" : "scail\/commons\/util\/MockConfig.html#wasNever(called:org.mockito.Called.type)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "was", "tail" : "(called: Called.type)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.was", "link" : "scail\/commons\/util\/MockConfig.html#was(called:org.mockito.Called.type)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "isLenient", "tail" : "(): Unit", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.isLenient", "link" : "scail\/commons\/util\/MockConfig.html#isLenient():Unit", "kind" : "macro def"}, {"label" : "answers", "tail" : "(): AnswerActions[MockConfig]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.answers", "link" : "scail\/commons\/util\/MockConfig.html#answers:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "mustAnswer", "tail" : "(): AnswerActions[MockConfig]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustAnswer", "link" : "scail\/commons\/util\/MockConfig.html#mustAnswer:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "shouldAnswer", "tail" : "(): AnswerActions[MockConfig]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldAnswer", "link" : "scail\/commons\/util\/MockConfig.html#shouldAnswer:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "throws", "tail" : "(): ThrowActions[MockConfig]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.throws", "link" : "scail\/commons\/util\/MockConfig.html#throws:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "mustThrow", "tail" : "(): ThrowActions[MockConfig]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustThrow", "link" : "scail\/commons\/util\/MockConfig.html#mustThrow:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "shouldThrow", "tail" : "(): ThrowActions[MockConfig]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldThrow", "link" : "scail\/commons\/util\/MockConfig.html#shouldThrow:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "calls", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[MockConfig]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.calls", "link" : "scail\/commons\/util\/MockConfig.html#calls(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "mustCall", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[MockConfig]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustCall", "link" : "scail\/commons\/util\/MockConfig.html#mustCall(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "shouldCall", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[MockConfig]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldCall", "link" : "scail\/commons\/util\/MockConfig.html#shouldCall(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "returns", "tail" : "(): ReturnActions[MockConfig]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.returns", "link" : "scail\/commons\/util\/MockConfig.html#returns:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "mustReturn", "tail" : "(): ReturnActions[MockConfig]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustReturn", "link" : "scail\/commons\/util\/MockConfig.html#mustReturn:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "shouldReturn", "tail" : "(): ReturnActions[MockConfig]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldReturn", "link" : "scail\/commons\/util\/MockConfig.html#shouldReturn:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/util\/MockConfig.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/util\/MockConfig.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MockConfig) ⇒ Boolean, msg: ⇒ Any): MockConfig", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/MockConfig.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MockConfig) ⇒ Boolean): MockConfig", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/MockConfig.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MockConfig", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/MockConfig.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MockConfig", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/MockConfig.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MockConfig, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/util\/MockConfig.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MockConfig, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/util\/MockConfig.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "scail\/commons\/util\/MockConfig.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "IntOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.IntOps", "link" : "scail\/commons\/util\/MockConfig.html#IntOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "ThrowSomethingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.ThrowSomethingOps", "link" : "scail\/commons\/util\/MockConfig.html#ThrowSomethingOps[E]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps10", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps10", "link" : "scail\/commons\/util\/MockConfig.html#DoSomethingOps10[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,P8<:<?>,P9<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps9", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps9", "link" : "scail\/commons\/util\/MockConfig.html#DoSomethingOps9[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,P8<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps8", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps8", "link" : "scail\/commons\/util\/MockConfig.html#DoSomethingOps8[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps7", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps7", "link" : "scail\/commons\/util\/MockConfig.html#DoSomethingOps7[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps6", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps6", "link" : "scail\/commons\/util\/MockConfig.html#DoSomethingOps6[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps5", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps5", "link" : "scail\/commons\/util\/MockConfig.html#DoSomethingOps5[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps4", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps4", "link" : "scail\/commons\/util\/MockConfig.html#DoSomethingOps4[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps3", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps3", "link" : "scail\/commons\/util\/MockConfig.html#DoSomethingOps3[P0<:<?>,P1<:<?>,P2<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps2", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps2", "link" : "scail\/commons\/util\/MockConfig.html#DoSomethingOps2[P0<:<?>,P1<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps1", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps1", "link" : "scail\/commons\/util\/MockConfig.html#DoSomethingOps1[P0<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps0", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps0", "link" : "scail\/commons\/util\/MockConfig.html#DoSomethingOps0[R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps", "link" : "scail\/commons\/util\/MockConfig.html#DoSomethingOps[R]extendsAnyRef", "kind" : "implicit class"}, {"label" : "VerifyingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps", "link" : "scail\/commons\/util\/MockConfig.html#VerifyingOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "StubbingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps", "link" : "scail\/commons\/util\/MockConfig.html#StubbingOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "whenConfig", "tail" : "", "member" : "scail.commons.util.MockConfig.whenConfig", "link" : "scail\/commons\/util\/MockConfig.html#whenConfig", "kind" : "object"}, {"label" : "typesafeConfig", "tail" : ": com.typesafe.config.Config", "member" : "scail.commons.util.MockConfig.typesafeConfig", "link" : "scail\/commons\/util\/MockConfig.html#typesafeConfig:com.typesafe.config.Config", "kind" : "val"}, {"label" : "mockReturnsSelf", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "scail.commons.Mocking.mockReturnsSelf", "link" : "scail\/commons\/util\/MockConfig.html#mockReturnsSelf[T<:AnyRef](implicitevidence$5:scala.reflect.ClassTag[T],implicitevidence$6:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "mockEmptyValues", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "scail.commons.Mocking.mockEmptyValues", "link" : "scail\/commons\/util\/MockConfig.html#mockEmptyValues[T<:AnyRef](implicitevidence$3:scala.reflect.ClassTag[T],implicitevidence$4:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "mockDeepStubs", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "scail.commons.Mocking.mockDeepStubs", "link" : "scail\/commons\/util\/MockConfig.html#mockDeepStubs[T<:AnyRef](implicitevidence$1:scala.reflect.ClassTag[T],implicitevidence$2:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "*", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.*", "link" : "scail\/commons\/util\/MockConfig.html#*[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "any", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.any", "link" : "scail\/commons\/util\/MockConfig.html#any[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "anyVal", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.anyVal", "link" : "scail\/commons\/util\/MockConfig.html#anyVal[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "n", "tail" : ": N", "member" : "org.mockito.matchers.NumericMatchers.n", "link" : "scail\/commons\/util\/MockConfig.html#n:org.mockito.matchers.N", "kind" : "val"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "scail\/commons\/util\/MockConfig.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "function0", "tail" : "(value: T): () ⇒ T", "member" : "org.mockito.matchers.FunctionMatchers.function0", "link" : "scail\/commons\/util\/MockConfig.html#function0[T](value:T):()=>T", "kind" : "def"}, {"label" : "isNotNull", "tail" : "(): T", "member" : "org.mockito.matchers.NullMatchers.isNotNull", "link" : "scail\/commons\/util\/MockConfig.html#isNotNull[T]:T", "kind" : "def"}, {"label" : "isNull", "tail" : "(): T", "member" : "org.mockito.matchers.NullMatchers.isNull", "link" : "scail\/commons\/util\/MockConfig.html#isNull[T]:T", "kind" : "def"}, {"label" : "endsWith", "tail" : "(suffix: String): String", "member" : "org.mockito.matchers.StringThatMatchers.endsWith", "link" : "scail\/commons\/util\/MockConfig.html#endsWith(suffix:String):String", "kind" : "def"}, {"label" : "contains", "tail" : "(substring: String): String", "member" : "org.mockito.matchers.StringThatMatchers.contains", "link" : "scail\/commons\/util\/MockConfig.html#contains(substring:String):String", "kind" : "def"}, {"label" : "startsWith", "tail" : "(prefix: String): String", "member" : "org.mockito.matchers.StringThatMatchers.startsWith", "link" : "scail\/commons\/util\/MockConfig.html#startsWith(prefix:String):String", "kind" : "def"}, {"label" : "matches", "tail" : "(regex: String): String", "member" : "org.mockito.matchers.StringThatMatchers.matches", "link" : "scail\/commons\/util\/MockConfig.html#matches(regex:String):String", "kind" : "def"}, {"label" : "argMatching", "tail" : "(pf: PartialFunction[Any, Unit]): T", "member" : "org.mockito.matchers.ThatMatchers.argMatching", "link" : "scail\/commons\/util\/MockConfig.html#argMatching[T](pf:PartialFunction[Any,Unit]):T", "kind" : "def"}, {"label" : "longThat", "tail" : "(matcher: ArgumentMatcher[Long]): Long", "member" : "org.mockito.matchers.ThatMatchers.longThat", "link" : "scail\/commons\/util\/MockConfig.html#longThat(matcher:org.mockito.ArgumentMatcher[Long]):Long", "kind" : "def"}, {"label" : "shortThat", "tail" : "(matcher: ArgumentMatcher[Short]): Short", "member" : "org.mockito.matchers.ThatMatchers.shortThat", "link" : "scail\/commons\/util\/MockConfig.html#shortThat(matcher:org.mockito.ArgumentMatcher[Short]):Short", "kind" : "def"}, {"label" : "floatThat", "tail" : "(matcher: ArgumentMatcher[Float]): Float", "member" : "org.mockito.matchers.ThatMatchers.floatThat", "link" : "scail\/commons\/util\/MockConfig.html#floatThat(matcher:org.mockito.ArgumentMatcher[Float]):Float", "kind" : "def"}, {"label" : "intThat", "tail" : "(matcher: ArgumentMatcher[Int]): Int", "member" : "org.mockito.matchers.ThatMatchers.intThat", "link" : "scail\/commons\/util\/MockConfig.html#intThat(matcher:org.mockito.ArgumentMatcher[Int]):Int", "kind" : "def"}, {"label" : "doubleThat", "tail" : "(matcher: ArgumentMatcher[Double]): Double", "member" : "org.mockito.matchers.ThatMatchers.doubleThat", "link" : "scail\/commons\/util\/MockConfig.html#doubleThat(matcher:org.mockito.ArgumentMatcher[Double]):Double", "kind" : "def"}, {"label" : "charThat", "tail" : "(matcher: ArgumentMatcher[Char]): Char", "member" : "org.mockito.matchers.ThatMatchers.charThat", "link" : "scail\/commons\/util\/MockConfig.html#charThat(matcher:org.mockito.ArgumentMatcher[Char]):Char", "kind" : "def"}, {"label" : "booleanThat", "tail" : "(matcher: ArgumentMatcher[Boolean]): Boolean", "member" : "org.mockito.matchers.ThatMatchers.booleanThat", "link" : "scail\/commons\/util\/MockConfig.html#booleanThat(matcher:org.mockito.ArgumentMatcher[Boolean]):Boolean", "kind" : "def"}, {"label" : "byteThat", "tail" : "(matcher: ArgumentMatcher[Byte]): Byte", "member" : "org.mockito.matchers.ThatMatchers.byteThat", "link" : "scail\/commons\/util\/MockConfig.html#byteThat(matcher:org.mockito.ArgumentMatcher[Byte]):Byte", "kind" : "def"}, {"label" : "argThat", "tail" : "(f: (T) ⇒ Boolean, desc: ⇒ String): T", "member" : "org.mockito.matchers.ThatMatchers.argThat", "link" : "scail\/commons\/util\/MockConfig.html#argThat[T](f:T=>Boolean,desc:=>String):T", "kind" : "def"}, {"label" : "argThat", "tail" : "(matcher: ArgumentMatcher[T]): T", "member" : "org.mockito.matchers.ThatMatchers.argThat", "link" : "scail\/commons\/util\/MockConfig.html#argThat[T](matcher:org.mockito.ArgumentMatcher[T]):T", "kind" : "def"}, {"label" : "eqToVal", "tail" : "(value: T)(arg0: Equality[T], arg1: ValueClassExtractor[T], arg2: Prettifier): T", "member" : "org.mockito.matchers.EqMatchers_VersionSpecific.eqToVal", "link" : "scail\/commons\/util\/MockConfig.html#eqToVal[T](value:T)(implicitevidence$3:org.scalactic.Equality[T],implicitevidence$4:org.mockito.internal.ValueClassExtractor[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "eqTo", "tail" : "(value: T)(arg0: Equality[T], arg1: ValueClassExtractor[T], arg2: Prettifier): T", "member" : "org.mockito.matchers.EqMatchers_VersionSpecific.eqTo", "link" : "scail\/commons\/util\/MockConfig.html#eqTo[T](value:T)(implicitevidence$1:org.scalactic.Equality[T],implicitevidence$2:org.mockito.internal.ValueClassExtractor[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "refEq", "tail" : "(value: T, excludeFields: String*): T", "member" : "org.mockito.matchers.EqMatchers.refEq", "link" : "scail\/commons\/util\/MockConfig.html#refEq[T](value:T,excludeFields:String*):T", "kind" : "def"}, {"label" : "isA", "tail" : "(arg0: ClassTag[T]): T", "member" : "org.mockito.matchers.EqMatchers.isA", "link" : "scail\/commons\/util\/MockConfig.html#isA[T](implicitevidence$1:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "same", "tail" : "(value: T): T", "member" : "org.mockito.matchers.EqMatchers.same", "link" : "scail\/commons\/util\/MockConfig.html#same[T](value:T):T", "kind" : "def"}, {"label" : "anyLong", "tail" : "(): Long", "member" : "org.mockito.matchers.AnyMatchers.anyLong", "link" : "scail\/commons\/util\/MockConfig.html#anyLong:Long", "kind" : "def"}, {"label" : "anyShort", "tail" : "(): Short", "member" : "org.mockito.matchers.AnyMatchers.anyShort", "link" : "scail\/commons\/util\/MockConfig.html#anyShort:Short", "kind" : "def"}, {"label" : "anyFloat", "tail" : "(): Float", "member" : "org.mockito.matchers.AnyMatchers.anyFloat", "link" : "scail\/commons\/util\/MockConfig.html#anyFloat:Float", "kind" : "def"}, {"label" : "anyInt", "tail" : "(): Int", "member" : "org.mockito.matchers.AnyMatchers.anyInt", "link" : "scail\/commons\/util\/MockConfig.html#anyInt:Int", "kind" : "def"}, {"label" : "anyDouble", "tail" : "(): Double", "member" : "org.mockito.matchers.AnyMatchers.anyDouble", "link" : "scail\/commons\/util\/MockConfig.html#anyDouble:Double", "kind" : "def"}, {"label" : "anyChar", "tail" : "(): Char", "member" : "org.mockito.matchers.AnyMatchers.anyChar", "link" : "scail\/commons\/util\/MockConfig.html#anyChar:Char", "kind" : "def"}, {"label" : "anyBoolean", "tail" : "(): Boolean", "member" : "org.mockito.matchers.AnyMatchers.anyBoolean", "link" : "scail\/commons\/util\/MockConfig.html#anyBoolean:Boolean", "kind" : "def"}, {"label" : "anyByte", "tail" : "(): Byte", "member" : "org.mockito.matchers.AnyMatchers.anyByte", "link" : "scail\/commons\/util\/MockConfig.html#anyByte:Byte", "kind" : "def"}, {"label" : "anyMap", "tail" : "(): Map[K, V]", "member" : "org.mockito.matchers.AnyMatchers.anyMap", "link" : "scail\/commons\/util\/MockConfig.html#anyMap[K,V]:Map[K,V]", "kind" : "def"}, {"label" : "anySet", "tail" : "(): Set[T]", "member" : "org.mockito.matchers.AnyMatchers.anySet", "link" : "scail\/commons\/util\/MockConfig.html#anySet[T]:Set[T]", "kind" : "def"}, {"label" : "anyIterable", "tail" : "(): Iterable[T]", "member" : "org.mockito.matchers.AnyMatchers.anyIterable", "link" : "scail\/commons\/util\/MockConfig.html#anyIterable[T]:Iterable[T]", "kind" : "def"}, {"label" : "anySeq", "tail" : "(): Seq[T]", "member" : "org.mockito.matchers.AnyMatchers.anySeq", "link" : "scail\/commons\/util\/MockConfig.html#anySeq[T]:Seq[T]", "kind" : "def"}, {"label" : "anyList", "tail" : "(): List[T]", "member" : "org.mockito.matchers.AnyMatchers.anyList", "link" : "scail\/commons\/util\/MockConfig.html#anyList[T]:List[T]", "kind" : "def"}, {"label" : "verification", "tail" : "(v: ⇒ Any): Verification", "member" : "org.mockito.IdiomaticMockito.verification", "link" : "scail\/commons\/util\/MockConfig.html#verification(v:=>Any):IdiomaticMockito.this.Verification", "kind" : "def"}, {"label" : "Verification", "tail" : "", "member" : "org.mockito.IdiomaticMockito.Verification", "link" : "scail\/commons\/util\/MockConfig.html#Verification=Unit", "kind" : "type"}, {"label" : "atMost", "tail" : "(t: Times): AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMost", "link" : "scail\/commons\/util\/MockConfig.html#atMost(t:org.mockito.IdiomaticMockitoBase.Times):org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "def"}, {"label" : "atLeast", "tail" : "(t: Times): AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeast", "link" : "scail\/commons\/util\/MockConfig.html#atLeast(t:org.mockito.IdiomaticMockitoBase.Times):org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "def"}, {"label" : "InOrder", "tail" : "(mocks: AnyRef*)(verifications: (VerifyInOrder) ⇒ Verification): Verification", "member" : "org.mockito.IdiomaticMockitoBase.InOrder", "link" : "scail\/commons\/util\/MockConfig.html#InOrder(mocks:AnyRef*)(verifications:org.mockito.VerifyInOrder=>IdiomaticMockitoBase.this.Verification):IdiomaticMockitoBase.this.Verification", "kind" : "def"}, {"label" : "atMostTenTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostTenTimes", "link" : "scail\/commons\/util\/MockConfig.html#atMostTenTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostNineTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostNineTimes", "link" : "scail\/commons\/util\/MockConfig.html#atMostNineTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostEightTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostEightTimes", "link" : "scail\/commons\/util\/MockConfig.html#atMostEightTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostSevenTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostSevenTimes", "link" : "scail\/commons\/util\/MockConfig.html#atMostSevenTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostSixTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostSixTimes", "link" : "scail\/commons\/util\/MockConfig.html#atMostSixTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostFiveTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostFiveTimes", "link" : "scail\/commons\/util\/MockConfig.html#atMostFiveTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostFourTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostFourTimes", "link" : "scail\/commons\/util\/MockConfig.html#atMostFourTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostThreeTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostThreeTimes", "link" : "scail\/commons\/util\/MockConfig.html#atMostThreeTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostThrice", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostThrice", "link" : "scail\/commons\/util\/MockConfig.html#atMostThrice:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostTwice", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostTwice", "link" : "scail\/commons\/util\/MockConfig.html#atMostTwice:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostOnce", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostOnce", "link" : "scail\/commons\/util\/MockConfig.html#atMostOnce:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atLeastTenTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastTenTimes", "link" : "scail\/commons\/util\/MockConfig.html#atLeastTenTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastNineTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastNineTimes", "link" : "scail\/commons\/util\/MockConfig.html#atLeastNineTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastEightTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastEightTimes", "link" : "scail\/commons\/util\/MockConfig.html#atLeastEightTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastSevenTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastSevenTimes", "link" : "scail\/commons\/util\/MockConfig.html#atLeastSevenTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastSixTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastSixTimes", "link" : "scail\/commons\/util\/MockConfig.html#atLeastSixTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastFiveTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastFiveTimes", "link" : "scail\/commons\/util\/MockConfig.html#atLeastFiveTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastFourTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastFourTimes", "link" : "scail\/commons\/util\/MockConfig.html#atLeastFourTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastThreeTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastThreeTimes", "link" : "scail\/commons\/util\/MockConfig.html#atLeastThreeTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastThrice", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastThrice", "link" : "scail\/commons\/util\/MockConfig.html#atLeastThrice:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastTwice", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastTwice", "link" : "scail\/commons\/util\/MockConfig.html#atLeastTwice:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastOnce", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastOnce", "link" : "scail\/commons\/util\/MockConfig.html#atLeastOnce:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "tenTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.tenTimes", "link" : "scail\/commons\/util\/MockConfig.html#tenTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "nineTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.nineTimes", "link" : "scail\/commons\/util\/MockConfig.html#nineTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "eightTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.eightTimes", "link" : "scail\/commons\/util\/MockConfig.html#eightTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "sevenTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.sevenTimes", "link" : "scail\/commons\/util\/MockConfig.html#sevenTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "sixTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.sixTimes", "link" : "scail\/commons\/util\/MockConfig.html#sixTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "fiveTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.fiveTimes", "link" : "scail\/commons\/util\/MockConfig.html#fiveTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "fourTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.fourTimes", "link" : "scail\/commons\/util\/MockConfig.html#fourTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "threeTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.threeTimes", "link" : "scail\/commons\/util\/MockConfig.html#threeTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "thrice", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.thrice", "link" : "scail\/commons\/util\/MockConfig.html#thrice:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "twice", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.twice", "link" : "scail\/commons\/util\/MockConfig.html#twice:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "once", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.once", "link" : "scail\/commons\/util\/MockConfig.html#once:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "onlyHere", "tail" : ": OnlyOn.type", "member" : "org.mockito.IdiomaticMockitoBase.onlyHere", "link" : "scail\/commons\/util\/MockConfig.html#onlyHere:org.mockito.IdiomaticMockitoBase.OnlyOn.type", "kind" : "val"}, {"label" : "on", "tail" : ": On.type", "member" : "org.mockito.IdiomaticMockitoBase.on", "link" : "scail\/commons\/util\/MockConfig.html#on:org.mockito.IdiomaticMockitoBase.On.type", "kind" : "val"}, {"label" : "realMethod", "tail" : ": RealMethod.type", "member" : "org.mockito.IdiomaticMockitoBase.realMethod", "link" : "scail\/commons\/util\/MockConfig.html#realMethod:org.mockito.WhenMacro.RealMethod.type", "kind" : "val"}, {"label" : "ignoringStubs", "tail" : ": IgnoringStubs.type", "member" : "org.mockito.IdiomaticMockitoBase.ignoringStubs", "link" : "scail\/commons\/util\/MockConfig.html#ignoringStubs:org.mockito.IdiomaticMockitoBase.IgnoringStubs.type", "kind" : "val"}, {"label" : "calledAgain", "tail" : ": CalledAgain.type", "member" : "org.mockito.IdiomaticMockitoBase.calledAgain", "link" : "scail\/commons\/util\/MockConfig.html#calledAgain:org.mockito.IdiomaticMockitoBase.CalledAgain.type", "kind" : "val"}, {"label" : "theRealMethod", "tail" : ": RealMethod.type", "member" : "org.mockito.IdiomaticMockitoBase.theRealMethod", "link" : "scail\/commons\/util\/MockConfig.html#theRealMethod:org.mockito.WhenMacro.RealMethod.type", "kind" : "val"}, {"label" : "answered", "tail" : ": Answered.type", "member" : "org.mockito.IdiomaticMockitoBase.answered", "link" : "scail\/commons\/util\/MockConfig.html#answered:org.mockito.IdiomaticMockitoBase.Answered.type", "kind" : "val"}, {"label" : "returned", "tail" : ": Returned.type", "member" : "org.mockito.IdiomaticMockitoBase.returned", "link" : "scail\/commons\/util\/MockConfig.html#returned:org.mockito.IdiomaticMockitoBase.Returned.type", "kind" : "val"}, {"label" : "thrown", "tail" : ": Thrown.type", "member" : "org.mockito.IdiomaticMockitoBase.thrown", "link" : "scail\/commons\/util\/MockConfig.html#thrown:org.mockito.IdiomaticMockitoBase.Thrown.type", "kind" : "val"}, {"label" : "called", "tail" : ": Called.type", "member" : "org.mockito.IdiomaticMockitoBase.called", "link" : "scail\/commons\/util\/MockConfig.html#called:org.mockito.Called.type", "kind" : "val"}, {"label" : "mockitoSerialisableEquality", "tail" : "(): Equality[T]", "member" : "org.mockito.ScalacticSerialisableHack.mockitoSerialisableEquality", "link" : "scail\/commons\/util\/MockConfig.html#mockitoSerialisableEquality[T]:org.scalactic.Equality[T]", "kind" : "implicit def"}, {"label" : "spyLambda", "tail" : "(realObj: T)(arg0: ClassTag[T]): T", "member" : "org.mockito.MockitoEnhancer.spyLambda", "link" : "scail\/commons\/util\/MockConfig.html#spyLambda[T<:AnyRef](realObj:T)(implicitevidence$38:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "ignoreStubs", "tail" : "(mocks: AnyRef*): Array[AnyRef]", "member" : "org.mockito.MockitoEnhancer.ignoreStubs", "link" : "scail\/commons\/util\/MockConfig.html#ignoreStubs(mocks:AnyRef*):Array[AnyRef]", "kind" : "def"}, {"label" : "verifyNoMoreInteractions", "tail" : "(mocks: AnyRef*): Unit", "member" : "org.mockito.MockitoEnhancer.verifyNoMoreInteractions", "link" : "scail\/commons\/util\/MockConfig.html#verifyNoMoreInteractions(mocks:AnyRef*):Unit", "kind" : "def"}, {"label" : "mockingDetails", "tail" : "(toInspect: AnyRef): MockingDetails", "member" : "org.mockito.MockitoEnhancer.mockingDetails", "link" : "scail\/commons\/util\/MockConfig.html#mockingDetails(toInspect:AnyRef):org.mockito.MockingDetails", "kind" : "def"}, {"label" : "reset", "tail" : "(mocks: AnyRef*)(arg0: Prettifier): Unit", "member" : "org.mockito.MockitoEnhancer.reset", "link" : "scail\/commons\/util\/MockConfig.html#reset(mocks:AnyRef*)(implicit$pt:org.scalactic.Prettifier):Unit", "kind" : "def"}, {"label" : "spy", "tail" : "(realObj: T, lenient: Boolean)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.spy", "link" : "scail\/commons\/util\/MockConfig.html#spy[T<:AnyRef](realObj:T,lenient:Boolean)(implicitevidence$36:scala.reflect.ClassTag[T],implicitevidence$37:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(name: String)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], defaultAnswer: DefaultAnswer, arg3: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "scail\/commons\/util\/MockConfig.html#mock[T<:AnyRef](name:String)(implicitevidence$34:scala.reflect.ClassTag[T],implicitevidence$35:reflect.runtime.universe.WeakTypeTag[T],implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer,implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(mockSettings: MockSettings)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "scail\/commons\/util\/MockConfig.html#mock[T<:AnyRef](mockSettings:org.mockito.MockSettings)(implicitevidence$32:scala.reflect.ClassTag[T],implicitevidence$33:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(defaultAnswer: DefaultAnswer)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "scail\/commons\/util\/MockConfig.html#mock[T<:AnyRef](defaultAnswer:org.mockito.stubbing.DefaultAnswer)(implicitevidence$30:scala.reflect.ClassTag[T],implicitevidence$31:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], defaultAnswer: DefaultAnswer, arg3: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "scail\/commons\/util\/MockConfig.html#mock[T<:AnyRef](implicitevidence$28:scala.reflect.ClassTag[T],implicitevidence$29:reflect.runtime.universe.WeakTypeTag[T],implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer,implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "invocationOps", "tail" : ": (InvocationOnMock) ⇒ InvocationOnMockOps", "member" : "org.mockito.MockitoEnhancer.invocationOps", "link" : "scail\/commons\/util\/MockConfig.html#invocationOps:org.mockito.invocation.InvocationOnMock=>org.mockito.ReflectionUtils.InvocationOnMockOps", "kind" : "implicit val"}, {"label" : "withSettings", "tail" : "(defaultAnswer: DefaultAnswer): MockSettings", "member" : "org.mockito.MockCreator.withSettings", "link" : "scail\/commons\/util\/MockConfig.html#withSettings(implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer):org.mockito.MockSettings", "kind" : "def"}, {"label" : "mock", "tail" : "(defaultAnswer: Answer[_])(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockCreator.mock", "link" : "scail\/commons\/util\/MockConfig.html#mock[T<:AnyRef](defaultAnswer:org.mockito.stubbing.Answer[_])(implicitevidence$3:scala.reflect.ClassTag[T],implicitevidence$4:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/util\/MockConfig.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/util\/MockConfig.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/util\/MockConfig.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/util\/MockConfig.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/util\/MockConfig.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/util\/MockConfig.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/util\/MockConfig.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/MockConfig.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/MockConfig.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/MockConfig.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/util\/MockConfig.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/util\/MockConfig.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/util\/MockConfig.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/util\/MockConfig.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/util\/MockConfig.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/util\/MockConfig.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/util\/MockConfig.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/util\/MockConfig.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/util\/MockConfig.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "scail\/commons\/util\/MockConfig.html", "kind" : "trait"}, {"name" : "scail.commons.util.NoCache", "shortDescription" : "A non-caching Cache implementation: op is always evaluated and returned.", "object" : "scail\/commons\/util\/NoCache$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/util\/NoCache.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/util\/NoCache.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (NoCache[A, B]) ⇒ Boolean, msg: ⇒ Any): NoCache[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/NoCache.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (NoCache[A, B]) ⇒ Boolean): NoCache[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/NoCache.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): NoCache[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/NoCache.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): NoCache[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/NoCache.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (NoCache[A, B], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/util\/NoCache.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (NoCache[A, B], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/util\/NoCache.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scail.commons.util.NoCache.size", "link" : "scail\/commons\/util\/NoCache.html#size:Int", "kind" : "def"}, {"label" : "getOrElseUpdate", "tail" : "(key: A, op: ⇒ B): B", "member" : "scail.commons.util.NoCache.getOrElseUpdate", "link" : "scail\/commons\/util\/NoCache.html#getOrElseUpdate(key:A,op:=>B):B", "kind" : "def"}, {"member" : "scail.commons.util.NoCache#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/util\/NoCache.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/util\/NoCache.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/util\/NoCache.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/util\/NoCache.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/util\/NoCache.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/util\/NoCache.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/util\/NoCache.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/NoCache.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/NoCache.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/NoCache.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/util\/NoCache.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/util\/NoCache.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/util\/NoCache.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/util\/NoCache.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/util\/NoCache.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/util\/NoCache.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/util\/NoCache.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/util\/NoCache.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/util\/NoCache.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "empty", "tail" : "(): NoCache[A, B]", "member" : "scail.commons.util.NoCache.empty", "link" : "scail\/commons\/util\/NoCache$.html#empty[A,B]:scail.commons.util.NoCache[A,B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/util\/NoCache$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/util\/NoCache$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/util\/NoCache$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/util\/NoCache$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/util\/NoCache$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/util\/NoCache$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/util\/NoCache$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/NoCache$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/NoCache$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/NoCache$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/util\/NoCache$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/util\/NoCache$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/util\/NoCache$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/util\/NoCache$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/util\/NoCache$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/util\/NoCache$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/util\/NoCache$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/util\/NoCache$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/util\/NoCache$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scail\/commons\/util\/NoCache.html", "kind" : "class"}, {"name" : "scail.commons.util.SimpleCache", "shortDescription" : "A simple, thread-safe Cache implementation based on trie maps.", "object" : "scail\/commons\/util\/SimpleCache$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/util\/SimpleCache.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/util\/SimpleCache.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SimpleCache[A, B]) ⇒ Boolean, msg: ⇒ Any): SimpleCache[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/SimpleCache.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SimpleCache[A, B]) ⇒ Boolean): SimpleCache[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/SimpleCache.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): SimpleCache[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/SimpleCache.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SimpleCache[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/util\/SimpleCache.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SimpleCache[A, B], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/util\/SimpleCache.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SimpleCache[A, B], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/util\/SimpleCache.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scail.commons.util.SimpleCache.size", "link" : "scail\/commons\/util\/SimpleCache.html#size:Int", "kind" : "def"}, {"label" : "getOrElseUpdate", "tail" : "(key: A, op: ⇒ B): B", "member" : "scail.commons.util.SimpleCache.getOrElseUpdate", "link" : "scail\/commons\/util\/SimpleCache.html#getOrElseUpdate(key:A,op:=>B):B", "kind" : "def"}, {"member" : "scail.commons.util.SimpleCache#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/util\/SimpleCache.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/util\/SimpleCache.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/util\/SimpleCache.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/util\/SimpleCache.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/util\/SimpleCache.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/util\/SimpleCache.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/util\/SimpleCache.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/SimpleCache.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/SimpleCache.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/SimpleCache.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/util\/SimpleCache.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/util\/SimpleCache.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/util\/SimpleCache.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/util\/SimpleCache.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/util\/SimpleCache.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/util\/SimpleCache.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/util\/SimpleCache.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/util\/SimpleCache.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/util\/SimpleCache.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "empty", "tail" : "(): SimpleCache[A, B]", "member" : "scail.commons.util.SimpleCache.empty", "link" : "scail\/commons\/util\/SimpleCache$.html#empty[A,B]:scail.commons.util.SimpleCache[A,B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/util\/SimpleCache$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/util\/SimpleCache$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/util\/SimpleCache$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/util\/SimpleCache$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/util\/SimpleCache$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/util\/SimpleCache$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/util\/SimpleCache$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/SimpleCache$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/SimpleCache$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/util\/SimpleCache$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/util\/SimpleCache$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/util\/SimpleCache$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/util\/SimpleCache$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/util\/SimpleCache$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/util\/SimpleCache$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/util\/SimpleCache$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/util\/SimpleCache$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/util\/SimpleCache$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/util\/SimpleCache$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scail\/commons\/util\/SimpleCache.html", "kind" : "class"}], "scail.commons.ops.string" : [{"name" : "scail.commons.ops.string.DigestOps", "shortDescription" : "Extension methods for message digests.", "members_class" : [{"label" : "tap", "tail" : "(f: (DigestOps) ⇒ Unit): DigestOps", "member" : "scail.commons.ops.AnyOps.tap", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#tap(f:A=>Unit):A", "kind" : "def"}, {"label" : "option", "tail" : "(): Option[DigestOps]", "member" : "scail.commons.ops.AnyOps.option", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#option:Option[A]", "kind" : "def"}, {"label" : "future", "tail" : "(): Future[DigestOps]", "member" : "scail.commons.ops.AnyOps.future", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#future:scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DigestOps) ⇒ Boolean, msg: ⇒ Any): DigestOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DigestOps) ⇒ Boolean): DigestOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): DigestOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): DigestOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (DigestOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (DigestOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "sha512", "tail" : "(): String", "member" : "scail.commons.ops.string.DigestOps.sha512", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#sha512:String", "kind" : "def"}, {"label" : "sha384", "tail" : "(): String", "member" : "scail.commons.ops.string.DigestOps.sha384", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#sha384:String", "kind" : "def"}, {"label" : "sha256", "tail" : "(): String", "member" : "scail.commons.ops.string.DigestOps.sha256", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#sha256:String", "kind" : "def"}, {"label" : "sha1", "tail" : "(): String", "member" : "scail.commons.ops.string.DigestOps.sha1", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#sha1:String", "kind" : "def"}, {"label" : "md5", "tail" : "(): String", "member" : "scail.commons.ops.string.DigestOps.md5", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#md5:String", "kind" : "def"}, {"label" : "md2", "tail" : "(): String", "member" : "scail.commons.ops.string.DigestOps.md2", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#md2:String", "kind" : "def"}, {"member" : "scail.commons.ops.string.DigestOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/string\/package$$DigestOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/string\/package$$DigestOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.string.EscapeOps", "shortDescription" : "Extension methods for string escaping and unescaping.", "members_class" : [{"label" : "tap", "tail" : "(f: (EscapeOps) ⇒ Unit): EscapeOps", "member" : "scail.commons.ops.AnyOps.tap", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#tap(f:A=>Unit):A", "kind" : "def"}, {"label" : "option", "tail" : "(): Option[EscapeOps]", "member" : "scail.commons.ops.AnyOps.option", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#option:Option[A]", "kind" : "def"}, {"label" : "future", "tail" : "(): Future[EscapeOps]", "member" : "scail.commons.ops.AnyOps.future", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#future:scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EscapeOps) ⇒ Boolean, msg: ⇒ Any): EscapeOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EscapeOps) ⇒ Boolean): EscapeOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): EscapeOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): EscapeOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (EscapeOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (EscapeOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "quoteRegexReplacement", "tail" : "(): String", "member" : "scail.commons.ops.string.EscapeOps.quoteRegexReplacement", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#quoteRegexReplacement:String", "kind" : "def"}, {"label" : "quoteRegex", "tail" : "(): String", "member" : "scail.commons.ops.string.EscapeOps.quoteRegex", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#quoteRegex:String", "kind" : "def"}, {"label" : "unescapeXml", "tail" : "(): String", "member" : "scail.commons.ops.string.EscapeOps.unescapeXml", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#unescapeXml:String", "kind" : "def"}, {"label" : "unescapeJson", "tail" : "(): String", "member" : "scail.commons.ops.string.EscapeOps.unescapeJson", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#unescapeJson:String", "kind" : "def"}, {"label" : "unescapeJava", "tail" : "(): String", "member" : "scail.commons.ops.string.EscapeOps.unescapeJava", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#unescapeJava:String", "kind" : "def"}, {"label" : "unescapeHtml", "tail" : "(): String", "member" : "scail.commons.ops.string.EscapeOps.unescapeHtml", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#unescapeHtml:String", "kind" : "def"}, {"label" : "unescapeCsv", "tail" : "(): String", "member" : "scail.commons.ops.string.EscapeOps.unescapeCsv", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#unescapeCsv:String", "kind" : "def"}, {"label" : "escapeXml", "tail" : "(): String", "member" : "scail.commons.ops.string.EscapeOps.escapeXml", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#escapeXml:String", "kind" : "def"}, {"label" : "escapeJson", "tail" : "(): String", "member" : "scail.commons.ops.string.EscapeOps.escapeJson", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#escapeJson:String", "kind" : "def"}, {"label" : "escapeJava", "tail" : "(): String", "member" : "scail.commons.ops.string.EscapeOps.escapeJava", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#escapeJava:String", "kind" : "def"}, {"label" : "escapeHtml", "tail" : "(): String", "member" : "scail.commons.ops.string.EscapeOps.escapeHtml", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#escapeHtml:String", "kind" : "def"}, {"label" : "escapeCsv", "tail" : "(): String", "member" : "scail.commons.ops.string.EscapeOps.escapeCsv", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#escapeCsv:String", "kind" : "def"}, {"member" : "scail.commons.ops.string.EscapeOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/string\/package$$EscapeOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/string\/package$$EscapeOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.string.InflectorOps", "shortDescription" : "Extension methods for inflection (singular\/plural) and naming case convention transformations.", "members_class" : [{"label" : "tap", "tail" : "(f: (InflectorOps) ⇒ Unit): InflectorOps", "member" : "scail.commons.ops.AnyOps.tap", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#tap(f:A=>Unit):A", "kind" : "def"}, {"label" : "option", "tail" : "(): Option[InflectorOps]", "member" : "scail.commons.ops.AnyOps.option", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#option:Option[A]", "kind" : "def"}, {"label" : "future", "tail" : "(): Future[InflectorOps]", "member" : "scail.commons.ops.AnyOps.future", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#future:scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (InflectorOps) ⇒ Boolean, msg: ⇒ Any): InflectorOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (InflectorOps) ⇒ Boolean): InflectorOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): InflectorOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): InflectorOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (InflectorOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (InflectorOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "upperCamelCase", "tail" : "(delimiterChars: String): String", "member" : "scail.commons.ops.string.InflectorOps.upperCamelCase", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#upperCamelCase(delimiterChars:String):String", "kind" : "def"}, {"label" : "upperCamelCase", "tail" : "(): String", "member" : "scail.commons.ops.string.InflectorOps.upperCamelCase", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#upperCamelCase:String", "kind" : "def"}, {"label" : "underscore", "tail" : "(delimiterChars: String): String", "member" : "scail.commons.ops.string.InflectorOps.underscore", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#underscore(delimiterChars:String):String", "kind" : "def"}, {"label" : "underscore", "tail" : "(): String", "member" : "scail.commons.ops.string.InflectorOps.underscore", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#underscore:String", "kind" : "def"}, {"label" : "singularize", "tail" : "(): String", "member" : "scail.commons.ops.string.InflectorOps.singularize", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#singularize:String", "kind" : "def"}, {"label" : "sentenceCase", "tail" : "(): String", "member" : "scail.commons.ops.string.InflectorOps.sentenceCase", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#sentenceCase:String", "kind" : "def"}, {"label" : "pluralize", "tail" : "(count: Int): String", "member" : "scail.commons.ops.string.InflectorOps.pluralize", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#pluralize(count:Int):String", "kind" : "def"}, {"label" : "pluralize", "tail" : "(): String", "member" : "scail.commons.ops.string.InflectorOps.pluralize", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#pluralize:String", "kind" : "def"}, {"label" : "lowerCamelCase", "tail" : "(delimiterChars: String): String", "member" : "scail.commons.ops.string.InflectorOps.lowerCamelCase", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#lowerCamelCase(delimiterChars:String):String", "kind" : "def"}, {"label" : "lowerCamelCase", "tail" : "(): String", "member" : "scail.commons.ops.string.InflectorOps.lowerCamelCase", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#lowerCamelCase:String", "kind" : "def"}, {"label" : "humanizeTitle", "tail" : "(removableTokens: String*): String", "member" : "scail.commons.ops.string.InflectorOps.humanizeTitle", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#humanizeTitle(removableTokens:String*):String", "kind" : "def"}, {"label" : "humanizeTitle", "tail" : "(): String", "member" : "scail.commons.ops.string.InflectorOps.humanizeTitle", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#humanizeTitle:String", "kind" : "def"}, {"label" : "humanize", "tail" : "(removableTokens: String*): String", "member" : "scail.commons.ops.string.InflectorOps.humanize", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#humanize(removableTokens:String*):String", "kind" : "def"}, {"label" : "humanize", "tail" : "(): String", "member" : "scail.commons.ops.string.InflectorOps.humanize", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#humanize:String", "kind" : "def"}, {"member" : "scail.commons.ops.string.InflectorOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/string\/package$$InflectorOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/string\/package$$InflectorOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.string.StringOps", "shortDescription" : "Extension methods for String.", "members_class" : [{"label" : "tap", "tail" : "(f: (StringOps) ⇒ Unit): StringOps", "member" : "scail.commons.ops.AnyOps.tap", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#tap(f:A=>Unit):A", "kind" : "def"}, {"label" : "option", "tail" : "(): Option[StringOps]", "member" : "scail.commons.ops.AnyOps.option", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#option:Option[A]", "kind" : "def"}, {"label" : "future", "tail" : "(): Future[StringOps]", "member" : "scail.commons.ops.AnyOps.future", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#future:scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (StringOps) ⇒ Boolean, msg: ⇒ Any): StringOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (StringOps) ⇒ Boolean): StringOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): StringOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): StringOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (StringOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (StringOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "titleCase", "tail" : "(): String", "member" : "scail.commons.ops.string.StringOps.titleCase", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#titleCase:String", "kind" : "def"}, {"label" : "stripAccents", "tail" : "(): String", "member" : "scail.commons.ops.string.StringOps.stripAccents", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#stripAccents:String", "kind" : "def"}, {"label" : "normalizeSpace", "tail" : "(): String", "member" : "scail.commons.ops.string.StringOps.normalizeSpace", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#normalizeSpace:String", "kind" : "def"}, {"label" : "isTruthy", "tail" : "(): Boolean", "member" : "scail.commons.ops.string.StringOps.isTruthy", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#isTruthy:Boolean", "kind" : "def"}, {"label" : "isFalsy", "tail" : "(): Boolean", "member" : "scail.commons.ops.string.StringOps.isFalsy", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#isFalsy:Boolean", "kind" : "def"}, {"label" : "nonBlank", "tail" : "(): Boolean", "member" : "scail.commons.ops.string.StringOps.nonBlank", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#nonBlank:Boolean", "kind" : "def"}, {"label" : "isBlank", "tail" : "(): Boolean", "member" : "scail.commons.ops.string.StringOps.isBlank", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#isBlank:Boolean", "kind" : "def"}, {"label" : "safeEquals", "tail" : "(that: String, cs: Charset): Boolean", "member" : "scail.commons.ops.string.StringOps.safeEquals", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#safeEquals(that:String,cs:java.nio.charset.Charset):Boolean", "kind" : "def"}, {"label" : "constantTimeEquals", "tail" : "(that: String, cs: Charset): Boolean", "member" : "scail.commons.ops.string.StringOps.constantTimeEquals", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#constantTimeEquals(that:String,cs:java.nio.charset.Charset):Boolean", "kind" : "def"}, {"label" : "reader", "tail" : "(): Reader", "member" : "scail.commons.ops.string.StringOps.reader", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#reader:java.io.Reader", "kind" : "def"}, {"label" : "asInputStream", "tail" : "(): InputStream", "member" : "scail.commons.ops.string.StringOps.asInputStream", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#asInputStream:java.io.InputStream", "kind" : "def"}, {"label" : "asInputStream", "tail" : "(cs: Charset): InputStream", "member" : "scail.commons.ops.string.StringOps.asInputStream", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#asInputStream(cs:java.nio.charset.Charset):java.io.InputStream", "kind" : "def"}, {"label" : "asDouble", "tail" : "(): Option[Double]", "member" : "scail.commons.ops.string.StringOps.asDouble", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#asDouble:Option[Double]", "kind" : "def"}, {"label" : "asFloat", "tail" : "(): Option[Float]", "member" : "scail.commons.ops.string.StringOps.asFloat", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#asFloat:Option[Float]", "kind" : "def"}, {"label" : "asLong", "tail" : "(): Option[Long]", "member" : "scail.commons.ops.string.StringOps.asLong", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#asLong:Option[Long]", "kind" : "def"}, {"label" : "asInt", "tail" : "(): Option[Int]", "member" : "scail.commons.ops.string.StringOps.asInt", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#asInt:Option[Int]", "kind" : "def"}, {"label" : "asShort", "tail" : "(): Option[Short]", "member" : "scail.commons.ops.string.StringOps.asShort", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#asShort:Option[Short]", "kind" : "def"}, {"label" : "asByte", "tail" : "(): Option[Byte]", "member" : "scail.commons.ops.string.StringOps.asByte", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#asByte:Option[Byte]", "kind" : "def"}, {"label" : "asBoolean", "tail" : "(): Option[Boolean]", "member" : "scail.commons.ops.string.StringOps.asBoolean", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#asBoolean:Option[Boolean]", "kind" : "def"}, {"label" : "\/", "tail" : "(pathname: String): File", "member" : "scail.commons.ops.string.StringOps.\/", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#\/(pathname:String):java.io.File", "kind" : "def"}, {"member" : "scail.commons.ops.string.StringOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/string\/package$$StringOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/string\/package$$StringOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.string.ValidatorOps", "shortDescription" : "Extension methods for string validation.", "members_class" : [{"label" : "tap", "tail" : "(f: (ValidatorOps) ⇒ Unit): ValidatorOps", "member" : "scail.commons.ops.AnyOps.tap", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#tap(f:A=>Unit):A", "kind" : "def"}, {"label" : "option", "tail" : "(): Option[ValidatorOps]", "member" : "scail.commons.ops.AnyOps.option", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#option:Option[A]", "kind" : "def"}, {"label" : "future", "tail" : "(): Future[ValidatorOps]", "member" : "scail.commons.ops.AnyOps.future", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#future:scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValidatorOps) ⇒ Boolean, msg: ⇒ Any): ValidatorOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ValidatorOps) ⇒ Boolean): ValidatorOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ValidatorOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ValidatorOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ValidatorOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ValidatorOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "isValidUrl", "tail" : "(): Boolean", "member" : "scail.commons.ops.string.ValidatorOps.isValidUrl", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#isValidUrl:Boolean", "kind" : "def"}, {"label" : "isValidEmail", "tail" : "(): Boolean", "member" : "scail.commons.ops.string.ValidatorOps.isValidEmail", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#isValidEmail:Boolean", "kind" : "def"}, {"label" : "isValidDomain", "tail" : "(): Boolean", "member" : "scail.commons.ops.string.ValidatorOps.isValidDomain", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#isValidDomain:Boolean", "kind" : "def"}, {"member" : "scail.commons.ops.string.ValidatorOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/string\/package$$ValidatorOps.html", "kind" : "class"}], "scail.commons.collection" : [{"name" : "scail.commons.collection.IndexedSet", "shortDescription" : "This class implements immutable indexed sets using a hash trie.", "object" : "scail\/commons\/collection\/IndexedSet$.html", "members_class" : [{"label" : "toParArray", "tail" : "(): ParArray[T]", "member" : "scala.collection.parallel.CollectionsHaveToParArray.toParArray", "link" : "scail\/commons\/collection\/IndexedSet.html#toParArray:scala.collection.parallel.mutable.ParArray[T]", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/collection\/IndexedSet.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedSet[A, B]) ⇒ Boolean, msg: ⇒ Any): IndexedSet[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/collection\/IndexedSet.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedSet[A, B]) ⇒ Boolean): IndexedSet[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/collection\/IndexedSet.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IndexedSet[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/collection\/IndexedSet.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IndexedSet[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/collection\/IndexedSet.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IndexedSet[A, B], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/collection\/IndexedSet.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IndexedSet[A, B], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/collection\/IndexedSet.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "WithFilter", "tail" : "", "member" : "scala.collection.TraversableLike.WithFilter", "link" : "scail\/commons\/collection\/IndexedSet.html#WithFilterextendsFilterMonadic[A,Repr]", "kind" : "class"}, {"label" : "get", "tail" : "(key: B): Option[A]", "member" : "scail.commons.collection.IndexedSet.get", "link" : "scail\/commons\/collection\/IndexedSet.html#get(key:B):Option[A]", "kind" : "def"}, {"label" : "containsKey", "tail" : "(key: B): Boolean", "member" : "scail.commons.collection.IndexedSet.containsKey", "link" : "scail\/commons\/collection\/IndexedSet.html#containsKey(key:B):Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scail.commons.collection.IndexedSet.size", "link" : "scail\/commons\/collection\/IndexedSet.html#size:Int", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) ⇒ U): Unit", "member" : "scail.commons.collection.IndexedSet.foreach", "link" : "scail\/commons\/collection\/IndexedSet.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "empty", "tail" : "(): IndexedSet[A, B]", "member" : "scail.commons.collection.IndexedSet.empty", "link" : "scail\/commons\/collection\/IndexedSet.html#empty:scail.commons.collection.IndexedSet[A,B]", "kind" : "def"}, {"label" : "-", "tail" : "(elem: A): IndexedSet[A, B]", "member" : "scail.commons.collection.IndexedSet.-", "link" : "scail\/commons\/collection\/IndexedSet.html#-(elem:A):scail.commons.collection.IndexedSet[A,B]", "kind" : "def"}, {"label" : "+", "tail" : "(elem: A): IndexedSet[A, B]", "member" : "scail.commons.collection.IndexedSet.+", "link" : "scail\/commons\/collection\/IndexedSet.html#+(elem:A):scail.commons.collection.IndexedSet[A,B]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[A]", "member" : "scail.commons.collection.IndexedSet.iterator", "link" : "scail\/commons\/collection\/IndexedSet.html#iterator:Iterator[A]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: A): Boolean", "member" : "scail.commons.collection.IndexedSet.contains", "link" : "scail\/commons\/collection\/IndexedSet.html#contains(elem:A):Boolean", "kind" : "def"}, {"label" : "seq", "tail" : "(): Set[A]", "member" : "scala.collection.Set.seq", "link" : "scail\/commons\/collection\/IndexedSet.html#seq:scala.collection.Set[A]", "kind" : "def"}, {"label" : "companion", "tail" : "(): GenericCompanion[Set]", "member" : "scala.collection.Set.companion", "link" : "scail\/commons\/collection\/IndexedSet.html#companion:scala.collection.generic.GenericCompanion[scala.collection.Set]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.SetLike.toString", "link" : "scail\/commons\/collection\/IndexedSet.html#toString():String", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.SetLike.stringPrefix", "link" : "scail\/commons\/collection\/IndexedSet.html#stringPrefix:String", "kind" : "def"}, {"label" : "subsets", "tail" : "(): Iterator[IndexedSet[A, B]]", "member" : "scala.collection.SetLike.subsets", "link" : "scail\/commons\/collection\/IndexedSet.html#subsets():Iterator[This]", "kind" : "def"}, {"label" : "subsets", "tail" : "(len: Int): Iterator[IndexedSet[A, B]]", "member" : "scala.collection.SetLike.subsets", "link" : "scail\/commons\/collection\/IndexedSet.html#subsets(len:Int):Iterator[This]", "kind" : "def"}, {"label" : "diff", "tail" : "(that: GenSet[A]): IndexedSet[A, B]", "member" : "scala.collection.SetLike.diff", "link" : "scail\/commons\/collection\/IndexedSet.html#diff(that:scala.collection.GenSet[A]):This", "kind" : "def"}, {"label" : "union", "tail" : "(that: GenSet[A]): IndexedSet[A, B]", "member" : "scala.collection.SetLike.union", "link" : "scail\/commons\/collection\/IndexedSet.html#union(that:scala.collection.GenSet[A]):This", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.SetLike.isEmpty", "link" : "scail\/commons\/collection\/IndexedSet.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "++", "tail" : "(elems: GenTraversableOnce[A]): IndexedSet[A, B]", "member" : "scala.collection.SetLike.++", "link" : "scail\/commons\/collection\/IndexedSet.html#++(elems:scala.collection.GenTraversableOnce[A]):This", "kind" : "def"}, {"label" : "+", "tail" : "(elem1: A, elem2: A, elems: A*): IndexedSet[A, B]", "member" : "scala.collection.SetLike.+", "link" : "scail\/commons\/collection\/IndexedSet.html#+(elem1:A,elem2:A,elems:A*):This", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B)(bf: CanBuildFrom[IndexedSet[A, B], B, That]): That", "member" : "scala.collection.SetLike.map", "link" : "scail\/commons\/collection\/IndexedSet.html#map[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[This,B,That]):That", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[A1]", "member" : "scala.collection.SetLike.toBuffer", "link" : "scail\/commons\/collection\/IndexedSet.html#toBuffer[A1>:A]:scala.collection.mutable.Buffer[A1]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[A]", "member" : "scala.collection.SetLike.toSeq", "link" : "scail\/commons\/collection\/IndexedSet.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "parCombiner", "tail" : "(): Combiner[A, ParSet[A]]", "member" : "scala.collection.SetLike.parCombiner", "link" : "scail\/commons\/collection\/IndexedSet.html#parCombiner:scala.collection.parallel.Combiner[A,scala.collection.parallel.ParSet[A]]", "kind" : "def"}, {"label" : "newBuilder", "tail" : "(): Builder[A, IndexedSet[A, B]]", "member" : "scala.collection.SetLike.newBuilder", "link" : "scail\/commons\/collection\/IndexedSet.html#newBuilder:scala.collection.mutable.Builder[A,This]", "kind" : "def"}, {"label" : "--", "tail" : "(xs: GenTraversableOnce[A]): IndexedSet[A, B]", "member" : "scala.collection.generic.Subtractable.--", "link" : "scail\/commons\/collection\/IndexedSet.html#--(xs:scala.collection.GenTraversableOnce[A]):Repr", "kind" : "def"}, {"label" : "-", "tail" : "(elem1: A, elem2: A, elems: A*): IndexedSet[A, B]", "member" : "scala.collection.generic.Subtractable.-", "link" : "scail\/commons\/collection\/IndexedSet.html#-(elem1:A,elem2:A,elems:A*):Repr", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.collection.GenSetLike.hashCode", "link" : "scail\/commons\/collection\/IndexedSet.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "scala.collection.GenSetLike.equals", "link" : "scail\/commons\/collection\/IndexedSet.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "subsetOf", "tail" : "(that: GenSet[A]): Boolean", "member" : "scala.collection.GenSetLike.subsetOf", "link" : "scail\/commons\/collection\/IndexedSet.html#subsetOf(that:scala.collection.GenSet[A]):Boolean", "kind" : "def"}, {"label" : "&~", "tail" : "(that: GenSet[A]): IndexedSet[A, B]", "member" : "scala.collection.GenSetLike.&~", "link" : "scail\/commons\/collection\/IndexedSet.html#&~(that:scala.collection.GenSet[A]):Repr", "kind" : "def"}, {"label" : "|", "tail" : "(that: GenSet[A]): IndexedSet[A, B]", "member" : "scala.collection.GenSetLike.|", "link" : "scail\/commons\/collection\/IndexedSet.html#|(that:scala.collection.GenSet[A]):Repr", "kind" : "def"}, {"label" : "&", "tail" : "(that: GenSet[A]): IndexedSet[A, B]", "member" : "scala.collection.GenSetLike.&", "link" : "scail\/commons\/collection\/IndexedSet.html#&(that:scala.collection.GenSet[A]):Repr", "kind" : "def"}, {"label" : "intersect", "tail" : "(that: GenSet[A]): IndexedSet[A, B]", "member" : "scala.collection.GenSetLike.intersect", "link" : "scail\/commons\/collection\/IndexedSet.html#intersect(that:scala.collection.GenSet[A]):Repr", "kind" : "def"}, {"label" : "apply", "tail" : "(elem: A): Boolean", "member" : "scala.collection.GenSetLike.apply", "link" : "scail\/commons\/collection\/IndexedSet.html#apply(elem:A):Boolean", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Boolean) ⇒ A): (A) ⇒ A", "member" : "scala.Function1.andThen", "link" : "scail\/commons\/collection\/IndexedSet.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ A): (A) ⇒ Boolean", "member" : "scala.Function1.compose", "link" : "scail\/commons\/collection\/IndexedSet.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): IterableView[A, IndexedSet[A, B]]", "member" : "scala.collection.IterableLike.view", "link" : "scail\/commons\/collection\/IndexedSet.html#view(from:Int,until:Int):scala.collection.IterableView[A,Repr]", "kind" : "def"}, {"label" : "view", "tail" : "(): IterableView[A, IndexedSet[A, B]]", "member" : "scala.collection.IterableLike.view", "link" : "scail\/commons\/collection\/IndexedSet.html#view:scala.collection.IterableView[A,Repr]", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.IterableLike.canEqual", "link" : "scail\/commons\/collection\/IndexedSet.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[A]", "member" : "scala.collection.IterableLike.toStream", "link" : "scail\/commons\/collection\/IndexedSet.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: GenIterable[B]): Boolean", "member" : "scala.collection.IterableLike.sameElements", "link" : "scail\/commons\/collection\/IndexedSet.html#sameElements[B>:A](that:scala.collection.GenIterable[B]):Boolean", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(bf: CanBuildFrom[IndexedSet[A, B], (A1, Int), That]): That", "member" : "scala.collection.IterableLike.zipWithIndex", "link" : "scail\/commons\/collection\/IndexedSet.html#zipWithIndex[A1>:A,That](implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,Int),That]):That", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: GenIterable[B], thisElem: A1, thatElem: B)(bf: CanBuildFrom[IndexedSet[A, B], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zipAll", "link" : "scail\/commons\/collection\/IndexedSet.html#zipAll[B,A1>:A,That](that:scala.collection.GenIterable[B],thisElem:A1,thatElem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "zip", "tail" : "(that: GenIterable[B])(bf: CanBuildFrom[IndexedSet[A, B], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zip", "link" : "scail\/commons\/collection\/IndexedSet.html#zip[A1>:A,B,That](that:scala.collection.GenIterable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.IterableLike.copyToArray", "link" : "scail\/commons\/collection\/IndexedSet.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): IndexedSet[A, B]", "member" : "scala.collection.IterableLike.dropRight", "link" : "scail\/commons\/collection\/IndexedSet.html#dropRight(n:Int):Repr", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): IndexedSet[A, B]", "member" : "scala.collection.IterableLike.takeRight", "link" : "scail\/commons\/collection\/IndexedSet.html#takeRight(n:Int):Repr", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[IndexedSet[A, B]]", "member" : "scala.collection.IterableLike.sliding", "link" : "scail\/commons\/collection\/IndexedSet.html#sliding(size:Int,step:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[IndexedSet[A, B]]", "member" : "scala.collection.IterableLike.sliding", "link" : "scail\/commons\/collection\/IndexedSet.html#sliding(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[IndexedSet[A, B]]", "member" : "scala.collection.IterableLike.grouped", "link" : "scail\/commons\/collection\/IndexedSet.html#grouped(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (A) ⇒ Boolean): IndexedSet[A, B]", "member" : "scala.collection.IterableLike.takeWhile", "link" : "scail\/commons\/collection\/IndexedSet.html#takeWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): IndexedSet[A, B]", "member" : "scala.collection.IterableLike.drop", "link" : "scail\/commons\/collection\/IndexedSet.html#drop(n:Int):Repr", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): IndexedSet[A, B]", "member" : "scala.collection.IterableLike.take", "link" : "scail\/commons\/collection\/IndexedSet.html#take(n:Int):Repr", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): IndexedSet[A, B]", "member" : "scala.collection.IterableLike.slice", "link" : "scail\/commons\/collection\/IndexedSet.html#slice(from:Int,until:Int):Repr", "kind" : "def"}, {"label" : "head", "tail" : "(): A", "member" : "scala.collection.IterableLike.head", "link" : "scail\/commons\/collection\/IndexedSet.html#head:A", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[A]", "member" : "scala.collection.IterableLike.toIterator", "link" : "scail\/commons\/collection\/IndexedSet.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[A]", "member" : "scala.collection.IterableLike.toIterable", "link" : "scail\/commons\/collection\/IndexedSet.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (A, B) ⇒ B): B", "member" : "scala.collection.IterableLike.reduceRight", "link" : "scail\/commons\/collection\/IndexedSet.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (A, B) ⇒ B): B", "member" : "scala.collection.IterableLike.foldRight", "link" : "scail\/commons\/collection\/IndexedSet.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (A) ⇒ Boolean): Option[A]", "member" : "scala.collection.IterableLike.find", "link" : "scail\/commons\/collection\/IndexedSet.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (A) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.exists", "link" : "scail\/commons\/collection\/IndexedSet.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (A) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.forall", "link" : "scail\/commons\/collection\/IndexedSet.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "toCollection", "tail" : "(repr: IndexedSet[A, B]): Iterable[A]", "member" : "scala.collection.IterableLike.toCollection", "link" : "scail\/commons\/collection\/IndexedSet.html#toCollection(repr:Repr):Iterable[A]", "kind" : "def"}, {"label" : "thisCollection", "tail" : "(): Iterable[A]", "member" : "scala.collection.IterableLike.thisCollection", "link" : "scail\/commons\/collection\/IndexedSet.html#thisCollection:Iterable[A]", "kind" : "def"}, {"label" : "transpose", "tail" : "(asTraversable: (A) ⇒ GenTraversableOnce[B]): Set[Set[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.transpose", "link" : "scail\/commons\/collection\/IndexedSet.html#transpose[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asTraversable: (A) ⇒ GenTraversableOnce[B]): Set[B]", "member" : "scala.collection.generic.GenericTraversableTemplate.flatten", "link" : "scail\/commons\/collection\/IndexedSet.html#flatten[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (A) ⇒ (A1, A2, A3)): (Set[A1], Set[A2], Set[A3])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip3", "link" : "scail\/commons\/collection\/IndexedSet.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (A) ⇒ (A1, A2)): (Set[A1], Set[A2])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip", "link" : "scail\/commons\/collection\/IndexedSet.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "genericBuilder", "tail" : "(): Builder[B, Set[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.genericBuilder", "link" : "scail\/commons\/collection\/IndexedSet.html#genericBuilder[B]:scala.collection.mutable.Builder[B,CC[B]]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) ⇒ Boolean): FilterMonadic[A, IndexedSet[A, B]]", "member" : "scala.collection.TraversableLike.withFilter", "link" : "scail\/commons\/collection\/IndexedSet.html#withFilter(p:A=>Boolean):scala.collection.generic.FilterMonadic[A,Repr]", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, A, Col[A]]): Col[A]", "member" : "scala.collection.TraversableLike.to", "link" : "scail\/commons\/collection\/IndexedSet.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[A]", "member" : "scala.collection.TraversableLike.toTraversable", "link" : "scail\/commons\/collection\/IndexedSet.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[IndexedSet[A, B]]", "member" : "scala.collection.TraversableLike.inits", "link" : "scail\/commons\/collection\/IndexedSet.html#inits:Iterator[Repr]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[IndexedSet[A, B]]", "member" : "scala.collection.TraversableLike.tails", "link" : "scail\/commons\/collection\/IndexedSet.html#tails:Iterator[Repr]", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (IndexedSet[A, B], IndexedSet[A, B])", "member" : "scala.collection.TraversableLike.splitAt", "link" : "scail\/commons\/collection\/IndexedSet.html#splitAt(n:Int):(Repr,Repr)", "kind" : "def"}, {"label" : "span", "tail" : "(p: (A) ⇒ Boolean): (IndexedSet[A, B], IndexedSet[A, B])", "member" : "scala.collection.TraversableLike.span", "link" : "scail\/commons\/collection\/IndexedSet.html#span(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (A) ⇒ Boolean): IndexedSet[A, B]", "member" : "scala.collection.TraversableLike.dropWhile", "link" : "scail\/commons\/collection\/IndexedSet.html#dropWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "init", "tail" : "(): IndexedSet[A, B]", "member" : "scala.collection.TraversableLike.init", "link" : "scail\/commons\/collection\/IndexedSet.html#init:Repr", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[A]", "member" : "scala.collection.TraversableLike.lastOption", "link" : "scail\/commons\/collection\/IndexedSet.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): A", "member" : "scala.collection.TraversableLike.last", "link" : "scail\/commons\/collection\/IndexedSet.html#last:A", "kind" : "def"}, {"label" : "tail", "tail" : "(): IndexedSet[A, B]", "member" : "scala.collection.TraversableLike.tail", "link" : "scail\/commons\/collection\/IndexedSet.html#tail:Repr", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[A]", "member" : "scala.collection.TraversableLike.headOption", "link" : "scail\/commons\/collection\/IndexedSet.html#headOption:Option[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (A, B) ⇒ B)(bf: CanBuildFrom[IndexedSet[A, B], B, That]): That", "member" : "scala.collection.TraversableLike.scanRight", "link" : "scail\/commons\/collection\/IndexedSet.html#scanRight[B,That](z:B)(op:(A,B)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, A) ⇒ B)(bf: CanBuildFrom[IndexedSet[A, B], B, That]): That", "member" : "scala.collection.TraversableLike.scanLeft", "link" : "scail\/commons\/collection\/IndexedSet.html#scanLeft[B,That](z:B)(op:(B,A)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) ⇒ B)(cbf: CanBuildFrom[IndexedSet[A, B], B, That]): That", "member" : "scala.collection.TraversableLike.scan", "link" : "scail\/commons\/collection\/IndexedSet.html#scan[B>:A,That](z:B)(op:(B,B)=>B)(implicitcbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (A) ⇒ K): Map[K, IndexedSet[A, B]]", "member" : "scala.collection.TraversableLike.groupBy", "link" : "scail\/commons\/collection\/IndexedSet.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,Repr]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (A) ⇒ Boolean): (IndexedSet[A, B], IndexedSet[A, B])", "member" : "scala.collection.TraversableLike.partition", "link" : "scail\/commons\/collection\/IndexedSet.html#partition(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B])(bf: CanBuildFrom[IndexedSet[A, B], B, That]): That", "member" : "scala.collection.TraversableLike.collect", "link" : "scail\/commons\/collection\/IndexedSet.html#collect[B,That](pf:PartialFunction[A,B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (A) ⇒ Boolean): IndexedSet[A, B]", "member" : "scala.collection.TraversableLike.filterNot", "link" : "scail\/commons\/collection\/IndexedSet.html#filterNot(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): IndexedSet[A, B]", "member" : "scala.collection.TraversableLike.filter", "link" : "scail\/commons\/collection\/IndexedSet.html#filter(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ GenTraversableOnce[B])(bf: CanBuildFrom[IndexedSet[A, B], B, That]): That", "member" : "scala.collection.TraversableLike.flatMap", "link" : "scail\/commons\/collection\/IndexedSet.html#flatMap[B,That](f:A=>scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: Traversable[B])(bf: CanBuildFrom[IndexedSet[A, B], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "scail\/commons\/collection\/IndexedSet.html#++:[B>:A,That](that:Traversable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: TraversableOnce[B])(bf: CanBuildFrom[IndexedSet[A, B], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "scail\/commons\/collection\/IndexedSet.html#++:[B>:A,That](that:scala.collection.TraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++", "tail" : "(that: GenTraversableOnce[B])(bf: CanBuildFrom[IndexedSet[A, B], B, That]): That", "member" : "scala.collection.TraversableLike.++", "link" : "scail\/commons\/collection\/IndexedSet.html#++[B>:A,That](that:scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.hasDefiniteSize", "link" : "scail\/commons\/collection\/IndexedSet.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.isTraversableAgain", "link" : "scail\/commons\/collection\/IndexedSet.html#isTraversableAgain:Boolean", "kind" : "final def"}, {"label" : "repr", "tail" : "(): IndexedSet[A, B]", "member" : "scala.collection.TraversableLike.repr", "link" : "scail\/commons\/collection\/IndexedSet.html#repr:Repr", "kind" : "def"}, {"label" : "Self", "tail" : "", "member" : "scala.collection.TraversableLike.Self", "link" : "scail\/commons\/collection\/IndexedSet.html#Self=Repr", "kind" : "type"}, {"label" : "par", "tail" : "(): ParSet[A]", "member" : "scala.collection.Parallelizable.par", "link" : "scail\/commons\/collection\/IndexedSet.html#par:ParRepr", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "scail\/commons\/collection\/IndexedSet.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "scail\/commons\/collection\/IndexedSet.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "scail\/commons\/collection\/IndexedSet.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "scail\/commons\/collection\/IndexedSet.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "scail\/commons\/collection\/IndexedSet.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "scail\/commons\/collection\/IndexedSet.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[A, (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "scail\/commons\/collection\/IndexedSet.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[A]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "scail\/commons\/collection\/IndexedSet.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "scail\/commons\/collection\/IndexedSet.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[A]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "scail\/commons\/collection\/IndexedSet.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "scala.collection.TraversableOnce.toList", "link" : "scail\/commons\/collection\/IndexedSet.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "scail\/commons\/collection\/IndexedSet.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "scail\/commons\/collection\/IndexedSet.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "scail\/commons\/collection\/IndexedSet.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "scail\/commons\/collection\/IndexedSet.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (A) ⇒ B)(cmp: Ordering[B]): A", "member" : "scala.collection.TraversableOnce.minBy", "link" : "scail\/commons\/collection\/IndexedSet.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (A) ⇒ B)(cmp: Ordering[B]): A", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "scail\/commons\/collection\/IndexedSet.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): A", "member" : "scala.collection.TraversableOnce.max", "link" : "scail\/commons\/collection\/IndexedSet.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): A", "member" : "scala.collection.TraversableOnce.min", "link" : "scail\/commons\/collection\/IndexedSet.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "scail\/commons\/collection\/IndexedSet.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "scail\/commons\/collection\/IndexedSet.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, A) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "scail\/commons\/collection\/IndexedSet.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "scail\/commons\/collection\/IndexedSet.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "scail\/commons\/collection\/IndexedSet.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "scail\/commons\/collection\/IndexedSet.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (A, B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "scail\/commons\/collection\/IndexedSet.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, A) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "scail\/commons\/collection\/IndexedSet.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, A) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "scail\/commons\/collection\/IndexedSet.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, A) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "scail\/commons\/collection\/IndexedSet.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (A, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "scail\/commons\/collection\/IndexedSet.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, A) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "scail\/commons\/collection\/IndexedSet.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[A, B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "scail\/commons\/collection\/IndexedSet.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (A) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "scail\/commons\/collection\/IndexedSet.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "scail\/commons\/collection\/IndexedSet.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[A]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "scail\/commons\/collection\/IndexedSet.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "scail\/commons\/collection\/IndexedSet.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/collection\/IndexedSet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/collection\/IndexedSet.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/collection\/IndexedSet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/collection\/IndexedSet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/collection\/IndexedSet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/collection\/IndexedSet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/collection\/IndexedSet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/collection\/IndexedSet.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/collection\/IndexedSet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/collection\/IndexedSet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/collection\/IndexedSet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/collection\/IndexedSet.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/collection\/IndexedSet.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/collection\/IndexedSet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/collection\/IndexedSet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/collection\/IndexedSet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "empty", "tail" : "(indexedBy: (A) ⇒ B): IndexedSet[A, B]", "member" : "scail.commons.collection.IndexedSet.empty", "link" : "scail\/commons\/collection\/IndexedSet$.html#empty[A,B](indexedBy:A=>B):scail.commons.collection.IndexedSet[A,B]", "kind" : "def"}, {"label" : "apply", "tail" : "(indexedBy: (A) ⇒ B)(elems: A*): IndexedSet[A, B]", "member" : "scail.commons.collection.IndexedSet.apply", "link" : "scail\/commons\/collection\/IndexedSet$.html#apply[A,B](indexedBy:A=>B)(elems:A*):scail.commons.collection.IndexedSet[A,B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/collection\/IndexedSet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/collection\/IndexedSet$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/collection\/IndexedSet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/collection\/IndexedSet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/collection\/IndexedSet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/collection\/IndexedSet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/collection\/IndexedSet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/collection\/IndexedSet$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/collection\/IndexedSet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/collection\/IndexedSet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/collection\/IndexedSet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/collection\/IndexedSet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/collection\/IndexedSet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/collection\/IndexedSet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/collection\/IndexedSet$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/collection\/IndexedSet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/collection\/IndexedSet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/collection\/IndexedSet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/collection\/IndexedSet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scail\/commons\/collection\/IndexedSet.html", "kind" : "class"}], "scail.commons" : [{"name" : "scail.commons.AsyncSpec", "shortDescription" : "Base class for non-blocking asynchronous tests.", "members_class" : [{"label" : "willBe", "tail" : "(thrown: Thrown.type): ThrownBy[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.ThrowSomethingOps.willBe", "link" : "scail\/commons\/AsyncSpec.html#willBe(thrown:org.mockito.IdiomaticMockitoBase.Thrown.type):org.mockito.IdiomaticMockitoBase.ThrownBy[E]", "kind" : "def"}, {"label" : "willBe", "tail" : "(a: Answered.type): AnsweredBy[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps.willBe", "link" : "scail\/commons\/AsyncSpec.html#willBe(a:org.mockito.IdiomaticMockitoBase.Answered.type):org.mockito.IdiomaticMockitoBase.AnsweredBy[R]", "kind" : "def"}, {"label" : "willBe", "tail" : "(r: Returned.type): ReturnedBy[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps.willBe", "link" : "scail\/commons\/AsyncSpec.html#willBe(r:org.mockito.IdiomaticMockitoBase.Returned.type):org.mockito.IdiomaticMockitoBase.ReturnedBy[R]", "kind" : "def"}, {"label" : "wasCalled", "tail" : "(called: ScalaVerificationMode)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasCalled", "link" : "scail\/commons\/AsyncSpec.html#wasCalled(called:org.mockito.ScalaVerificationMode)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "wasNever", "tail" : "(called: CalledAgain)(arg0: <:<[AsyncSpec, AnyRef]): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasNever", "link" : "scail\/commons\/AsyncSpec.html#wasNever(called:org.mockito.IdiomaticMockitoBase.CalledAgain)(implicit$ev:T<:<AnyRef):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "wasNever", "tail" : "(called: Called.type)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasNever", "link" : "scail\/commons\/AsyncSpec.html#wasNever(called:org.mockito.Called.type)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "was", "tail" : "(called: Called.type)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.was", "link" : "scail\/commons\/AsyncSpec.html#was(called:org.mockito.Called.type)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "isLenient", "tail" : "(): Unit", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.isLenient", "link" : "scail\/commons\/AsyncSpec.html#isLenient():Unit", "kind" : "macro def"}, {"label" : "answers", "tail" : "(): AnswerActions[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.answers", "link" : "scail\/commons\/AsyncSpec.html#answers:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "mustAnswer", "tail" : "(): AnswerActions[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustAnswer", "link" : "scail\/commons\/AsyncSpec.html#mustAnswer:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "shouldAnswer", "tail" : "(): AnswerActions[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldAnswer", "link" : "scail\/commons\/AsyncSpec.html#shouldAnswer:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "throws", "tail" : "(): ThrowActions[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.throws", "link" : "scail\/commons\/AsyncSpec.html#throws:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "mustThrow", "tail" : "(): ThrowActions[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustThrow", "link" : "scail\/commons\/AsyncSpec.html#mustThrow:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "shouldThrow", "tail" : "(): ThrowActions[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldThrow", "link" : "scail\/commons\/AsyncSpec.html#shouldThrow:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "calls", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.calls", "link" : "scail\/commons\/AsyncSpec.html#calls(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "mustCall", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustCall", "link" : "scail\/commons\/AsyncSpec.html#mustCall(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "shouldCall", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldCall", "link" : "scail\/commons\/AsyncSpec.html#shouldCall(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "returns", "tail" : "(): ReturnActions[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.returns", "link" : "scail\/commons\/AsyncSpec.html#returns:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "mustReturn", "tail" : "(): ReturnActions[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustReturn", "link" : "scail\/commons\/AsyncSpec.html#mustReturn:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "shouldReturn", "tail" : "(): ReturnActions[AsyncSpec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldReturn", "link" : "scail\/commons\/AsyncSpec.html#shouldReturn:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/AsyncSpec.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/AsyncSpec.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AsyncSpec) ⇒ Boolean, msg: ⇒ Any): AsyncSpec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/AsyncSpec.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AsyncSpec) ⇒ Boolean): AsyncSpec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/AsyncSpec.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): AsyncSpec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/AsyncSpec.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AsyncSpec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/AsyncSpec.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AsyncSpec, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/AsyncSpec.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AsyncSpec, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/AsyncSpec.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "scail\/commons\/AsyncSpec.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "IntOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.IntOps", "link" : "scail\/commons\/AsyncSpec.html#IntOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "ThrowSomethingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.ThrowSomethingOps", "link" : "scail\/commons\/AsyncSpec.html#ThrowSomethingOps[E]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps10", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps10", "link" : "scail\/commons\/AsyncSpec.html#DoSomethingOps10[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,P8<:<?>,P9<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps9", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps9", "link" : "scail\/commons\/AsyncSpec.html#DoSomethingOps9[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,P8<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps8", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps8", "link" : "scail\/commons\/AsyncSpec.html#DoSomethingOps8[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps7", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps7", "link" : "scail\/commons\/AsyncSpec.html#DoSomethingOps7[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps6", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps6", "link" : "scail\/commons\/AsyncSpec.html#DoSomethingOps6[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps5", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps5", "link" : "scail\/commons\/AsyncSpec.html#DoSomethingOps5[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps4", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps4", "link" : "scail\/commons\/AsyncSpec.html#DoSomethingOps4[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps3", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps3", "link" : "scail\/commons\/AsyncSpec.html#DoSomethingOps3[P0<:<?>,P1<:<?>,P2<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps2", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps2", "link" : "scail\/commons\/AsyncSpec.html#DoSomethingOps2[P0<:<?>,P1<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps1", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps1", "link" : "scail\/commons\/AsyncSpec.html#DoSomethingOps1[P0<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps0", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps0", "link" : "scail\/commons\/AsyncSpec.html#DoSomethingOps0[R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps", "link" : "scail\/commons\/AsyncSpec.html#DoSomethingOps[R]extendsAnyRef", "kind" : "implicit class"}, {"label" : "VerifyingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps", "link" : "scail\/commons\/AsyncSpec.html#VerifyingOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "StubbingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps", "link" : "scail\/commons\/AsyncSpec.html#StubbingOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "SuccessOrFailure", "tail" : "", "member" : "org.scalatest.TryValues.SuccessOrFailure", "link" : "scail\/commons\/AsyncSpec.html#SuccessOrFailure[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Valuable", "tail" : "", "member" : "org.scalatest.OptionValues.Valuable", "link" : "scail\/commons\/AsyncSpec.html#Valuable[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "RightValuable", "tail" : "", "member" : "org.scalatest.EitherValues.RightValuable", "link" : "scail\/commons\/AsyncSpec.html#RightValuable[L<:<?>,R<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "LeftValuable", "tail" : "", "member" : "org.scalatest.EitherValues.LeftValuable", "link" : "scail\/commons\/AsyncSpec.html#LeftValuable[L<:<?>,R<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "DiagrammedAssertionsHelper", "tail" : "", "member" : "org.scalatest.DiagrammedAssertions.DiagrammedAssertionsHelper", "link" : "scail\/commons\/AsyncSpec.html#DiagrammedAssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "FreeSpecStringWrapper", "tail" : "", "member" : "org.scalatest.AsyncFreeSpecLike.FreeSpecStringWrapper", "link" : "scail\/commons\/AsyncSpec.html#FreeSpecStringWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfTaggedAsInvocationOnString", "tail" : "", "member" : "org.scalatest.AsyncFreeSpecLike.ResultOfTaggedAsInvocationOnString", "link" : "scail\/commons\/AsyncSpec.html#ResultOfTaggedAsInvocationOnStringextendsAnyRef", "kind" : "final class"}, {"label" : "NoArgAsyncTest", "tail" : "", "member" : "org.scalatest.AsyncTestSuite.NoArgAsyncTest", "link" : "scail\/commons\/AsyncSpec.html#NoArgAsyncTestextends()=>org.scalatest.FutureOutcomewithTestData", "kind" : "trait"}, {"label" : "ResultOfCompleteInvocation", "tail" : "", "member" : "org.scalatest.CompleteLastly.ResultOfCompleteInvocation", "link" : "scail\/commons\/AsyncSpec.html#ResultOfCompleteInvocation[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "scail\/commons\/AsyncSpec.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "scail\/commons\/AsyncSpec.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "scail\/commons\/AsyncSpec.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"member" : "scail.commons.AsyncSpec#<init>", "error" : "unsupported entity"}, {"label" : "mockReturnsSelf", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "scail.commons.Mocking.mockReturnsSelf", "link" : "scail\/commons\/AsyncSpec.html#mockReturnsSelf[T<:AnyRef](implicitevidence$5:scala.reflect.ClassTag[T],implicitevidence$6:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "mockEmptyValues", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "scail.commons.Mocking.mockEmptyValues", "link" : "scail\/commons\/AsyncSpec.html#mockEmptyValues[T<:AnyRef](implicitevidence$3:scala.reflect.ClassTag[T],implicitevidence$4:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "mockDeepStubs", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "scail.commons.Mocking.mockDeepStubs", "link" : "scail\/commons\/AsyncSpec.html#mockDeepStubs[T<:AnyRef](implicitevidence$1:scala.reflect.ClassTag[T],implicitevidence$2:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "*", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.*", "link" : "scail\/commons\/AsyncSpec.html#*[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "any", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.any", "link" : "scail\/commons\/AsyncSpec.html#any[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "anyVal", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.anyVal", "link" : "scail\/commons\/AsyncSpec.html#anyVal[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "n", "tail" : ": N", "member" : "org.mockito.matchers.NumericMatchers.n", "link" : "scail\/commons\/AsyncSpec.html#n:org.mockito.matchers.N", "kind" : "val"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "scail\/commons\/AsyncSpec.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "function0", "tail" : "(value: T): () ⇒ T", "member" : "org.mockito.matchers.FunctionMatchers.function0", "link" : "scail\/commons\/AsyncSpec.html#function0[T](value:T):()=>T", "kind" : "def"}, {"label" : "isNotNull", "tail" : "(): T", "member" : "org.mockito.matchers.NullMatchers.isNotNull", "link" : "scail\/commons\/AsyncSpec.html#isNotNull[T]:T", "kind" : "def"}, {"label" : "isNull", "tail" : "(): T", "member" : "org.mockito.matchers.NullMatchers.isNull", "link" : "scail\/commons\/AsyncSpec.html#isNull[T]:T", "kind" : "def"}, {"label" : "endsWith", "tail" : "(suffix: String): String", "member" : "org.mockito.matchers.StringThatMatchers.endsWith", "link" : "scail\/commons\/AsyncSpec.html#endsWith(suffix:String):String", "kind" : "def"}, {"label" : "contains", "tail" : "(substring: String): String", "member" : "org.mockito.matchers.StringThatMatchers.contains", "link" : "scail\/commons\/AsyncSpec.html#contains(substring:String):String", "kind" : "def"}, {"label" : "startsWith", "tail" : "(prefix: String): String", "member" : "org.mockito.matchers.StringThatMatchers.startsWith", "link" : "scail\/commons\/AsyncSpec.html#startsWith(prefix:String):String", "kind" : "def"}, {"label" : "matches", "tail" : "(regex: String): String", "member" : "org.mockito.matchers.StringThatMatchers.matches", "link" : "scail\/commons\/AsyncSpec.html#matches(regex:String):String", "kind" : "def"}, {"label" : "argMatching", "tail" : "(pf: PartialFunction[Any, Unit]): T", "member" : "org.mockito.matchers.ThatMatchers.argMatching", "link" : "scail\/commons\/AsyncSpec.html#argMatching[T](pf:PartialFunction[Any,Unit]):T", "kind" : "def"}, {"label" : "longThat", "tail" : "(matcher: ArgumentMatcher[Long]): Long", "member" : "org.mockito.matchers.ThatMatchers.longThat", "link" : "scail\/commons\/AsyncSpec.html#longThat(matcher:org.mockito.ArgumentMatcher[Long]):Long", "kind" : "def"}, {"label" : "shortThat", "tail" : "(matcher: ArgumentMatcher[Short]): Short", "member" : "org.mockito.matchers.ThatMatchers.shortThat", "link" : "scail\/commons\/AsyncSpec.html#shortThat(matcher:org.mockito.ArgumentMatcher[Short]):Short", "kind" : "def"}, {"label" : "floatThat", "tail" : "(matcher: ArgumentMatcher[Float]): Float", "member" : "org.mockito.matchers.ThatMatchers.floatThat", "link" : "scail\/commons\/AsyncSpec.html#floatThat(matcher:org.mockito.ArgumentMatcher[Float]):Float", "kind" : "def"}, {"label" : "intThat", "tail" : "(matcher: ArgumentMatcher[Int]): Int", "member" : "org.mockito.matchers.ThatMatchers.intThat", "link" : "scail\/commons\/AsyncSpec.html#intThat(matcher:org.mockito.ArgumentMatcher[Int]):Int", "kind" : "def"}, {"label" : "doubleThat", "tail" : "(matcher: ArgumentMatcher[Double]): Double", "member" : "org.mockito.matchers.ThatMatchers.doubleThat", "link" : "scail\/commons\/AsyncSpec.html#doubleThat(matcher:org.mockito.ArgumentMatcher[Double]):Double", "kind" : "def"}, {"label" : "charThat", "tail" : "(matcher: ArgumentMatcher[Char]): Char", "member" : "org.mockito.matchers.ThatMatchers.charThat", "link" : "scail\/commons\/AsyncSpec.html#charThat(matcher:org.mockito.ArgumentMatcher[Char]):Char", "kind" : "def"}, {"label" : "booleanThat", "tail" : "(matcher: ArgumentMatcher[Boolean]): Boolean", "member" : "org.mockito.matchers.ThatMatchers.booleanThat", "link" : "scail\/commons\/AsyncSpec.html#booleanThat(matcher:org.mockito.ArgumentMatcher[Boolean]):Boolean", "kind" : "def"}, {"label" : "byteThat", "tail" : "(matcher: ArgumentMatcher[Byte]): Byte", "member" : "org.mockito.matchers.ThatMatchers.byteThat", "link" : "scail\/commons\/AsyncSpec.html#byteThat(matcher:org.mockito.ArgumentMatcher[Byte]):Byte", "kind" : "def"}, {"label" : "argThat", "tail" : "(f: (T) ⇒ Boolean, desc: ⇒ String): T", "member" : "org.mockito.matchers.ThatMatchers.argThat", "link" : "scail\/commons\/AsyncSpec.html#argThat[T](f:T=>Boolean,desc:=>String):T", "kind" : "def"}, {"label" : "argThat", "tail" : "(matcher: ArgumentMatcher[T]): T", "member" : "org.mockito.matchers.ThatMatchers.argThat", "link" : "scail\/commons\/AsyncSpec.html#argThat[T](matcher:org.mockito.ArgumentMatcher[T]):T", "kind" : "def"}, {"label" : "eqToVal", "tail" : "(value: T)(arg0: Equality[T], arg1: ValueClassExtractor[T], arg2: Prettifier): T", "member" : "org.mockito.matchers.EqMatchers_VersionSpecific.eqToVal", "link" : "scail\/commons\/AsyncSpec.html#eqToVal[T](value:T)(implicitevidence$3:org.scalactic.Equality[T],implicitevidence$4:org.mockito.internal.ValueClassExtractor[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "eqTo", "tail" : "(value: T)(arg0: Equality[T], arg1: ValueClassExtractor[T], arg2: Prettifier): T", "member" : "org.mockito.matchers.EqMatchers_VersionSpecific.eqTo", "link" : "scail\/commons\/AsyncSpec.html#eqTo[T](value:T)(implicitevidence$1:org.scalactic.Equality[T],implicitevidence$2:org.mockito.internal.ValueClassExtractor[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "refEq", "tail" : "(value: T, excludeFields: String*): T", "member" : "org.mockito.matchers.EqMatchers.refEq", "link" : "scail\/commons\/AsyncSpec.html#refEq[T](value:T,excludeFields:String*):T", "kind" : "def"}, {"label" : "isA", "tail" : "(arg0: ClassTag[T]): T", "member" : "org.mockito.matchers.EqMatchers.isA", "link" : "scail\/commons\/AsyncSpec.html#isA[T](implicitevidence$1:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "same", "tail" : "(value: T): T", "member" : "org.mockito.matchers.EqMatchers.same", "link" : "scail\/commons\/AsyncSpec.html#same[T](value:T):T", "kind" : "def"}, {"label" : "anyLong", "tail" : "(): Long", "member" : "org.mockito.matchers.AnyMatchers.anyLong", "link" : "scail\/commons\/AsyncSpec.html#anyLong:Long", "kind" : "def"}, {"label" : "anyShort", "tail" : "(): Short", "member" : "org.mockito.matchers.AnyMatchers.anyShort", "link" : "scail\/commons\/AsyncSpec.html#anyShort:Short", "kind" : "def"}, {"label" : "anyFloat", "tail" : "(): Float", "member" : "org.mockito.matchers.AnyMatchers.anyFloat", "link" : "scail\/commons\/AsyncSpec.html#anyFloat:Float", "kind" : "def"}, {"label" : "anyInt", "tail" : "(): Int", "member" : "org.mockito.matchers.AnyMatchers.anyInt", "link" : "scail\/commons\/AsyncSpec.html#anyInt:Int", "kind" : "def"}, {"label" : "anyDouble", "tail" : "(): Double", "member" : "org.mockito.matchers.AnyMatchers.anyDouble", "link" : "scail\/commons\/AsyncSpec.html#anyDouble:Double", "kind" : "def"}, {"label" : "anyChar", "tail" : "(): Char", "member" : "org.mockito.matchers.AnyMatchers.anyChar", "link" : "scail\/commons\/AsyncSpec.html#anyChar:Char", "kind" : "def"}, {"label" : "anyBoolean", "tail" : "(): Boolean", "member" : "org.mockito.matchers.AnyMatchers.anyBoolean", "link" : "scail\/commons\/AsyncSpec.html#anyBoolean:Boolean", "kind" : "def"}, {"label" : "anyByte", "tail" : "(): Byte", "member" : "org.mockito.matchers.AnyMatchers.anyByte", "link" : "scail\/commons\/AsyncSpec.html#anyByte:Byte", "kind" : "def"}, {"label" : "anyMap", "tail" : "(): Map[K, V]", "member" : "org.mockito.matchers.AnyMatchers.anyMap", "link" : "scail\/commons\/AsyncSpec.html#anyMap[K,V]:Map[K,V]", "kind" : "def"}, {"label" : "anySet", "tail" : "(): Set[T]", "member" : "org.mockito.matchers.AnyMatchers.anySet", "link" : "scail\/commons\/AsyncSpec.html#anySet[T]:Set[T]", "kind" : "def"}, {"label" : "anyIterable", "tail" : "(): Iterable[T]", "member" : "org.mockito.matchers.AnyMatchers.anyIterable", "link" : "scail\/commons\/AsyncSpec.html#anyIterable[T]:Iterable[T]", "kind" : "def"}, {"label" : "anySeq", "tail" : "(): Seq[T]", "member" : "org.mockito.matchers.AnyMatchers.anySeq", "link" : "scail\/commons\/AsyncSpec.html#anySeq[T]:Seq[T]", "kind" : "def"}, {"label" : "anyList", "tail" : "(): List[T]", "member" : "org.mockito.matchers.AnyMatchers.anyList", "link" : "scail\/commons\/AsyncSpec.html#anyList[T]:List[T]", "kind" : "def"}, {"label" : "verification", "tail" : "(v: ⇒ Any): Verification", "member" : "org.mockito.IdiomaticMockito.verification", "link" : "scail\/commons\/AsyncSpec.html#verification(v:=>Any):IdiomaticMockito.this.Verification", "kind" : "def"}, {"label" : "Verification", "tail" : "", "member" : "org.mockito.IdiomaticMockito.Verification", "link" : "scail\/commons\/AsyncSpec.html#Verification=Unit", "kind" : "type"}, {"label" : "atMost", "tail" : "(t: Times): AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMost", "link" : "scail\/commons\/AsyncSpec.html#atMost(t:org.mockito.IdiomaticMockitoBase.Times):org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "def"}, {"label" : "atLeast", "tail" : "(t: Times): AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeast", "link" : "scail\/commons\/AsyncSpec.html#atLeast(t:org.mockito.IdiomaticMockitoBase.Times):org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "def"}, {"label" : "InOrder", "tail" : "(mocks: AnyRef*)(verifications: (VerifyInOrder) ⇒ Verification): Verification", "member" : "org.mockito.IdiomaticMockitoBase.InOrder", "link" : "scail\/commons\/AsyncSpec.html#InOrder(mocks:AnyRef*)(verifications:org.mockito.VerifyInOrder=>IdiomaticMockitoBase.this.Verification):IdiomaticMockitoBase.this.Verification", "kind" : "def"}, {"label" : "atMostTenTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostTenTimes", "link" : "scail\/commons\/AsyncSpec.html#atMostTenTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostNineTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostNineTimes", "link" : "scail\/commons\/AsyncSpec.html#atMostNineTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostEightTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostEightTimes", "link" : "scail\/commons\/AsyncSpec.html#atMostEightTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostSevenTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostSevenTimes", "link" : "scail\/commons\/AsyncSpec.html#atMostSevenTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostSixTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostSixTimes", "link" : "scail\/commons\/AsyncSpec.html#atMostSixTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostFiveTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostFiveTimes", "link" : "scail\/commons\/AsyncSpec.html#atMostFiveTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostFourTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostFourTimes", "link" : "scail\/commons\/AsyncSpec.html#atMostFourTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostThreeTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostThreeTimes", "link" : "scail\/commons\/AsyncSpec.html#atMostThreeTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostThrice", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostThrice", "link" : "scail\/commons\/AsyncSpec.html#atMostThrice:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostTwice", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostTwice", "link" : "scail\/commons\/AsyncSpec.html#atMostTwice:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostOnce", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostOnce", "link" : "scail\/commons\/AsyncSpec.html#atMostOnce:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atLeastTenTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastTenTimes", "link" : "scail\/commons\/AsyncSpec.html#atLeastTenTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastNineTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastNineTimes", "link" : "scail\/commons\/AsyncSpec.html#atLeastNineTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastEightTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastEightTimes", "link" : "scail\/commons\/AsyncSpec.html#atLeastEightTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastSevenTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastSevenTimes", "link" : "scail\/commons\/AsyncSpec.html#atLeastSevenTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastSixTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastSixTimes", "link" : "scail\/commons\/AsyncSpec.html#atLeastSixTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastFiveTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastFiveTimes", "link" : "scail\/commons\/AsyncSpec.html#atLeastFiveTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastFourTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastFourTimes", "link" : "scail\/commons\/AsyncSpec.html#atLeastFourTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastThreeTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastThreeTimes", "link" : "scail\/commons\/AsyncSpec.html#atLeastThreeTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastThrice", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastThrice", "link" : "scail\/commons\/AsyncSpec.html#atLeastThrice:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastTwice", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastTwice", "link" : "scail\/commons\/AsyncSpec.html#atLeastTwice:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastOnce", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastOnce", "link" : "scail\/commons\/AsyncSpec.html#atLeastOnce:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "tenTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.tenTimes", "link" : "scail\/commons\/AsyncSpec.html#tenTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "nineTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.nineTimes", "link" : "scail\/commons\/AsyncSpec.html#nineTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "eightTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.eightTimes", "link" : "scail\/commons\/AsyncSpec.html#eightTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "sevenTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.sevenTimes", "link" : "scail\/commons\/AsyncSpec.html#sevenTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "sixTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.sixTimes", "link" : "scail\/commons\/AsyncSpec.html#sixTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "fiveTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.fiveTimes", "link" : "scail\/commons\/AsyncSpec.html#fiveTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "fourTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.fourTimes", "link" : "scail\/commons\/AsyncSpec.html#fourTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "threeTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.threeTimes", "link" : "scail\/commons\/AsyncSpec.html#threeTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "thrice", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.thrice", "link" : "scail\/commons\/AsyncSpec.html#thrice:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "twice", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.twice", "link" : "scail\/commons\/AsyncSpec.html#twice:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "once", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.once", "link" : "scail\/commons\/AsyncSpec.html#once:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "onlyHere", "tail" : ": OnlyOn.type", "member" : "org.mockito.IdiomaticMockitoBase.onlyHere", "link" : "scail\/commons\/AsyncSpec.html#onlyHere:org.mockito.IdiomaticMockitoBase.OnlyOn.type", "kind" : "val"}, {"label" : "on", "tail" : ": On.type", "member" : "org.mockito.IdiomaticMockitoBase.on", "link" : "scail\/commons\/AsyncSpec.html#on:org.mockito.IdiomaticMockitoBase.On.type", "kind" : "val"}, {"label" : "realMethod", "tail" : ": RealMethod.type", "member" : "org.mockito.IdiomaticMockitoBase.realMethod", "link" : "scail\/commons\/AsyncSpec.html#realMethod:org.mockito.WhenMacro.RealMethod.type", "kind" : "val"}, {"label" : "ignoringStubs", "tail" : ": IgnoringStubs.type", "member" : "org.mockito.IdiomaticMockitoBase.ignoringStubs", "link" : "scail\/commons\/AsyncSpec.html#ignoringStubs:org.mockito.IdiomaticMockitoBase.IgnoringStubs.type", "kind" : "val"}, {"label" : "calledAgain", "tail" : ": CalledAgain.type", "member" : "org.mockito.IdiomaticMockitoBase.calledAgain", "link" : "scail\/commons\/AsyncSpec.html#calledAgain:org.mockito.IdiomaticMockitoBase.CalledAgain.type", "kind" : "val"}, {"label" : "theRealMethod", "tail" : ": RealMethod.type", "member" : "org.mockito.IdiomaticMockitoBase.theRealMethod", "link" : "scail\/commons\/AsyncSpec.html#theRealMethod:org.mockito.WhenMacro.RealMethod.type", "kind" : "val"}, {"label" : "answered", "tail" : ": Answered.type", "member" : "org.mockito.IdiomaticMockitoBase.answered", "link" : "scail\/commons\/AsyncSpec.html#answered:org.mockito.IdiomaticMockitoBase.Answered.type", "kind" : "val"}, {"label" : "returned", "tail" : ": Returned.type", "member" : "org.mockito.IdiomaticMockitoBase.returned", "link" : "scail\/commons\/AsyncSpec.html#returned:org.mockito.IdiomaticMockitoBase.Returned.type", "kind" : "val"}, {"label" : "thrown", "tail" : ": Thrown.type", "member" : "org.mockito.IdiomaticMockitoBase.thrown", "link" : "scail\/commons\/AsyncSpec.html#thrown:org.mockito.IdiomaticMockitoBase.Thrown.type", "kind" : "val"}, {"label" : "called", "tail" : ": Called.type", "member" : "org.mockito.IdiomaticMockitoBase.called", "link" : "scail\/commons\/AsyncSpec.html#called:org.mockito.Called.type", "kind" : "val"}, {"label" : "mockitoSerialisableEquality", "tail" : "(): Equality[T]", "member" : "org.mockito.ScalacticSerialisableHack.mockitoSerialisableEquality", "link" : "scail\/commons\/AsyncSpec.html#mockitoSerialisableEquality[T]:org.scalactic.Equality[T]", "kind" : "implicit def"}, {"label" : "spyLambda", "tail" : "(realObj: T)(arg0: ClassTag[T]): T", "member" : "org.mockito.MockitoEnhancer.spyLambda", "link" : "scail\/commons\/AsyncSpec.html#spyLambda[T<:AnyRef](realObj:T)(implicitevidence$38:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "ignoreStubs", "tail" : "(mocks: AnyRef*): Array[AnyRef]", "member" : "org.mockito.MockitoEnhancer.ignoreStubs", "link" : "scail\/commons\/AsyncSpec.html#ignoreStubs(mocks:AnyRef*):Array[AnyRef]", "kind" : "def"}, {"label" : "verifyNoMoreInteractions", "tail" : "(mocks: AnyRef*): Unit", "member" : "org.mockito.MockitoEnhancer.verifyNoMoreInteractions", "link" : "scail\/commons\/AsyncSpec.html#verifyNoMoreInteractions(mocks:AnyRef*):Unit", "kind" : "def"}, {"label" : "mockingDetails", "tail" : "(toInspect: AnyRef): MockingDetails", "member" : "org.mockito.MockitoEnhancer.mockingDetails", "link" : "scail\/commons\/AsyncSpec.html#mockingDetails(toInspect:AnyRef):org.mockito.MockingDetails", "kind" : "def"}, {"label" : "reset", "tail" : "(mocks: AnyRef*)(arg0: Prettifier): Unit", "member" : "org.mockito.MockitoEnhancer.reset", "link" : "scail\/commons\/AsyncSpec.html#reset(mocks:AnyRef*)(implicit$pt:org.scalactic.Prettifier):Unit", "kind" : "def"}, {"label" : "spy", "tail" : "(realObj: T, lenient: Boolean)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.spy", "link" : "scail\/commons\/AsyncSpec.html#spy[T<:AnyRef](realObj:T,lenient:Boolean)(implicitevidence$36:scala.reflect.ClassTag[T],implicitevidence$37:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(name: String)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], defaultAnswer: DefaultAnswer, arg3: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "scail\/commons\/AsyncSpec.html#mock[T<:AnyRef](name:String)(implicitevidence$34:scala.reflect.ClassTag[T],implicitevidence$35:reflect.runtime.universe.WeakTypeTag[T],implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer,implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(mockSettings: MockSettings)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "scail\/commons\/AsyncSpec.html#mock[T<:AnyRef](mockSettings:org.mockito.MockSettings)(implicitevidence$32:scala.reflect.ClassTag[T],implicitevidence$33:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(defaultAnswer: DefaultAnswer)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "scail\/commons\/AsyncSpec.html#mock[T<:AnyRef](defaultAnswer:org.mockito.stubbing.DefaultAnswer)(implicitevidence$30:scala.reflect.ClassTag[T],implicitevidence$31:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], defaultAnswer: DefaultAnswer, arg3: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "scail\/commons\/AsyncSpec.html#mock[T<:AnyRef](implicitevidence$28:scala.reflect.ClassTag[T],implicitevidence$29:reflect.runtime.universe.WeakTypeTag[T],implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer,implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "invocationOps", "tail" : ": (InvocationOnMock) ⇒ InvocationOnMockOps", "member" : "org.mockito.MockitoEnhancer.invocationOps", "link" : "scail\/commons\/AsyncSpec.html#invocationOps:org.mockito.invocation.InvocationOnMock=>org.mockito.ReflectionUtils.InvocationOnMockOps", "kind" : "implicit val"}, {"label" : "withSettings", "tail" : "(defaultAnswer: DefaultAnswer): MockSettings", "member" : "org.mockito.MockCreator.withSettings", "link" : "scail\/commons\/AsyncSpec.html#withSettings(implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer):org.mockito.MockSettings", "kind" : "def"}, {"label" : "mock", "tail" : "(defaultAnswer: Answer[_])(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockCreator.mock", "link" : "scail\/commons\/AsyncSpec.html#mock[T<:AnyRef](defaultAnswer:org.mockito.stubbing.Answer[_])(implicitevidence$3:scala.reflect.ClassTag[T],implicitevidence$4:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "convertTryToSuccessOrFailure", "tail" : "(theTry: Try[T])(pos: Position): SuccessOrFailure[T]", "member" : "org.scalatest.TryValues.convertTryToSuccessOrFailure", "link" : "scail\/commons\/AsyncSpec.html#convertTryToSuccessOrFailure[T](theTry:scala.util.Try[T])(implicitpos:org.scalactic.source.Position):TryValues.this.SuccessOrFailure[T]", "kind" : "implicit def"}, {"label" : "convertOptionToValuable", "tail" : "(opt: Option[T])(pos: Position): Valuable[T]", "member" : "org.scalatest.OptionValues.convertOptionToValuable", "link" : "scail\/commons\/AsyncSpec.html#convertOptionToValuable[T](opt:Option[T])(implicitpos:org.scalactic.source.Position):OptionValues.this.Valuable[T]", "kind" : "implicit def"}, {"label" : "convertRightProjectionToValuable", "tail" : "(rightProj: RightProjection[L, R])(pos: Position): RightValuable[L, R]", "member" : "org.scalatest.EitherValues.convertRightProjectionToValuable", "link" : "scail\/commons\/AsyncSpec.html#convertRightProjectionToValuable[L,R](rightProj:Either.RightProjection[L,R])(implicitpos:org.scalactic.source.Position):EitherValues.this.RightValuable[L,R]", "kind" : "implicit def"}, {"label" : "convertLeftProjectionToValuable", "tail" : "(leftProj: LeftProjection[L, R])(pos: Position): LeftValuable[L, R]", "member" : "org.scalatest.EitherValues.convertLeftProjectionToValuable", "link" : "scail\/commons\/AsyncSpec.html#convertLeftProjectionToValuable[L,R](leftProj:Either.LeftProjection[L,R])(implicitpos:org.scalactic.source.Position):EitherValues.this.LeftValuable[L,R]", "kind" : "implicit def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assume", "link" : "scail\/commons\/AsyncSpec.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assume", "link" : "scail\/commons\/AsyncSpec.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assert", "link" : "scail\/commons\/AsyncSpec.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assert", "link" : "scail\/commons\/AsyncSpec.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "diagrammedAssertionsHelper", "tail" : ": DiagrammedAssertionsHelper", "member" : "org.scalatest.DiagrammedAssertions.diagrammedAssertionsHelper", "link" : "scail\/commons\/AsyncSpec.html#diagrammedAssertionsHelper:DiagrammedAssertions.this.DiagrammedAssertionsHelper", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.AsyncFreeSpec.toString", "link" : "scail\/commons\/AsyncSpec.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.AsyncFreeSpecLike.testDataFor", "link" : "scail\/commons\/AsyncSpec.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.AsyncFreeSpecLike.styleName", "link" : "scail\/commons\/AsyncSpec.html#styleName:String", "kind" : "final val"}, {"label" : "behave", "tail" : ": BehaveWord", "member" : "org.scalatest.AsyncFreeSpecLike.behave", "link" : "scail\/commons\/AsyncSpec.html#behave:org.scalatest.words.BehaveWord", "kind" : "val"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.AsyncFreeSpecLike.run", "link" : "scail\/commons\/AsyncSpec.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.AsyncFreeSpecLike.testNames", "link" : "scail\/commons\/AsyncSpec.html#testNames:Set[String]", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.AsyncFreeSpecLike.runTests", "link" : "scail\/commons\/AsyncSpec.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.AsyncFreeSpecLike.runTest", "link" : "scail\/commons\/AsyncSpec.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.AsyncFreeSpecLike.tags", "link" : "scail\/commons\/AsyncSpec.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "convertToFreeSpecStringWrapper", "tail" : "(s: String)(pos: Position): FreeSpecStringWrapper", "member" : "org.scalatest.AsyncFreeSpecLike.convertToFreeSpecStringWrapper", "link" : "scail\/commons\/AsyncSpec.html#convertToFreeSpecStringWrapper(s:String)(implicitpos:org.scalactic.source.Position):AsyncFreeSpecLike.this.FreeSpecStringWrapper", "kind" : "implicit def"}, {"label" : "registerIgnoredAsyncTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Future[Assertion])(pos: Position): Unit", "member" : "org.scalatest.AsyncFreeSpecLike.registerIgnoredAsyncTest", "link" : "scail\/commons\/AsyncSpec.html#registerIgnoredAsyncTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>scala.concurrent.Future[org.scalatest.compatible.Assertion])(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerAsyncTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Future[Assertion])(pos: Position): Unit", "member" : "org.scalatest.AsyncFreeSpecLike.registerAsyncTest", "link" : "scail\/commons\/AsyncSpec.html#registerAsyncTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>scala.concurrent.Future[org.scalatest.compatible.Assertion])(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.AsyncFreeSpecLike.markup", "link" : "scail\/commons\/AsyncSpec.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.AsyncFreeSpecLike.alert", "link" : "scail\/commons\/AsyncSpec.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.AsyncFreeSpecLike.note", "link" : "scail\/commons\/AsyncSpec.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.AsyncFreeSpecLike.info", "link" : "scail\/commons\/AsyncSpec.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgAsyncTest): FutureOutcome", "member" : "org.scalatest.AsyncTestSuite.withFixture", "link" : "scail\/commons\/AsyncSpec.html#withFixture(test:AsyncTestSuite.this.NoArgAsyncTest):org.scalatest.FutureOutcome", "kind" : "def"}, {"label" : "parallelAsyncTestExecution", "tail" : "(): Boolean", "member" : "org.scalatest.AsyncTestSuite.parallelAsyncTestExecution", "link" : "scail\/commons\/AsyncSpec.html#parallelAsyncTestExecution:Boolean", "kind" : "def"}, {"label" : "convertAssertionToFutureAssertion", "tail" : "(assertion: Assertion): Future[Assertion]", "member" : "org.scalatest.AsyncTestSuite.convertAssertionToFutureAssertion", "link" : "scail\/commons\/AsyncSpec.html#convertAssertionToFutureAssertion(assertion:org.scalatest.compatible.Assertion):scala.concurrent.Future[org.scalatest.compatible.Assertion]", "kind" : "implicit def"}, {"label" : "executionContext", "tail" : "(): ExecutionContext", "member" : "org.scalatest.AsyncTestSuite.executionContext", "link" : "scail\/commons\/AsyncSpec.html#executionContext:scala.concurrent.ExecutionContext", "kind" : "implicit def"}, {"label" : "complete", "tail" : "(completeBlock: ⇒ T)(futuristic: Futuristic[T]): ResultOfCompleteInvocation[T]", "member" : "org.scalatest.CompleteLastly.complete", "link" : "scail\/commons\/AsyncSpec.html#complete[T](completeBlock:=>T)(implicitfuturistic:org.scalatest.enablers.Futuristic[T]):CompleteLastly.this.ResultOfCompleteInvocation[T]", "kind" : "def"}, {"label" : "recoverToSucceededIf", "tail" : "(future: Future[Any])(classTag: ClassTag[T], exCtx: ExecutionContext, pos: Position): Future[Assertion]", "member" : "org.scalatest.RecoverMethods.recoverToSucceededIf", "link" : "scail\/commons\/AsyncSpec.html#recoverToSucceededIf[T<:AnyRef](future:scala.concurrent.Future[Any])(implicitclassTag:scala.reflect.ClassTag[T],implicitexCtx:scala.concurrent.ExecutionContext,implicitpos:org.scalactic.source.Position):scala.concurrent.Future[org.scalatest.Assertion]", "kind" : "def"}, {"label" : "recoverToExceptionIf", "tail" : "(future: Future[Any])(classTag: ClassTag[T], exCtx: ExecutionContext, pos: Position): Future[T]", "member" : "org.scalatest.RecoverMethods.recoverToExceptionIf", "link" : "scail\/commons\/AsyncSpec.html#recoverToExceptionIf[T<:AnyRef](future:scala.concurrent.Future[Any])(implicitclassTag:scala.reflect.ClassTag[T],implicitexCtx:scala.concurrent.ExecutionContext,implicitpos:org.scalactic.source.Position):scala.concurrent.Future[T]", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "scail\/commons\/AsyncSpec.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "scail\/commons\/AsyncSpec.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "scail\/commons\/AsyncSpec.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "scail\/commons\/AsyncSpec.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "scail\/commons\/AsyncSpec.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "scail\/commons\/AsyncSpec.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "scail\/commons\/AsyncSpec.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "scail\/commons\/AsyncSpec.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "scail\/commons\/AsyncSpec.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "scail\/commons\/AsyncSpec.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "scail\/commons\/AsyncSpec.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "scail\/commons\/AsyncSpec.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "scail\/commons\/AsyncSpec.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "scail\/commons\/AsyncSpec.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "scail\/commons\/AsyncSpec.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "scail\/commons\/AsyncSpec.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "scail\/commons\/AsyncSpec.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "scail\/commons\/AsyncSpec.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "scail\/commons\/AsyncSpec.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "scail\/commons\/AsyncSpec.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "scail\/commons\/AsyncSpec.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "scail\/commons\/AsyncSpec.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "scail\/commons\/AsyncSpec.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "scail\/commons\/AsyncSpec.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "scail\/commons\/AsyncSpec.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "scail\/commons\/AsyncSpec.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "scail\/commons\/AsyncSpec.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "scail\/commons\/AsyncSpec.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "scail\/commons\/AsyncSpec.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "scail\/commons\/AsyncSpec.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "scail\/commons\/AsyncSpec.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "scail\/commons\/AsyncSpec.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "scail\/commons\/AsyncSpec.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "scail\/commons\/AsyncSpec.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "scail\/commons\/AsyncSpec.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "scail\/commons\/AsyncSpec.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "scail\/commons\/AsyncSpec.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "scail\/commons\/AsyncSpec.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "scail\/commons\/AsyncSpec.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "scail\/commons\/AsyncSpec.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "scail\/commons\/AsyncSpec.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "scail\/commons\/AsyncSpec.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "scail\/commons\/AsyncSpec.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "scail\/commons\/AsyncSpec.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "scail\/commons\/AsyncSpec.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "scail\/commons\/AsyncSpec.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "scail\/commons\/AsyncSpec.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/AsyncSpec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/AsyncSpec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/AsyncSpec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/AsyncSpec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/AsyncSpec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/AsyncSpec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/AsyncSpec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/AsyncSpec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/AsyncSpec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/AsyncSpec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/AsyncSpec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/AsyncSpec.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/AsyncSpec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/AsyncSpec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/AsyncSpec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/AsyncSpec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/AsyncSpec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/AsyncSpec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scail\/commons\/AsyncSpec.html", "kind" : "class"}, {"name" : "scail.commons.Constants", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/Constants.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/Constants.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Constants) ⇒ Boolean, msg: ⇒ Any): Constants", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/Constants.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Constants) ⇒ Boolean): Constants", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/Constants.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Constants", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/Constants.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Constants", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/Constants.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Constants, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/Constants.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Constants, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/Constants.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "Warts", "tail" : "", "member" : "scail.commons.Constants.Warts", "link" : "scail\/commons\/Constants.html#Warts", "kind" : "object"}, {"label" : "Goats", "tail" : "", "member" : "scail.commons.Constants.Goats", "link" : "scail\/commons\/Constants.html#Goats", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/Constants.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/Constants.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/Constants.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/Constants.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/Constants.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/Constants.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/Constants.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/Constants.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/Constants.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/Constants.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/Constants.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/Constants.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/Constants.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/Constants.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/Constants.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/Constants.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/Constants.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/Constants.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/Constants.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "scail\/commons\/Constants$.html", "members_object" : [{"label" : "Warts", "tail" : "", "member" : "scail.commons.Constants.Warts", "link" : "scail\/commons\/Constants.html#Warts", "kind" : "object"}, {"label" : "Goats", "tail" : "", "member" : "scail.commons.Constants.Goats", "link" : "scail\/commons\/Constants.html#Goats", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/Constants$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/Constants$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/Constants$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/Constants$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/Constants$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/Constants$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/Constants$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/Constants$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/Constants$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/Constants$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/Constants$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/Constants$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/Constants$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/Constants$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/Constants$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/Constants$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/Constants$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/Constants$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/Constants$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "scail\/commons\/Constants.html", "kind" : "object"}, {"name" : "scail.commons.Mocking", "members_trait" : [{"label" : "willBe", "tail" : "(thrown: Thrown.type): ThrownBy[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.ThrowSomethingOps.willBe", "link" : "scail\/commons\/Mocking.html#willBe(thrown:org.mockito.IdiomaticMockitoBase.Thrown.type):org.mockito.IdiomaticMockitoBase.ThrownBy[E]", "kind" : "def"}, {"label" : "willBe", "tail" : "(a: Answered.type): AnsweredBy[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps.willBe", "link" : "scail\/commons\/Mocking.html#willBe(a:org.mockito.IdiomaticMockitoBase.Answered.type):org.mockito.IdiomaticMockitoBase.AnsweredBy[R]", "kind" : "def"}, {"label" : "willBe", "tail" : "(r: Returned.type): ReturnedBy[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps.willBe", "link" : "scail\/commons\/Mocking.html#willBe(r:org.mockito.IdiomaticMockitoBase.Returned.type):org.mockito.IdiomaticMockitoBase.ReturnedBy[R]", "kind" : "def"}, {"label" : "wasCalled", "tail" : "(called: ScalaVerificationMode)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasCalled", "link" : "scail\/commons\/Mocking.html#wasCalled(called:org.mockito.ScalaVerificationMode)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "wasNever", "tail" : "(called: CalledAgain)(arg0: <:<[Mocking, AnyRef]): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasNever", "link" : "scail\/commons\/Mocking.html#wasNever(called:org.mockito.IdiomaticMockitoBase.CalledAgain)(implicit$ev:T<:<AnyRef):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "wasNever", "tail" : "(called: Called.type)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasNever", "link" : "scail\/commons\/Mocking.html#wasNever(called:org.mockito.Called.type)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "was", "tail" : "(called: Called.type)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.was", "link" : "scail\/commons\/Mocking.html#was(called:org.mockito.Called.type)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "isLenient", "tail" : "(): Unit", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.isLenient", "link" : "scail\/commons\/Mocking.html#isLenient():Unit", "kind" : "macro def"}, {"label" : "answers", "tail" : "(): AnswerActions[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.answers", "link" : "scail\/commons\/Mocking.html#answers:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "mustAnswer", "tail" : "(): AnswerActions[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustAnswer", "link" : "scail\/commons\/Mocking.html#mustAnswer:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "shouldAnswer", "tail" : "(): AnswerActions[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldAnswer", "link" : "scail\/commons\/Mocking.html#shouldAnswer:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "throws", "tail" : "(): ThrowActions[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.throws", "link" : "scail\/commons\/Mocking.html#throws:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "mustThrow", "tail" : "(): ThrowActions[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustThrow", "link" : "scail\/commons\/Mocking.html#mustThrow:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "shouldThrow", "tail" : "(): ThrowActions[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldThrow", "link" : "scail\/commons\/Mocking.html#shouldThrow:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "calls", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.calls", "link" : "scail\/commons\/Mocking.html#calls(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "mustCall", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustCall", "link" : "scail\/commons\/Mocking.html#mustCall(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "shouldCall", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldCall", "link" : "scail\/commons\/Mocking.html#shouldCall(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "returns", "tail" : "(): ReturnActions[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.returns", "link" : "scail\/commons\/Mocking.html#returns:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "mustReturn", "tail" : "(): ReturnActions[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustReturn", "link" : "scail\/commons\/Mocking.html#mustReturn:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "shouldReturn", "tail" : "(): ReturnActions[Mocking]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldReturn", "link" : "scail\/commons\/Mocking.html#shouldReturn:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/Mocking.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/Mocking.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Mocking) ⇒ Boolean, msg: ⇒ Any): Mocking", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/Mocking.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Mocking) ⇒ Boolean): Mocking", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/Mocking.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Mocking", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/Mocking.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Mocking", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/Mocking.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Mocking, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/Mocking.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Mocking, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/Mocking.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "scail\/commons\/Mocking.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "IntOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.IntOps", "link" : "scail\/commons\/Mocking.html#IntOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "ThrowSomethingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.ThrowSomethingOps", "link" : "scail\/commons\/Mocking.html#ThrowSomethingOps[E]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps10", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps10", "link" : "scail\/commons\/Mocking.html#DoSomethingOps10[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,P8<:<?>,P9<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps9", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps9", "link" : "scail\/commons\/Mocking.html#DoSomethingOps9[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,P8<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps8", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps8", "link" : "scail\/commons\/Mocking.html#DoSomethingOps8[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps7", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps7", "link" : "scail\/commons\/Mocking.html#DoSomethingOps7[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps6", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps6", "link" : "scail\/commons\/Mocking.html#DoSomethingOps6[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps5", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps5", "link" : "scail\/commons\/Mocking.html#DoSomethingOps5[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps4", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps4", "link" : "scail\/commons\/Mocking.html#DoSomethingOps4[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps3", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps3", "link" : "scail\/commons\/Mocking.html#DoSomethingOps3[P0<:<?>,P1<:<?>,P2<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps2", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps2", "link" : "scail\/commons\/Mocking.html#DoSomethingOps2[P0<:<?>,P1<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps1", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps1", "link" : "scail\/commons\/Mocking.html#DoSomethingOps1[P0<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps0", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps0", "link" : "scail\/commons\/Mocking.html#DoSomethingOps0[R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps", "link" : "scail\/commons\/Mocking.html#DoSomethingOps[R]extendsAnyRef", "kind" : "implicit class"}, {"label" : "VerifyingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps", "link" : "scail\/commons\/Mocking.html#VerifyingOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "StubbingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps", "link" : "scail\/commons\/Mocking.html#StubbingOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "mockReturnsSelf", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "scail.commons.Mocking.mockReturnsSelf", "link" : "scail\/commons\/Mocking.html#mockReturnsSelf[T<:AnyRef](implicitevidence$5:scala.reflect.ClassTag[T],implicitevidence$6:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "mockEmptyValues", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "scail.commons.Mocking.mockEmptyValues", "link" : "scail\/commons\/Mocking.html#mockEmptyValues[T<:AnyRef](implicitevidence$3:scala.reflect.ClassTag[T],implicitevidence$4:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "mockDeepStubs", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "scail.commons.Mocking.mockDeepStubs", "link" : "scail\/commons\/Mocking.html#mockDeepStubs[T<:AnyRef](implicitevidence$1:scala.reflect.ClassTag[T],implicitevidence$2:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "*", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.*", "link" : "scail\/commons\/Mocking.html#*[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "any", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.any", "link" : "scail\/commons\/Mocking.html#any[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "anyVal", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.anyVal", "link" : "scail\/commons\/Mocking.html#anyVal[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "n", "tail" : ": N", "member" : "org.mockito.matchers.NumericMatchers.n", "link" : "scail\/commons\/Mocking.html#n:org.mockito.matchers.N", "kind" : "val"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "scail\/commons\/Mocking.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "function0", "tail" : "(value: T): () ⇒ T", "member" : "org.mockito.matchers.FunctionMatchers.function0", "link" : "scail\/commons\/Mocking.html#function0[T](value:T):()=>T", "kind" : "def"}, {"label" : "isNotNull", "tail" : "(): T", "member" : "org.mockito.matchers.NullMatchers.isNotNull", "link" : "scail\/commons\/Mocking.html#isNotNull[T]:T", "kind" : "def"}, {"label" : "isNull", "tail" : "(): T", "member" : "org.mockito.matchers.NullMatchers.isNull", "link" : "scail\/commons\/Mocking.html#isNull[T]:T", "kind" : "def"}, {"label" : "endsWith", "tail" : "(suffix: String): String", "member" : "org.mockito.matchers.StringThatMatchers.endsWith", "link" : "scail\/commons\/Mocking.html#endsWith(suffix:String):String", "kind" : "def"}, {"label" : "contains", "tail" : "(substring: String): String", "member" : "org.mockito.matchers.StringThatMatchers.contains", "link" : "scail\/commons\/Mocking.html#contains(substring:String):String", "kind" : "def"}, {"label" : "startsWith", "tail" : "(prefix: String): String", "member" : "org.mockito.matchers.StringThatMatchers.startsWith", "link" : "scail\/commons\/Mocking.html#startsWith(prefix:String):String", "kind" : "def"}, {"label" : "matches", "tail" : "(regex: String): String", "member" : "org.mockito.matchers.StringThatMatchers.matches", "link" : "scail\/commons\/Mocking.html#matches(regex:String):String", "kind" : "def"}, {"label" : "argMatching", "tail" : "(pf: PartialFunction[Any, Unit]): T", "member" : "org.mockito.matchers.ThatMatchers.argMatching", "link" : "scail\/commons\/Mocking.html#argMatching[T](pf:PartialFunction[Any,Unit]):T", "kind" : "def"}, {"label" : "longThat", "tail" : "(matcher: ArgumentMatcher[Long]): Long", "member" : "org.mockito.matchers.ThatMatchers.longThat", "link" : "scail\/commons\/Mocking.html#longThat(matcher:org.mockito.ArgumentMatcher[Long]):Long", "kind" : "def"}, {"label" : "shortThat", "tail" : "(matcher: ArgumentMatcher[Short]): Short", "member" : "org.mockito.matchers.ThatMatchers.shortThat", "link" : "scail\/commons\/Mocking.html#shortThat(matcher:org.mockito.ArgumentMatcher[Short]):Short", "kind" : "def"}, {"label" : "floatThat", "tail" : "(matcher: ArgumentMatcher[Float]): Float", "member" : "org.mockito.matchers.ThatMatchers.floatThat", "link" : "scail\/commons\/Mocking.html#floatThat(matcher:org.mockito.ArgumentMatcher[Float]):Float", "kind" : "def"}, {"label" : "intThat", "tail" : "(matcher: ArgumentMatcher[Int]): Int", "member" : "org.mockito.matchers.ThatMatchers.intThat", "link" : "scail\/commons\/Mocking.html#intThat(matcher:org.mockito.ArgumentMatcher[Int]):Int", "kind" : "def"}, {"label" : "doubleThat", "tail" : "(matcher: ArgumentMatcher[Double]): Double", "member" : "org.mockito.matchers.ThatMatchers.doubleThat", "link" : "scail\/commons\/Mocking.html#doubleThat(matcher:org.mockito.ArgumentMatcher[Double]):Double", "kind" : "def"}, {"label" : "charThat", "tail" : "(matcher: ArgumentMatcher[Char]): Char", "member" : "org.mockito.matchers.ThatMatchers.charThat", "link" : "scail\/commons\/Mocking.html#charThat(matcher:org.mockito.ArgumentMatcher[Char]):Char", "kind" : "def"}, {"label" : "booleanThat", "tail" : "(matcher: ArgumentMatcher[Boolean]): Boolean", "member" : "org.mockito.matchers.ThatMatchers.booleanThat", "link" : "scail\/commons\/Mocking.html#booleanThat(matcher:org.mockito.ArgumentMatcher[Boolean]):Boolean", "kind" : "def"}, {"label" : "byteThat", "tail" : "(matcher: ArgumentMatcher[Byte]): Byte", "member" : "org.mockito.matchers.ThatMatchers.byteThat", "link" : "scail\/commons\/Mocking.html#byteThat(matcher:org.mockito.ArgumentMatcher[Byte]):Byte", "kind" : "def"}, {"label" : "argThat", "tail" : "(f: (T) ⇒ Boolean, desc: ⇒ String): T", "member" : "org.mockito.matchers.ThatMatchers.argThat", "link" : "scail\/commons\/Mocking.html#argThat[T](f:T=>Boolean,desc:=>String):T", "kind" : "def"}, {"label" : "argThat", "tail" : "(matcher: ArgumentMatcher[T]): T", "member" : "org.mockito.matchers.ThatMatchers.argThat", "link" : "scail\/commons\/Mocking.html#argThat[T](matcher:org.mockito.ArgumentMatcher[T]):T", "kind" : "def"}, {"label" : "eqToVal", "tail" : "(value: T)(arg0: Equality[T], arg1: ValueClassExtractor[T], arg2: Prettifier): T", "member" : "org.mockito.matchers.EqMatchers_VersionSpecific.eqToVal", "link" : "scail\/commons\/Mocking.html#eqToVal[T](value:T)(implicitevidence$3:org.scalactic.Equality[T],implicitevidence$4:org.mockito.internal.ValueClassExtractor[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "eqTo", "tail" : "(value: T)(arg0: Equality[T], arg1: ValueClassExtractor[T], arg2: Prettifier): T", "member" : "org.mockito.matchers.EqMatchers_VersionSpecific.eqTo", "link" : "scail\/commons\/Mocking.html#eqTo[T](value:T)(implicitevidence$1:org.scalactic.Equality[T],implicitevidence$2:org.mockito.internal.ValueClassExtractor[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "refEq", "tail" : "(value: T, excludeFields: String*): T", "member" : "org.mockito.matchers.EqMatchers.refEq", "link" : "scail\/commons\/Mocking.html#refEq[T](value:T,excludeFields:String*):T", "kind" : "def"}, {"label" : "isA", "tail" : "(arg0: ClassTag[T]): T", "member" : "org.mockito.matchers.EqMatchers.isA", "link" : "scail\/commons\/Mocking.html#isA[T](implicitevidence$1:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "same", "tail" : "(value: T): T", "member" : "org.mockito.matchers.EqMatchers.same", "link" : "scail\/commons\/Mocking.html#same[T](value:T):T", "kind" : "def"}, {"label" : "anyLong", "tail" : "(): Long", "member" : "org.mockito.matchers.AnyMatchers.anyLong", "link" : "scail\/commons\/Mocking.html#anyLong:Long", "kind" : "def"}, {"label" : "anyShort", "tail" : "(): Short", "member" : "org.mockito.matchers.AnyMatchers.anyShort", "link" : "scail\/commons\/Mocking.html#anyShort:Short", "kind" : "def"}, {"label" : "anyFloat", "tail" : "(): Float", "member" : "org.mockito.matchers.AnyMatchers.anyFloat", "link" : "scail\/commons\/Mocking.html#anyFloat:Float", "kind" : "def"}, {"label" : "anyInt", "tail" : "(): Int", "member" : "org.mockito.matchers.AnyMatchers.anyInt", "link" : "scail\/commons\/Mocking.html#anyInt:Int", "kind" : "def"}, {"label" : "anyDouble", "tail" : "(): Double", "member" : "org.mockito.matchers.AnyMatchers.anyDouble", "link" : "scail\/commons\/Mocking.html#anyDouble:Double", "kind" : "def"}, {"label" : "anyChar", "tail" : "(): Char", "member" : "org.mockito.matchers.AnyMatchers.anyChar", "link" : "scail\/commons\/Mocking.html#anyChar:Char", "kind" : "def"}, {"label" : "anyBoolean", "tail" : "(): Boolean", "member" : "org.mockito.matchers.AnyMatchers.anyBoolean", "link" : "scail\/commons\/Mocking.html#anyBoolean:Boolean", "kind" : "def"}, {"label" : "anyByte", "tail" : "(): Byte", "member" : "org.mockito.matchers.AnyMatchers.anyByte", "link" : "scail\/commons\/Mocking.html#anyByte:Byte", "kind" : "def"}, {"label" : "anyMap", "tail" : "(): Map[K, V]", "member" : "org.mockito.matchers.AnyMatchers.anyMap", "link" : "scail\/commons\/Mocking.html#anyMap[K,V]:Map[K,V]", "kind" : "def"}, {"label" : "anySet", "tail" : "(): Set[T]", "member" : "org.mockito.matchers.AnyMatchers.anySet", "link" : "scail\/commons\/Mocking.html#anySet[T]:Set[T]", "kind" : "def"}, {"label" : "anyIterable", "tail" : "(): Iterable[T]", "member" : "org.mockito.matchers.AnyMatchers.anyIterable", "link" : "scail\/commons\/Mocking.html#anyIterable[T]:Iterable[T]", "kind" : "def"}, {"label" : "anySeq", "tail" : "(): Seq[T]", "member" : "org.mockito.matchers.AnyMatchers.anySeq", "link" : "scail\/commons\/Mocking.html#anySeq[T]:Seq[T]", "kind" : "def"}, {"label" : "anyList", "tail" : "(): List[T]", "member" : "org.mockito.matchers.AnyMatchers.anyList", "link" : "scail\/commons\/Mocking.html#anyList[T]:List[T]", "kind" : "def"}, {"label" : "verification", "tail" : "(v: ⇒ Any): Verification", "member" : "org.mockito.IdiomaticMockito.verification", "link" : "scail\/commons\/Mocking.html#verification(v:=>Any):IdiomaticMockito.this.Verification", "kind" : "def"}, {"label" : "Verification", "tail" : "", "member" : "org.mockito.IdiomaticMockito.Verification", "link" : "scail\/commons\/Mocking.html#Verification=Unit", "kind" : "type"}, {"label" : "atMost", "tail" : "(t: Times): AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMost", "link" : "scail\/commons\/Mocking.html#atMost(t:org.mockito.IdiomaticMockitoBase.Times):org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "def"}, {"label" : "atLeast", "tail" : "(t: Times): AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeast", "link" : "scail\/commons\/Mocking.html#atLeast(t:org.mockito.IdiomaticMockitoBase.Times):org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "def"}, {"label" : "InOrder", "tail" : "(mocks: AnyRef*)(verifications: (VerifyInOrder) ⇒ Verification): Verification", "member" : "org.mockito.IdiomaticMockitoBase.InOrder", "link" : "scail\/commons\/Mocking.html#InOrder(mocks:AnyRef*)(verifications:org.mockito.VerifyInOrder=>IdiomaticMockitoBase.this.Verification):IdiomaticMockitoBase.this.Verification", "kind" : "def"}, {"label" : "atMostTenTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostTenTimes", "link" : "scail\/commons\/Mocking.html#atMostTenTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostNineTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostNineTimes", "link" : "scail\/commons\/Mocking.html#atMostNineTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostEightTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostEightTimes", "link" : "scail\/commons\/Mocking.html#atMostEightTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostSevenTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostSevenTimes", "link" : "scail\/commons\/Mocking.html#atMostSevenTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostSixTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostSixTimes", "link" : "scail\/commons\/Mocking.html#atMostSixTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostFiveTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostFiveTimes", "link" : "scail\/commons\/Mocking.html#atMostFiveTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostFourTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostFourTimes", "link" : "scail\/commons\/Mocking.html#atMostFourTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostThreeTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostThreeTimes", "link" : "scail\/commons\/Mocking.html#atMostThreeTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostThrice", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostThrice", "link" : "scail\/commons\/Mocking.html#atMostThrice:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostTwice", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostTwice", "link" : "scail\/commons\/Mocking.html#atMostTwice:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostOnce", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostOnce", "link" : "scail\/commons\/Mocking.html#atMostOnce:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atLeastTenTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastTenTimes", "link" : "scail\/commons\/Mocking.html#atLeastTenTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastNineTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastNineTimes", "link" : "scail\/commons\/Mocking.html#atLeastNineTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastEightTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastEightTimes", "link" : "scail\/commons\/Mocking.html#atLeastEightTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastSevenTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastSevenTimes", "link" : "scail\/commons\/Mocking.html#atLeastSevenTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastSixTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastSixTimes", "link" : "scail\/commons\/Mocking.html#atLeastSixTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastFiveTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastFiveTimes", "link" : "scail\/commons\/Mocking.html#atLeastFiveTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastFourTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastFourTimes", "link" : "scail\/commons\/Mocking.html#atLeastFourTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastThreeTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastThreeTimes", "link" : "scail\/commons\/Mocking.html#atLeastThreeTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastThrice", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastThrice", "link" : "scail\/commons\/Mocking.html#atLeastThrice:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastTwice", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastTwice", "link" : "scail\/commons\/Mocking.html#atLeastTwice:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastOnce", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastOnce", "link" : "scail\/commons\/Mocking.html#atLeastOnce:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "tenTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.tenTimes", "link" : "scail\/commons\/Mocking.html#tenTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "nineTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.nineTimes", "link" : "scail\/commons\/Mocking.html#nineTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "eightTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.eightTimes", "link" : "scail\/commons\/Mocking.html#eightTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "sevenTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.sevenTimes", "link" : "scail\/commons\/Mocking.html#sevenTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "sixTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.sixTimes", "link" : "scail\/commons\/Mocking.html#sixTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "fiveTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.fiveTimes", "link" : "scail\/commons\/Mocking.html#fiveTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "fourTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.fourTimes", "link" : "scail\/commons\/Mocking.html#fourTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "threeTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.threeTimes", "link" : "scail\/commons\/Mocking.html#threeTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "thrice", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.thrice", "link" : "scail\/commons\/Mocking.html#thrice:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "twice", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.twice", "link" : "scail\/commons\/Mocking.html#twice:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "once", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.once", "link" : "scail\/commons\/Mocking.html#once:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "onlyHere", "tail" : ": OnlyOn.type", "member" : "org.mockito.IdiomaticMockitoBase.onlyHere", "link" : "scail\/commons\/Mocking.html#onlyHere:org.mockito.IdiomaticMockitoBase.OnlyOn.type", "kind" : "val"}, {"label" : "on", "tail" : ": On.type", "member" : "org.mockito.IdiomaticMockitoBase.on", "link" : "scail\/commons\/Mocking.html#on:org.mockito.IdiomaticMockitoBase.On.type", "kind" : "val"}, {"label" : "realMethod", "tail" : ": RealMethod.type", "member" : "org.mockito.IdiomaticMockitoBase.realMethod", "link" : "scail\/commons\/Mocking.html#realMethod:org.mockito.WhenMacro.RealMethod.type", "kind" : "val"}, {"label" : "ignoringStubs", "tail" : ": IgnoringStubs.type", "member" : "org.mockito.IdiomaticMockitoBase.ignoringStubs", "link" : "scail\/commons\/Mocking.html#ignoringStubs:org.mockito.IdiomaticMockitoBase.IgnoringStubs.type", "kind" : "val"}, {"label" : "calledAgain", "tail" : ": CalledAgain.type", "member" : "org.mockito.IdiomaticMockitoBase.calledAgain", "link" : "scail\/commons\/Mocking.html#calledAgain:org.mockito.IdiomaticMockitoBase.CalledAgain.type", "kind" : "val"}, {"label" : "theRealMethod", "tail" : ": RealMethod.type", "member" : "org.mockito.IdiomaticMockitoBase.theRealMethod", "link" : "scail\/commons\/Mocking.html#theRealMethod:org.mockito.WhenMacro.RealMethod.type", "kind" : "val"}, {"label" : "answered", "tail" : ": Answered.type", "member" : "org.mockito.IdiomaticMockitoBase.answered", "link" : "scail\/commons\/Mocking.html#answered:org.mockito.IdiomaticMockitoBase.Answered.type", "kind" : "val"}, {"label" : "returned", "tail" : ": Returned.type", "member" : "org.mockito.IdiomaticMockitoBase.returned", "link" : "scail\/commons\/Mocking.html#returned:org.mockito.IdiomaticMockitoBase.Returned.type", "kind" : "val"}, {"label" : "thrown", "tail" : ": Thrown.type", "member" : "org.mockito.IdiomaticMockitoBase.thrown", "link" : "scail\/commons\/Mocking.html#thrown:org.mockito.IdiomaticMockitoBase.Thrown.type", "kind" : "val"}, {"label" : "called", "tail" : ": Called.type", "member" : "org.mockito.IdiomaticMockitoBase.called", "link" : "scail\/commons\/Mocking.html#called:org.mockito.Called.type", "kind" : "val"}, {"label" : "mockitoSerialisableEquality", "tail" : "(): Equality[T]", "member" : "org.mockito.ScalacticSerialisableHack.mockitoSerialisableEquality", "link" : "scail\/commons\/Mocking.html#mockitoSerialisableEquality[T]:org.scalactic.Equality[T]", "kind" : "implicit def"}, {"label" : "spyLambda", "tail" : "(realObj: T)(arg0: ClassTag[T]): T", "member" : "org.mockito.MockitoEnhancer.spyLambda", "link" : "scail\/commons\/Mocking.html#spyLambda[T<:AnyRef](realObj:T)(implicitevidence$38:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "ignoreStubs", "tail" : "(mocks: AnyRef*): Array[AnyRef]", "member" : "org.mockito.MockitoEnhancer.ignoreStubs", "link" : "scail\/commons\/Mocking.html#ignoreStubs(mocks:AnyRef*):Array[AnyRef]", "kind" : "def"}, {"label" : "verifyNoMoreInteractions", "tail" : "(mocks: AnyRef*): Unit", "member" : "org.mockito.MockitoEnhancer.verifyNoMoreInteractions", "link" : "scail\/commons\/Mocking.html#verifyNoMoreInteractions(mocks:AnyRef*):Unit", "kind" : "def"}, {"label" : "mockingDetails", "tail" : "(toInspect: AnyRef): MockingDetails", "member" : "org.mockito.MockitoEnhancer.mockingDetails", "link" : "scail\/commons\/Mocking.html#mockingDetails(toInspect:AnyRef):org.mockito.MockingDetails", "kind" : "def"}, {"label" : "reset", "tail" : "(mocks: AnyRef*)(arg0: Prettifier): Unit", "member" : "org.mockito.MockitoEnhancer.reset", "link" : "scail\/commons\/Mocking.html#reset(mocks:AnyRef*)(implicit$pt:org.scalactic.Prettifier):Unit", "kind" : "def"}, {"label" : "spy", "tail" : "(realObj: T, lenient: Boolean)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.spy", "link" : "scail\/commons\/Mocking.html#spy[T<:AnyRef](realObj:T,lenient:Boolean)(implicitevidence$36:scala.reflect.ClassTag[T],implicitevidence$37:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(name: String)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], defaultAnswer: DefaultAnswer, arg3: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "scail\/commons\/Mocking.html#mock[T<:AnyRef](name:String)(implicitevidence$34:scala.reflect.ClassTag[T],implicitevidence$35:reflect.runtime.universe.WeakTypeTag[T],implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer,implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(mockSettings: MockSettings)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "scail\/commons\/Mocking.html#mock[T<:AnyRef](mockSettings:org.mockito.MockSettings)(implicitevidence$32:scala.reflect.ClassTag[T],implicitevidence$33:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(defaultAnswer: DefaultAnswer)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "scail\/commons\/Mocking.html#mock[T<:AnyRef](defaultAnswer:org.mockito.stubbing.DefaultAnswer)(implicitevidence$30:scala.reflect.ClassTag[T],implicitevidence$31:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], defaultAnswer: DefaultAnswer, arg3: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "scail\/commons\/Mocking.html#mock[T<:AnyRef](implicitevidence$28:scala.reflect.ClassTag[T],implicitevidence$29:reflect.runtime.universe.WeakTypeTag[T],implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer,implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "invocationOps", "tail" : ": (InvocationOnMock) ⇒ InvocationOnMockOps", "member" : "org.mockito.MockitoEnhancer.invocationOps", "link" : "scail\/commons\/Mocking.html#invocationOps:org.mockito.invocation.InvocationOnMock=>org.mockito.ReflectionUtils.InvocationOnMockOps", "kind" : "implicit val"}, {"label" : "withSettings", "tail" : "(defaultAnswer: DefaultAnswer): MockSettings", "member" : "org.mockito.MockCreator.withSettings", "link" : "scail\/commons\/Mocking.html#withSettings(implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer):org.mockito.MockSettings", "kind" : "def"}, {"label" : "mock", "tail" : "(defaultAnswer: Answer[_])(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockCreator.mock", "link" : "scail\/commons\/Mocking.html#mock[T<:AnyRef](defaultAnswer:org.mockito.stubbing.Answer[_])(implicitevidence$3:scala.reflect.ClassTag[T],implicitevidence$4:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/Mocking.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/Mocking.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/Mocking.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/Mocking.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/Mocking.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/Mocking.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/Mocking.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/Mocking.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/Mocking.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/Mocking.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/Mocking.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/Mocking.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/Mocking.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/Mocking.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/Mocking.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/Mocking.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/Mocking.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/Mocking.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/Mocking.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Base trait for mocking.", "object" : "scail\/commons\/Mocking$.html", "members_object" : [{"label" : "ReturnsSelf", "tail" : ": DefaultAnswer", "member" : "scail.commons.Mocking.ReturnsSelf", "link" : "scail\/commons\/Mocking$.html#ReturnsSelf:org.mockito.stubbing.DefaultAnswer", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/Mocking$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/Mocking$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/Mocking$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/Mocking$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/Mocking$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/Mocking$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/Mocking$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/Mocking$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/Mocking$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/Mocking$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/Mocking$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/Mocking$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/Mocking$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/Mocking$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/Mocking$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/Mocking$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/Mocking$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/Mocking$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/Mocking$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "scail\/commons\/Mocking.html", "kind" : "trait"}, {"name" : "scail.commons.Spec", "shortDescription" : "Base class for general tests.", "members_class" : [{"label" : "willBe", "tail" : "(thrown: Thrown.type): ThrownBy[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.ThrowSomethingOps.willBe", "link" : "scail\/commons\/Spec.html#willBe(thrown:org.mockito.IdiomaticMockitoBase.Thrown.type):org.mockito.IdiomaticMockitoBase.ThrownBy[E]", "kind" : "def"}, {"label" : "willBe", "tail" : "(a: Answered.type): AnsweredBy[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps.willBe", "link" : "scail\/commons\/Spec.html#willBe(a:org.mockito.IdiomaticMockitoBase.Answered.type):org.mockito.IdiomaticMockitoBase.AnsweredBy[R]", "kind" : "def"}, {"label" : "willBe", "tail" : "(r: Returned.type): ReturnedBy[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps.willBe", "link" : "scail\/commons\/Spec.html#willBe(r:org.mockito.IdiomaticMockitoBase.Returned.type):org.mockito.IdiomaticMockitoBase.ReturnedBy[R]", "kind" : "def"}, {"label" : "wasCalled", "tail" : "(called: ScalaVerificationMode)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasCalled", "link" : "scail\/commons\/Spec.html#wasCalled(called:org.mockito.ScalaVerificationMode)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "wasNever", "tail" : "(called: CalledAgain)(arg0: <:<[Spec, AnyRef]): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasNever", "link" : "scail\/commons\/Spec.html#wasNever(called:org.mockito.IdiomaticMockitoBase.CalledAgain)(implicit$ev:T<:<AnyRef):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "wasNever", "tail" : "(called: Called.type)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.wasNever", "link" : "scail\/commons\/Spec.html#wasNever(called:org.mockito.Called.type)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "was", "tail" : "(called: Called.type)(order: VerifyOrder): org.mockito.IdiomaticMockito.Verification", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps.was", "link" : "scail\/commons\/Spec.html#was(called:org.mockito.Called.type)(implicitorder:org.mockito.VerifyOrder):IdiomaticMockitoBase.this.Verification", "kind" : "macro def"}, {"label" : "isLenient", "tail" : "(): Unit", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.isLenient", "link" : "scail\/commons\/Spec.html#isLenient():Unit", "kind" : "macro def"}, {"label" : "answers", "tail" : "(): AnswerActions[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.answers", "link" : "scail\/commons\/Spec.html#answers:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "mustAnswer", "tail" : "(): AnswerActions[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustAnswer", "link" : "scail\/commons\/Spec.html#mustAnswer:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "shouldAnswer", "tail" : "(): AnswerActions[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldAnswer", "link" : "scail\/commons\/Spec.html#shouldAnswer:org.mockito.WhenMacro.AnswerActions[T]", "kind" : "macro def"}, {"label" : "throws", "tail" : "(): ThrowActions[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.throws", "link" : "scail\/commons\/Spec.html#throws:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "mustThrow", "tail" : "(): ThrowActions[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustThrow", "link" : "scail\/commons\/Spec.html#mustThrow:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "shouldThrow", "tail" : "(): ThrowActions[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldThrow", "link" : "scail\/commons\/Spec.html#shouldThrow:org.mockito.IdiomaticMockitoBase.ThrowActions[T]", "kind" : "macro def"}, {"label" : "calls", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.calls", "link" : "scail\/commons\/Spec.html#calls(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "mustCall", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustCall", "link" : "scail\/commons\/Spec.html#mustCall(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "shouldCall", "tail" : "(crm: RealMethod.type): ScalaOngoingStubbing[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldCall", "link" : "scail\/commons\/Spec.html#shouldCall(crm:org.mockito.WhenMacro.RealMethod.type):org.mockito.stubbing.ScalaOngoingStubbing[T]", "kind" : "macro def"}, {"label" : "returns", "tail" : "(): ReturnActions[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.returns", "link" : "scail\/commons\/Spec.html#returns:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "mustReturn", "tail" : "(): ReturnActions[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.mustReturn", "link" : "scail\/commons\/Spec.html#mustReturn:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "shouldReturn", "tail" : "(): ReturnActions[Spec]", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps.shouldReturn", "link" : "scail\/commons\/Spec.html#shouldReturn:org.mockito.IdiomaticMockitoBase.ReturnActions[T]", "kind" : "macro def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/Spec.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/Spec.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Spec) ⇒ Boolean, msg: ⇒ Any): Spec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/Spec.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Spec) ⇒ Boolean): Spec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/Spec.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Spec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/Spec.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Spec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/Spec.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Spec, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/Spec.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Spec, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/Spec.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "scail\/commons\/Spec.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "IntOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.IntOps", "link" : "scail\/commons\/Spec.html#IntOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "ThrowSomethingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.ThrowSomethingOps", "link" : "scail\/commons\/Spec.html#ThrowSomethingOps[E]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps10", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps10", "link" : "scail\/commons\/Spec.html#DoSomethingOps10[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,P8<:<?>,P9<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps9", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps9", "link" : "scail\/commons\/Spec.html#DoSomethingOps9[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,P8<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps8", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps8", "link" : "scail\/commons\/Spec.html#DoSomethingOps8[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,P7<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps7", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps7", "link" : "scail\/commons\/Spec.html#DoSomethingOps7[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,P6<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps6", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps6", "link" : "scail\/commons\/Spec.html#DoSomethingOps6[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,P5<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps5", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps5", "link" : "scail\/commons\/Spec.html#DoSomethingOps5[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,P4<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps4", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps4", "link" : "scail\/commons\/Spec.html#DoSomethingOps4[P0<:<?>,P1<:<?>,P2<:<?>,P3<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps3", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps3", "link" : "scail\/commons\/Spec.html#DoSomethingOps3[P0<:<?>,P1<:<?>,P2<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps2", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps2", "link" : "scail\/commons\/Spec.html#DoSomethingOps2[P0<:<?>,P1<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps1", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps1", "link" : "scail\/commons\/Spec.html#DoSomethingOps1[P0<:<?>,R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps0", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps0", "link" : "scail\/commons\/Spec.html#DoSomethingOps0[R<:<?>]extendsAnyRef", "kind" : "implicit class"}, {"label" : "DoSomethingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.DoSomethingOps", "link" : "scail\/commons\/Spec.html#DoSomethingOps[R]extendsAnyRef", "kind" : "implicit class"}, {"label" : "VerifyingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.VerifyingOps", "link" : "scail\/commons\/Spec.html#VerifyingOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "StubbingOps", "tail" : "", "member" : "org.mockito.IdiomaticMockitoBase.StubbingOps", "link" : "scail\/commons\/Spec.html#StubbingOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "SuccessOrFailure", "tail" : "", "member" : "org.scalatest.TryValues.SuccessOrFailure", "link" : "scail\/commons\/Spec.html#SuccessOrFailure[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Valuable", "tail" : "", "member" : "org.scalatest.OptionValues.Valuable", "link" : "scail\/commons\/Spec.html#Valuable[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "RightValuable", "tail" : "", "member" : "org.scalatest.EitherValues.RightValuable", "link" : "scail\/commons\/Spec.html#RightValuable[L<:<?>,R<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "LeftValuable", "tail" : "", "member" : "org.scalatest.EitherValues.LeftValuable", "link" : "scail\/commons\/Spec.html#LeftValuable[L<:<?>,R<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "DiagrammedAssertionsHelper", "tail" : "", "member" : "org.scalatest.DiagrammedAssertions.DiagrammedAssertionsHelper", "link" : "scail\/commons\/Spec.html#DiagrammedAssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "FreeSpecStringWrapper", "tail" : "", "member" : "org.scalatest.FreeSpecLike.FreeSpecStringWrapper", "link" : "scail\/commons\/Spec.html#FreeSpecStringWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfTaggedAsInvocationOnString", "tail" : "", "member" : "org.scalatest.FreeSpecLike.ResultOfTaggedAsInvocationOnString", "link" : "scail\/commons\/Spec.html#ResultOfTaggedAsInvocationOnStringextendsAnyRef", "kind" : "final class"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "scail\/commons\/Spec.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "scail\/commons\/Spec.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "scail\/commons\/Spec.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "scail\/commons\/Spec.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"member" : "scail.commons.Spec#<init>", "error" : "unsupported entity"}, {"label" : "mockReturnsSelf", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "scail.commons.Mocking.mockReturnsSelf", "link" : "scail\/commons\/Spec.html#mockReturnsSelf[T<:AnyRef](implicitevidence$5:scala.reflect.ClassTag[T],implicitevidence$6:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "mockEmptyValues", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "scail.commons.Mocking.mockEmptyValues", "link" : "scail\/commons\/Spec.html#mockEmptyValues[T<:AnyRef](implicitevidence$3:scala.reflect.ClassTag[T],implicitevidence$4:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "mockDeepStubs", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T]): T", "member" : "scail.commons.Mocking.mockDeepStubs", "link" : "scail\/commons\/Spec.html#mockDeepStubs[T<:AnyRef](implicitevidence$1:scala.reflect.ClassTag[T],implicitevidence$2:reflect.runtime.universe.WeakTypeTag[T]):T", "kind" : "def"}, {"label" : "*", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.*", "link" : "scail\/commons\/Spec.html#*[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "any", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.any", "link" : "scail\/commons\/Spec.html#any[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "anyVal", "tail" : "(arg0: AnyMatcher[T]): T", "member" : "org.mockito.matchers.MacroBasedMatchers.anyVal", "link" : "scail\/commons\/Spec.html#anyVal[T](implicit$m:org.mockito.matchers.AnyMatcher[T]):T", "kind" : "def"}, {"label" : "n", "tail" : ": N", "member" : "org.mockito.matchers.NumericMatchers.n", "link" : "scail\/commons\/Spec.html#n:org.mockito.matchers.N", "kind" : "val"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "scail\/commons\/Spec.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "function0", "tail" : "(value: T): () ⇒ T", "member" : "org.mockito.matchers.FunctionMatchers.function0", "link" : "scail\/commons\/Spec.html#function0[T](value:T):()=>T", "kind" : "def"}, {"label" : "isNotNull", "tail" : "(): T", "member" : "org.mockito.matchers.NullMatchers.isNotNull", "link" : "scail\/commons\/Spec.html#isNotNull[T]:T", "kind" : "def"}, {"label" : "isNull", "tail" : "(): T", "member" : "org.mockito.matchers.NullMatchers.isNull", "link" : "scail\/commons\/Spec.html#isNull[T]:T", "kind" : "def"}, {"label" : "endsWith", "tail" : "(suffix: String): String", "member" : "org.mockito.matchers.StringThatMatchers.endsWith", "link" : "scail\/commons\/Spec.html#endsWith(suffix:String):String", "kind" : "def"}, {"label" : "contains", "tail" : "(substring: String): String", "member" : "org.mockito.matchers.StringThatMatchers.contains", "link" : "scail\/commons\/Spec.html#contains(substring:String):String", "kind" : "def"}, {"label" : "startsWith", "tail" : "(prefix: String): String", "member" : "org.mockito.matchers.StringThatMatchers.startsWith", "link" : "scail\/commons\/Spec.html#startsWith(prefix:String):String", "kind" : "def"}, {"label" : "matches", "tail" : "(regex: String): String", "member" : "org.mockito.matchers.StringThatMatchers.matches", "link" : "scail\/commons\/Spec.html#matches(regex:String):String", "kind" : "def"}, {"label" : "argMatching", "tail" : "(pf: PartialFunction[Any, Unit]): T", "member" : "org.mockito.matchers.ThatMatchers.argMatching", "link" : "scail\/commons\/Spec.html#argMatching[T](pf:PartialFunction[Any,Unit]):T", "kind" : "def"}, {"label" : "longThat", "tail" : "(matcher: ArgumentMatcher[Long]): Long", "member" : "org.mockito.matchers.ThatMatchers.longThat", "link" : "scail\/commons\/Spec.html#longThat(matcher:org.mockito.ArgumentMatcher[Long]):Long", "kind" : "def"}, {"label" : "shortThat", "tail" : "(matcher: ArgumentMatcher[Short]): Short", "member" : "org.mockito.matchers.ThatMatchers.shortThat", "link" : "scail\/commons\/Spec.html#shortThat(matcher:org.mockito.ArgumentMatcher[Short]):Short", "kind" : "def"}, {"label" : "floatThat", "tail" : "(matcher: ArgumentMatcher[Float]): Float", "member" : "org.mockito.matchers.ThatMatchers.floatThat", "link" : "scail\/commons\/Spec.html#floatThat(matcher:org.mockito.ArgumentMatcher[Float]):Float", "kind" : "def"}, {"label" : "intThat", "tail" : "(matcher: ArgumentMatcher[Int]): Int", "member" : "org.mockito.matchers.ThatMatchers.intThat", "link" : "scail\/commons\/Spec.html#intThat(matcher:org.mockito.ArgumentMatcher[Int]):Int", "kind" : "def"}, {"label" : "doubleThat", "tail" : "(matcher: ArgumentMatcher[Double]): Double", "member" : "org.mockito.matchers.ThatMatchers.doubleThat", "link" : "scail\/commons\/Spec.html#doubleThat(matcher:org.mockito.ArgumentMatcher[Double]):Double", "kind" : "def"}, {"label" : "charThat", "tail" : "(matcher: ArgumentMatcher[Char]): Char", "member" : "org.mockito.matchers.ThatMatchers.charThat", "link" : "scail\/commons\/Spec.html#charThat(matcher:org.mockito.ArgumentMatcher[Char]):Char", "kind" : "def"}, {"label" : "booleanThat", "tail" : "(matcher: ArgumentMatcher[Boolean]): Boolean", "member" : "org.mockito.matchers.ThatMatchers.booleanThat", "link" : "scail\/commons\/Spec.html#booleanThat(matcher:org.mockito.ArgumentMatcher[Boolean]):Boolean", "kind" : "def"}, {"label" : "byteThat", "tail" : "(matcher: ArgumentMatcher[Byte]): Byte", "member" : "org.mockito.matchers.ThatMatchers.byteThat", "link" : "scail\/commons\/Spec.html#byteThat(matcher:org.mockito.ArgumentMatcher[Byte]):Byte", "kind" : "def"}, {"label" : "argThat", "tail" : "(f: (T) ⇒ Boolean, desc: ⇒ String): T", "member" : "org.mockito.matchers.ThatMatchers.argThat", "link" : "scail\/commons\/Spec.html#argThat[T](f:T=>Boolean,desc:=>String):T", "kind" : "def"}, {"label" : "argThat", "tail" : "(matcher: ArgumentMatcher[T]): T", "member" : "org.mockito.matchers.ThatMatchers.argThat", "link" : "scail\/commons\/Spec.html#argThat[T](matcher:org.mockito.ArgumentMatcher[T]):T", "kind" : "def"}, {"label" : "eqToVal", "tail" : "(value: T)(arg0: Equality[T], arg1: ValueClassExtractor[T], arg2: Prettifier): T", "member" : "org.mockito.matchers.EqMatchers_VersionSpecific.eqToVal", "link" : "scail\/commons\/Spec.html#eqToVal[T](value:T)(implicitevidence$3:org.scalactic.Equality[T],implicitevidence$4:org.mockito.internal.ValueClassExtractor[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "eqTo", "tail" : "(value: T)(arg0: Equality[T], arg1: ValueClassExtractor[T], arg2: Prettifier): T", "member" : "org.mockito.matchers.EqMatchers_VersionSpecific.eqTo", "link" : "scail\/commons\/Spec.html#eqTo[T](value:T)(implicitevidence$1:org.scalactic.Equality[T],implicitevidence$2:org.mockito.internal.ValueClassExtractor[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "refEq", "tail" : "(value: T, excludeFields: String*): T", "member" : "org.mockito.matchers.EqMatchers.refEq", "link" : "scail\/commons\/Spec.html#refEq[T](value:T,excludeFields:String*):T", "kind" : "def"}, {"label" : "isA", "tail" : "(arg0: ClassTag[T]): T", "member" : "org.mockito.matchers.EqMatchers.isA", "link" : "scail\/commons\/Spec.html#isA[T](implicitevidence$1:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "same", "tail" : "(value: T): T", "member" : "org.mockito.matchers.EqMatchers.same", "link" : "scail\/commons\/Spec.html#same[T](value:T):T", "kind" : "def"}, {"label" : "anyLong", "tail" : "(): Long", "member" : "org.mockito.matchers.AnyMatchers.anyLong", "link" : "scail\/commons\/Spec.html#anyLong:Long", "kind" : "def"}, {"label" : "anyShort", "tail" : "(): Short", "member" : "org.mockito.matchers.AnyMatchers.anyShort", "link" : "scail\/commons\/Spec.html#anyShort:Short", "kind" : "def"}, {"label" : "anyFloat", "tail" : "(): Float", "member" : "org.mockito.matchers.AnyMatchers.anyFloat", "link" : "scail\/commons\/Spec.html#anyFloat:Float", "kind" : "def"}, {"label" : "anyInt", "tail" : "(): Int", "member" : "org.mockito.matchers.AnyMatchers.anyInt", "link" : "scail\/commons\/Spec.html#anyInt:Int", "kind" : "def"}, {"label" : "anyDouble", "tail" : "(): Double", "member" : "org.mockito.matchers.AnyMatchers.anyDouble", "link" : "scail\/commons\/Spec.html#anyDouble:Double", "kind" : "def"}, {"label" : "anyChar", "tail" : "(): Char", "member" : "org.mockito.matchers.AnyMatchers.anyChar", "link" : "scail\/commons\/Spec.html#anyChar:Char", "kind" : "def"}, {"label" : "anyBoolean", "tail" : "(): Boolean", "member" : "org.mockito.matchers.AnyMatchers.anyBoolean", "link" : "scail\/commons\/Spec.html#anyBoolean:Boolean", "kind" : "def"}, {"label" : "anyByte", "tail" : "(): Byte", "member" : "org.mockito.matchers.AnyMatchers.anyByte", "link" : "scail\/commons\/Spec.html#anyByte:Byte", "kind" : "def"}, {"label" : "anyMap", "tail" : "(): Map[K, V]", "member" : "org.mockito.matchers.AnyMatchers.anyMap", "link" : "scail\/commons\/Spec.html#anyMap[K,V]:Map[K,V]", "kind" : "def"}, {"label" : "anySet", "tail" : "(): Set[T]", "member" : "org.mockito.matchers.AnyMatchers.anySet", "link" : "scail\/commons\/Spec.html#anySet[T]:Set[T]", "kind" : "def"}, {"label" : "anyIterable", "tail" : "(): Iterable[T]", "member" : "org.mockito.matchers.AnyMatchers.anyIterable", "link" : "scail\/commons\/Spec.html#anyIterable[T]:Iterable[T]", "kind" : "def"}, {"label" : "anySeq", "tail" : "(): Seq[T]", "member" : "org.mockito.matchers.AnyMatchers.anySeq", "link" : "scail\/commons\/Spec.html#anySeq[T]:Seq[T]", "kind" : "def"}, {"label" : "anyList", "tail" : "(): List[T]", "member" : "org.mockito.matchers.AnyMatchers.anyList", "link" : "scail\/commons\/Spec.html#anyList[T]:List[T]", "kind" : "def"}, {"label" : "verification", "tail" : "(v: ⇒ Any): Verification", "member" : "org.mockito.IdiomaticMockito.verification", "link" : "scail\/commons\/Spec.html#verification(v:=>Any):IdiomaticMockito.this.Verification", "kind" : "def"}, {"label" : "Verification", "tail" : "", "member" : "org.mockito.IdiomaticMockito.Verification", "link" : "scail\/commons\/Spec.html#Verification=Unit", "kind" : "type"}, {"label" : "atMost", "tail" : "(t: Times): AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMost", "link" : "scail\/commons\/Spec.html#atMost(t:org.mockito.IdiomaticMockitoBase.Times):org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "def"}, {"label" : "atLeast", "tail" : "(t: Times): AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeast", "link" : "scail\/commons\/Spec.html#atLeast(t:org.mockito.IdiomaticMockitoBase.Times):org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "def"}, {"label" : "InOrder", "tail" : "(mocks: AnyRef*)(verifications: (VerifyInOrder) ⇒ Verification): Verification", "member" : "org.mockito.IdiomaticMockitoBase.InOrder", "link" : "scail\/commons\/Spec.html#InOrder(mocks:AnyRef*)(verifications:org.mockito.VerifyInOrder=>IdiomaticMockitoBase.this.Verification):IdiomaticMockitoBase.this.Verification", "kind" : "def"}, {"label" : "atMostTenTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostTenTimes", "link" : "scail\/commons\/Spec.html#atMostTenTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostNineTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostNineTimes", "link" : "scail\/commons\/Spec.html#atMostNineTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostEightTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostEightTimes", "link" : "scail\/commons\/Spec.html#atMostEightTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostSevenTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostSevenTimes", "link" : "scail\/commons\/Spec.html#atMostSevenTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostSixTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostSixTimes", "link" : "scail\/commons\/Spec.html#atMostSixTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostFiveTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostFiveTimes", "link" : "scail\/commons\/Spec.html#atMostFiveTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostFourTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostFourTimes", "link" : "scail\/commons\/Spec.html#atMostFourTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostThreeTimes", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostThreeTimes", "link" : "scail\/commons\/Spec.html#atMostThreeTimes:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostThrice", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostThrice", "link" : "scail\/commons\/Spec.html#atMostThrice:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostTwice", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostTwice", "link" : "scail\/commons\/Spec.html#atMostTwice:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atMostOnce", "tail" : ": AtMost", "member" : "org.mockito.IdiomaticMockitoBase.atMostOnce", "link" : "scail\/commons\/Spec.html#atMostOnce:org.mockito.IdiomaticMockitoBase.AtMost", "kind" : "val"}, {"label" : "atLeastTenTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastTenTimes", "link" : "scail\/commons\/Spec.html#atLeastTenTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastNineTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastNineTimes", "link" : "scail\/commons\/Spec.html#atLeastNineTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastEightTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastEightTimes", "link" : "scail\/commons\/Spec.html#atLeastEightTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastSevenTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastSevenTimes", "link" : "scail\/commons\/Spec.html#atLeastSevenTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastSixTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastSixTimes", "link" : "scail\/commons\/Spec.html#atLeastSixTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastFiveTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastFiveTimes", "link" : "scail\/commons\/Spec.html#atLeastFiveTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastFourTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastFourTimes", "link" : "scail\/commons\/Spec.html#atLeastFourTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastThreeTimes", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastThreeTimes", "link" : "scail\/commons\/Spec.html#atLeastThreeTimes:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastThrice", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastThrice", "link" : "scail\/commons\/Spec.html#atLeastThrice:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastTwice", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastTwice", "link" : "scail\/commons\/Spec.html#atLeastTwice:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "atLeastOnce", "tail" : ": AtLeast", "member" : "org.mockito.IdiomaticMockitoBase.atLeastOnce", "link" : "scail\/commons\/Spec.html#atLeastOnce:org.mockito.IdiomaticMockitoBase.AtLeast", "kind" : "val"}, {"label" : "tenTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.tenTimes", "link" : "scail\/commons\/Spec.html#tenTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "nineTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.nineTimes", "link" : "scail\/commons\/Spec.html#nineTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "eightTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.eightTimes", "link" : "scail\/commons\/Spec.html#eightTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "sevenTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.sevenTimes", "link" : "scail\/commons\/Spec.html#sevenTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "sixTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.sixTimes", "link" : "scail\/commons\/Spec.html#sixTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "fiveTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.fiveTimes", "link" : "scail\/commons\/Spec.html#fiveTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "fourTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.fourTimes", "link" : "scail\/commons\/Spec.html#fourTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "threeTimes", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.threeTimes", "link" : "scail\/commons\/Spec.html#threeTimes:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "thrice", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.thrice", "link" : "scail\/commons\/Spec.html#thrice:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "twice", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.twice", "link" : "scail\/commons\/Spec.html#twice:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "once", "tail" : ": Times", "member" : "org.mockito.IdiomaticMockitoBase.once", "link" : "scail\/commons\/Spec.html#once:org.mockito.IdiomaticMockitoBase.Times", "kind" : "val"}, {"label" : "onlyHere", "tail" : ": OnlyOn.type", "member" : "org.mockito.IdiomaticMockitoBase.onlyHere", "link" : "scail\/commons\/Spec.html#onlyHere:org.mockito.IdiomaticMockitoBase.OnlyOn.type", "kind" : "val"}, {"label" : "on", "tail" : ": On.type", "member" : "org.mockito.IdiomaticMockitoBase.on", "link" : "scail\/commons\/Spec.html#on:org.mockito.IdiomaticMockitoBase.On.type", "kind" : "val"}, {"label" : "realMethod", "tail" : ": RealMethod.type", "member" : "org.mockito.IdiomaticMockitoBase.realMethod", "link" : "scail\/commons\/Spec.html#realMethod:org.mockito.WhenMacro.RealMethod.type", "kind" : "val"}, {"label" : "ignoringStubs", "tail" : ": IgnoringStubs.type", "member" : "org.mockito.IdiomaticMockitoBase.ignoringStubs", "link" : "scail\/commons\/Spec.html#ignoringStubs:org.mockito.IdiomaticMockitoBase.IgnoringStubs.type", "kind" : "val"}, {"label" : "calledAgain", "tail" : ": CalledAgain.type", "member" : "org.mockito.IdiomaticMockitoBase.calledAgain", "link" : "scail\/commons\/Spec.html#calledAgain:org.mockito.IdiomaticMockitoBase.CalledAgain.type", "kind" : "val"}, {"label" : "theRealMethod", "tail" : ": RealMethod.type", "member" : "org.mockito.IdiomaticMockitoBase.theRealMethod", "link" : "scail\/commons\/Spec.html#theRealMethod:org.mockito.WhenMacro.RealMethod.type", "kind" : "val"}, {"label" : "answered", "tail" : ": Answered.type", "member" : "org.mockito.IdiomaticMockitoBase.answered", "link" : "scail\/commons\/Spec.html#answered:org.mockito.IdiomaticMockitoBase.Answered.type", "kind" : "val"}, {"label" : "returned", "tail" : ": Returned.type", "member" : "org.mockito.IdiomaticMockitoBase.returned", "link" : "scail\/commons\/Spec.html#returned:org.mockito.IdiomaticMockitoBase.Returned.type", "kind" : "val"}, {"label" : "thrown", "tail" : ": Thrown.type", "member" : "org.mockito.IdiomaticMockitoBase.thrown", "link" : "scail\/commons\/Spec.html#thrown:org.mockito.IdiomaticMockitoBase.Thrown.type", "kind" : "val"}, {"label" : "called", "tail" : ": Called.type", "member" : "org.mockito.IdiomaticMockitoBase.called", "link" : "scail\/commons\/Spec.html#called:org.mockito.Called.type", "kind" : "val"}, {"label" : "mockitoSerialisableEquality", "tail" : "(): Equality[T]", "member" : "org.mockito.ScalacticSerialisableHack.mockitoSerialisableEquality", "link" : "scail\/commons\/Spec.html#mockitoSerialisableEquality[T]:org.scalactic.Equality[T]", "kind" : "implicit def"}, {"label" : "spyLambda", "tail" : "(realObj: T)(arg0: ClassTag[T]): T", "member" : "org.mockito.MockitoEnhancer.spyLambda", "link" : "scail\/commons\/Spec.html#spyLambda[T<:AnyRef](realObj:T)(implicitevidence$38:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "ignoreStubs", "tail" : "(mocks: AnyRef*): Array[AnyRef]", "member" : "org.mockito.MockitoEnhancer.ignoreStubs", "link" : "scail\/commons\/Spec.html#ignoreStubs(mocks:AnyRef*):Array[AnyRef]", "kind" : "def"}, {"label" : "verifyNoMoreInteractions", "tail" : "(mocks: AnyRef*): Unit", "member" : "org.mockito.MockitoEnhancer.verifyNoMoreInteractions", "link" : "scail\/commons\/Spec.html#verifyNoMoreInteractions(mocks:AnyRef*):Unit", "kind" : "def"}, {"label" : "mockingDetails", "tail" : "(toInspect: AnyRef): MockingDetails", "member" : "org.mockito.MockitoEnhancer.mockingDetails", "link" : "scail\/commons\/Spec.html#mockingDetails(toInspect:AnyRef):org.mockito.MockingDetails", "kind" : "def"}, {"label" : "reset", "tail" : "(mocks: AnyRef*)(arg0: Prettifier): Unit", "member" : "org.mockito.MockitoEnhancer.reset", "link" : "scail\/commons\/Spec.html#reset(mocks:AnyRef*)(implicit$pt:org.scalactic.Prettifier):Unit", "kind" : "def"}, {"label" : "spy", "tail" : "(realObj: T, lenient: Boolean)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.spy", "link" : "scail\/commons\/Spec.html#spy[T<:AnyRef](realObj:T,lenient:Boolean)(implicitevidence$36:scala.reflect.ClassTag[T],implicitevidence$37:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(name: String)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], defaultAnswer: DefaultAnswer, arg3: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "scail\/commons\/Spec.html#mock[T<:AnyRef](name:String)(implicitevidence$34:scala.reflect.ClassTag[T],implicitevidence$35:reflect.runtime.universe.WeakTypeTag[T],implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer,implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(mockSettings: MockSettings)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "scail\/commons\/Spec.html#mock[T<:AnyRef](mockSettings:org.mockito.MockSettings)(implicitevidence$32:scala.reflect.ClassTag[T],implicitevidence$33:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(defaultAnswer: DefaultAnswer)(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "scail\/commons\/Spec.html#mock[T<:AnyRef](defaultAnswer:org.mockito.stubbing.DefaultAnswer)(implicitevidence$30:scala.reflect.ClassTag[T],implicitevidence$31:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "mock", "tail" : "(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], defaultAnswer: DefaultAnswer, arg3: Prettifier): T", "member" : "org.mockito.MockitoEnhancer.mock", "link" : "scail\/commons\/Spec.html#mock[T<:AnyRef](implicitevidence$28:scala.reflect.ClassTag[T],implicitevidence$29:reflect.runtime.universe.WeakTypeTag[T],implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer,implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "invocationOps", "tail" : ": (InvocationOnMock) ⇒ InvocationOnMockOps", "member" : "org.mockito.MockitoEnhancer.invocationOps", "link" : "scail\/commons\/Spec.html#invocationOps:org.mockito.invocation.InvocationOnMock=>org.mockito.ReflectionUtils.InvocationOnMockOps", "kind" : "implicit val"}, {"label" : "withSettings", "tail" : "(defaultAnswer: DefaultAnswer): MockSettings", "member" : "org.mockito.MockCreator.withSettings", "link" : "scail\/commons\/Spec.html#withSettings(implicitdefaultAnswer:org.mockito.stubbing.DefaultAnswer):org.mockito.MockSettings", "kind" : "def"}, {"label" : "mock", "tail" : "(defaultAnswer: Answer[_])(arg0: ClassTag[T], arg1: scala.reflect.api.JavaUniverse.WeakTypeTag[T], arg2: Prettifier): T", "member" : "org.mockito.MockCreator.mock", "link" : "scail\/commons\/Spec.html#mock[T<:AnyRef](defaultAnswer:org.mockito.stubbing.Answer[_])(implicitevidence$3:scala.reflect.ClassTag[T],implicitevidence$4:reflect.runtime.universe.WeakTypeTag[T],implicit$pt:org.scalactic.Prettifier):T", "kind" : "def"}, {"label" : "convertTryToSuccessOrFailure", "tail" : "(theTry: Try[T])(pos: Position): SuccessOrFailure[T]", "member" : "org.scalatest.TryValues.convertTryToSuccessOrFailure", "link" : "scail\/commons\/Spec.html#convertTryToSuccessOrFailure[T](theTry:scala.util.Try[T])(implicitpos:org.scalactic.source.Position):TryValues.this.SuccessOrFailure[T]", "kind" : "implicit def"}, {"label" : "convertOptionToValuable", "tail" : "(opt: Option[T])(pos: Position): Valuable[T]", "member" : "org.scalatest.OptionValues.convertOptionToValuable", "link" : "scail\/commons\/Spec.html#convertOptionToValuable[T](opt:Option[T])(implicitpos:org.scalactic.source.Position):OptionValues.this.Valuable[T]", "kind" : "implicit def"}, {"label" : "convertRightProjectionToValuable", "tail" : "(rightProj: RightProjection[L, R])(pos: Position): RightValuable[L, R]", "member" : "org.scalatest.EitherValues.convertRightProjectionToValuable", "link" : "scail\/commons\/Spec.html#convertRightProjectionToValuable[L,R](rightProj:Either.RightProjection[L,R])(implicitpos:org.scalactic.source.Position):EitherValues.this.RightValuable[L,R]", "kind" : "implicit def"}, {"label" : "convertLeftProjectionToValuable", "tail" : "(leftProj: LeftProjection[L, R])(pos: Position): LeftValuable[L, R]", "member" : "org.scalatest.EitherValues.convertLeftProjectionToValuable", "link" : "scail\/commons\/Spec.html#convertLeftProjectionToValuable[L,R](leftProj:Either.LeftProjection[L,R])(implicitpos:org.scalactic.source.Position):EitherValues.this.LeftValuable[L,R]", "kind" : "implicit def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assume", "link" : "scail\/commons\/Spec.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assume", "link" : "scail\/commons\/Spec.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assert", "link" : "scail\/commons\/Spec.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assert", "link" : "scail\/commons\/Spec.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "diagrammedAssertionsHelper", "tail" : ": DiagrammedAssertionsHelper", "member" : "org.scalatest.DiagrammedAssertions.diagrammedAssertionsHelper", "link" : "scail\/commons\/Spec.html#diagrammedAssertionsHelper:DiagrammedAssertions.this.DiagrammedAssertionsHelper", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FreeSpec.toString", "link" : "scail\/commons\/Spec.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FreeSpecLike.testDataFor", "link" : "scail\/commons\/Spec.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FreeSpecLike.styleName", "link" : "scail\/commons\/Spec.html#styleName:String", "kind" : "final val"}, {"label" : "behave", "tail" : ": BehaveWord", "member" : "org.scalatest.FreeSpecLike.behave", "link" : "scail\/commons\/Spec.html#behave:org.scalatest.words.BehaveWord", "kind" : "val"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FreeSpecLike.run", "link" : "scail\/commons\/Spec.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FreeSpecLike.testNames", "link" : "scail\/commons\/Spec.html#testNames:Set[String]", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FreeSpecLike.runTests", "link" : "scail\/commons\/Spec.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FreeSpecLike.runTest", "link" : "scail\/commons\/Spec.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FreeSpecLike.tags", "link" : "scail\/commons\/Spec.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "convertToFreeSpecStringWrapper", "tail" : "(s: String)(pos: Position): FreeSpecStringWrapper", "member" : "org.scalatest.FreeSpecLike.convertToFreeSpecStringWrapper", "link" : "scail\/commons\/Spec.html#convertToFreeSpecStringWrapper(s:String)(implicitpos:org.scalactic.source.Position):FreeSpecLike.this.FreeSpecStringWrapper", "kind" : "implicit def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FreeSpecLike.registerIgnoredTest", "link" : "scail\/commons\/Spec.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FreeSpecLike.registerTest", "link" : "scail\/commons\/Spec.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FreeSpecLike.markup", "link" : "scail\/commons\/Spec.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FreeSpecLike.alert", "link" : "scail\/commons\/Spec.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FreeSpecLike.note", "link" : "scail\/commons\/Spec.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FreeSpecLike.info", "link" : "scail\/commons\/Spec.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "scail\/commons\/Spec.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "scail\/commons\/Spec.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "scail\/commons\/Spec.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "scail\/commons\/Spec.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "scail\/commons\/Spec.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "scail\/commons\/Spec.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "scail\/commons\/Spec.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "scail\/commons\/Spec.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "scail\/commons\/Spec.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "scail\/commons\/Spec.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "scail\/commons\/Spec.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "scail\/commons\/Spec.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "scail\/commons\/Spec.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "scail\/commons\/Spec.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "scail\/commons\/Spec.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "scail\/commons\/Spec.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "scail\/commons\/Spec.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "scail\/commons\/Spec.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "scail\/commons\/Spec.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "scail\/commons\/Spec.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "scail\/commons\/Spec.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "scail\/commons\/Spec.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "scail\/commons\/Spec.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "scail\/commons\/Spec.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "scail\/commons\/Spec.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "scail\/commons\/Spec.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "scail\/commons\/Spec.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "scail\/commons\/Spec.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "scail\/commons\/Spec.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "scail\/commons\/Spec.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "scail\/commons\/Spec.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "scail\/commons\/Spec.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "scail\/commons\/Spec.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "scail\/commons\/Spec.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "scail\/commons\/Spec.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "scail\/commons\/Spec.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "scail\/commons\/Spec.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "scail\/commons\/Spec.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "scail\/commons\/Spec.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "scail\/commons\/Spec.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "scail\/commons\/Spec.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "scail\/commons\/Spec.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "scail\/commons\/Spec.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "scail\/commons\/Spec.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "scail\/commons\/Spec.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "scail\/commons\/Spec.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "scail\/commons\/Spec.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "scail\/commons\/Spec.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/Spec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/Spec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/Spec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/Spec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/Spec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/Spec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/Spec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/Spec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/Spec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/Spec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/Spec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/Spec.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/Spec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/Spec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/Spec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/Spec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/Spec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/Spec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scail\/commons\/Spec.html", "kind" : "class"}, {"name" : "scail.commons.SpecLike", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/SpecLike.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/SpecLike.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SpecLike) ⇒ Boolean, msg: ⇒ Any): SpecLike", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/SpecLike.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SpecLike) ⇒ Boolean): SpecLike", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/SpecLike.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): SpecLike", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/SpecLike.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SpecLike", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/SpecLike.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SpecLike, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/SpecLike.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SpecLike, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/SpecLike.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "SuccessOrFailure", "tail" : "", "member" : "org.scalatest.TryValues.SuccessOrFailure", "link" : "scail\/commons\/SpecLike.html#SuccessOrFailure[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Valuable", "tail" : "", "member" : "org.scalatest.OptionValues.Valuable", "link" : "scail\/commons\/SpecLike.html#Valuable[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "RightValuable", "tail" : "", "member" : "org.scalatest.EitherValues.RightValuable", "link" : "scail\/commons\/SpecLike.html#RightValuable[L<:<?>,R<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "LeftValuable", "tail" : "", "member" : "org.scalatest.EitherValues.LeftValuable", "link" : "scail\/commons\/SpecLike.html#LeftValuable[L<:<?>,R<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "DiagrammedAssertionsHelper", "tail" : "", "member" : "org.scalatest.DiagrammedAssertions.DiagrammedAssertionsHelper", "link" : "scail\/commons\/SpecLike.html#DiagrammedAssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "scail\/commons\/SpecLike.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "scail\/commons\/SpecLike.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "scail\/commons\/SpecLike.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "convertTryToSuccessOrFailure", "tail" : "(theTry: Try[T])(pos: Position): SuccessOrFailure[T]", "member" : "org.scalatest.TryValues.convertTryToSuccessOrFailure", "link" : "scail\/commons\/SpecLike.html#convertTryToSuccessOrFailure[T](theTry:scala.util.Try[T])(implicitpos:org.scalactic.source.Position):TryValues.this.SuccessOrFailure[T]", "kind" : "implicit def"}, {"label" : "convertOptionToValuable", "tail" : "(opt: Option[T])(pos: Position): Valuable[T]", "member" : "org.scalatest.OptionValues.convertOptionToValuable", "link" : "scail\/commons\/SpecLike.html#convertOptionToValuable[T](opt:Option[T])(implicitpos:org.scalactic.source.Position):OptionValues.this.Valuable[T]", "kind" : "implicit def"}, {"label" : "convertRightProjectionToValuable", "tail" : "(rightProj: RightProjection[L, R])(pos: Position): RightValuable[L, R]", "member" : "org.scalatest.EitherValues.convertRightProjectionToValuable", "link" : "scail\/commons\/SpecLike.html#convertRightProjectionToValuable[L,R](rightProj:Either.RightProjection[L,R])(implicitpos:org.scalactic.source.Position):EitherValues.this.RightValuable[L,R]", "kind" : "implicit def"}, {"label" : "convertLeftProjectionToValuable", "tail" : "(leftProj: LeftProjection[L, R])(pos: Position): LeftValuable[L, R]", "member" : "org.scalatest.EitherValues.convertLeftProjectionToValuable", "link" : "scail\/commons\/SpecLike.html#convertLeftProjectionToValuable[L,R](leftProj:Either.LeftProjection[L,R])(implicitpos:org.scalactic.source.Position):EitherValues.this.LeftValuable[L,R]", "kind" : "implicit def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assume", "link" : "scail\/commons\/SpecLike.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assume", "link" : "scail\/commons\/SpecLike.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assert", "link" : "scail\/commons\/SpecLike.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.DiagrammedAssertions.assert", "link" : "scail\/commons\/SpecLike.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "diagrammedAssertionsHelper", "tail" : ": DiagrammedAssertionsHelper", "member" : "org.scalatest.DiagrammedAssertions.diagrammedAssertionsHelper", "link" : "scail\/commons\/SpecLike.html#diagrammedAssertionsHelper:DiagrammedAssertions.this.DiagrammedAssertionsHelper", "kind" : "val"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "scail\/commons\/SpecLike.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "scail\/commons\/SpecLike.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "scail\/commons\/SpecLike.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "scail\/commons\/SpecLike.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "scail\/commons\/SpecLike.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "scail\/commons\/SpecLike.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "scail\/commons\/SpecLike.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "scail\/commons\/SpecLike.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "scail\/commons\/SpecLike.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "scail\/commons\/SpecLike.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "scail\/commons\/SpecLike.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "scail\/commons\/SpecLike.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "scail\/commons\/SpecLike.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "scail\/commons\/SpecLike.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "scail\/commons\/SpecLike.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "scail\/commons\/SpecLike.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "scail\/commons\/SpecLike.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "scail\/commons\/SpecLike.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "scail\/commons\/SpecLike.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "scail\/commons\/SpecLike.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "scail\/commons\/SpecLike.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "scail\/commons\/SpecLike.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "scail\/commons\/SpecLike.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "scail\/commons\/SpecLike.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "scail\/commons\/SpecLike.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "scail\/commons\/SpecLike.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "scail\/commons\/SpecLike.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "scail\/commons\/SpecLike.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "scail\/commons\/SpecLike.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "scail\/commons\/SpecLike.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "scail\/commons\/SpecLike.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "scail\/commons\/SpecLike.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "scail\/commons\/SpecLike.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "scail\/commons\/SpecLike.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "scail\/commons\/SpecLike.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "scail\/commons\/SpecLike.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "scail\/commons\/SpecLike.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "scail\/commons\/SpecLike.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "scail\/commons\/SpecLike.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/SpecLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/SpecLike.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/SpecLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/SpecLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/SpecLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/SpecLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/SpecLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/SpecLike.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/SpecLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/SpecLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/SpecLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/SpecLike.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/SpecLike.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/SpecLike.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/SpecLike.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/SpecLike.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/SpecLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/SpecLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/SpecLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Base trait for unit tests.", "trait" : "scail\/commons\/SpecLike.html", "kind" : "trait"}], "scail.commons.ops" : [{"name" : "scail.commons.ops.AnyOps", "shortDescription" : "Extension methods for Any.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/package$$AnyOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/package$$AnyOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AnyOps[A]) ⇒ Boolean, msg: ⇒ Any): AnyOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$AnyOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AnyOps[A]) ⇒ Boolean): AnyOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$AnyOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): AnyOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$AnyOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AnyOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$AnyOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AnyOps[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/package$$AnyOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AnyOps[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/package$$AnyOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "tap", "tail" : "(f: (A) ⇒ Unit): A", "member" : "scail.commons.ops.AnyOps.tap", "link" : "scail\/commons\/ops\/package$$AnyOps.html#tap(f:A=>Unit):A", "kind" : "def"}, {"label" : "option", "tail" : "(): Option[A]", "member" : "scail.commons.ops.AnyOps.option", "link" : "scail\/commons\/ops\/package$$AnyOps.html#option:Option[A]", "kind" : "def"}, {"label" : "future", "tail" : "(): Future[A]", "member" : "scail.commons.ops.AnyOps.future", "link" : "scail\/commons\/ops\/package$$AnyOps.html#future:scala.concurrent.Future[A]", "kind" : "def"}, {"member" : "scail.commons.ops.AnyOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/package$$AnyOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/package$$AnyOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/package$$AnyOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/package$$AnyOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/package$$AnyOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/package$$AnyOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/package$$AnyOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/package$$AnyOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.AnyRefOps", "shortDescription" : "Extension methods for AnyRef.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/package$$AnyRefOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/package$$AnyRefOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AnyRefOps[A]) ⇒ Boolean, msg: ⇒ Any): AnyRefOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$AnyRefOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AnyRefOps[A]) ⇒ Boolean): AnyRefOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$AnyRefOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): AnyRefOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$AnyRefOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AnyRefOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$AnyRefOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AnyRefOps[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/package$$AnyRefOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AnyRefOps[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/package$$AnyRefOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "nonNull", "tail" : "(): Boolean", "member" : "scail.commons.ops.AnyRefOps.nonNull", "link" : "scail\/commons\/ops\/package$$AnyRefOps.html#nonNull:Boolean", "kind" : "def"}, {"label" : "isNull", "tail" : "(): Boolean", "member" : "scail.commons.ops.AnyRefOps.isNull", "link" : "scail\/commons\/ops\/package$$AnyRefOps.html#isNull:Boolean", "kind" : "def"}, {"member" : "scail.commons.ops.AnyRefOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/package$$AnyRefOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/package$$AnyRefOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/package$$AnyRefOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/package$$AnyRefOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/package$$AnyRefOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/package$$AnyRefOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/package$$AnyRefOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/package$$AnyRefOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.BooleanOps", "shortDescription" : "Extension methods for Boolean.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/package$$BooleanOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/package$$BooleanOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BooleanOps) ⇒ Boolean, msg: ⇒ Any): BooleanOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$BooleanOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BooleanOps) ⇒ Boolean): BooleanOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$BooleanOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): BooleanOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$BooleanOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): BooleanOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$BooleanOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (BooleanOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/package$$BooleanOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (BooleanOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/package$$BooleanOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "thenOption", "tail" : "(a: ⇒ A): Option[A]", "member" : "scail.commons.ops.BooleanOps.thenOption", "link" : "scail\/commons\/ops\/package$$BooleanOps.html#thenOption[A](a:=>A):Option[A]", "kind" : "def"}, {"label" : "asInt", "tail" : "(): Int", "member" : "scail.commons.ops.BooleanOps.asInt", "link" : "scail\/commons\/ops\/package$$BooleanOps.html#asInt:Int", "kind" : "def"}, {"label" : "?", "tail" : "(true: ⇒ A): Conditional[A]", "member" : "scail.commons.ops.BooleanOps.?", "link" : "scail\/commons\/ops\/package$$BooleanOps.html#?[A](true:=>A):scail.commons.ops.Conditional[A]", "kind" : "def"}, {"member" : "scail.commons.ops.BooleanOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/package$$BooleanOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/package$$BooleanOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/package$$BooleanOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/package$$BooleanOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/package$$BooleanOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/package$$BooleanOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/package$$BooleanOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/package$$BooleanOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.ByteOps", "shortDescription" : "Extension methods for Byte.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/package$$ByteOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/package$$ByteOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ByteOps) ⇒ Boolean, msg: ⇒ Any): ByteOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$ByteOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ByteOps) ⇒ Boolean): ByteOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$ByteOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ByteOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$ByteOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ByteOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$ByteOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ByteOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/package$$ByteOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ByteOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/package$$ByteOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "isOdd", "tail" : "(): Boolean", "member" : "scail.commons.ops.ByteOps.isOdd", "link" : "scail\/commons\/ops\/package$$ByteOps.html#isOdd:Boolean", "kind" : "def"}, {"label" : "isEven", "tail" : "(): Boolean", "member" : "scail.commons.ops.ByteOps.isEven", "link" : "scail\/commons\/ops\/package$$ByteOps.html#isEven:Boolean", "kind" : "def"}, {"member" : "scail.commons.ops.ByteOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/package$$ByteOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/package$$ByteOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/package$$ByteOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/package$$ByteOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/package$$ByteOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/package$$ByteOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/package$$ByteOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/package$$ByteOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.CharOps", "shortDescription" : "Extension methods for Char.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/package$$CharOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/package$$CharOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CharOps) ⇒ Boolean, msg: ⇒ Any): CharOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$CharOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CharOps) ⇒ Boolean): CharOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$CharOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): CharOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$CharOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CharOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$CharOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CharOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/package$$CharOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CharOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/package$$CharOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "isOdd", "tail" : "(): Boolean", "member" : "scail.commons.ops.CharOps.isOdd", "link" : "scail\/commons\/ops\/package$$CharOps.html#isOdd:Boolean", "kind" : "def"}, {"label" : "isEven", "tail" : "(): Boolean", "member" : "scail.commons.ops.CharOps.isEven", "link" : "scail\/commons\/ops\/package$$CharOps.html#isEven:Boolean", "kind" : "def"}, {"member" : "scail.commons.ops.CharOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/package$$CharOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/package$$CharOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/package$$CharOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/package$$CharOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/package$$CharOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/package$$CharOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/package$$CharOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/package$$CharOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.Conditional", "shortDescription" : "", "members_class" : [{"label" : "nonNull", "tail" : "(): Boolean", "member" : "scail.commons.ops.AnyRefOps.nonNull", "link" : "scail\/commons\/ops\/Conditional.html#nonNull:Boolean", "kind" : "def"}, {"label" : "isNull", "tail" : "(): Boolean", "member" : "scail.commons.ops.AnyRefOps.isNull", "link" : "scail\/commons\/ops\/Conditional.html#isNull:Boolean", "kind" : "def"}, {"label" : "tap", "tail" : "(f: (Conditional[A]) ⇒ Unit): Conditional[A]", "member" : "scail.commons.ops.AnyOps.tap", "link" : "scail\/commons\/ops\/Conditional.html#tap(f:A=>Unit):A", "kind" : "def"}, {"label" : "option", "tail" : "(): Option[Conditional[A]]", "member" : "scail.commons.ops.AnyOps.option", "link" : "scail\/commons\/ops\/Conditional.html#option:Option[A]", "kind" : "def"}, {"label" : "future", "tail" : "(): Future[Conditional[A]]", "member" : "scail.commons.ops.AnyOps.future", "link" : "scail\/commons\/ops\/Conditional.html#future:scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/Conditional.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/Conditional.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Conditional[A]) ⇒ Boolean, msg: ⇒ Any): Conditional[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/Conditional.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Conditional[A]) ⇒ Boolean): Conditional[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/Conditional.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Conditional[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/Conditional.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Conditional[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/Conditional.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Conditional[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/Conditional.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Conditional[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/Conditional.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "|", "tail" : "(false: ⇒ A): A", "member" : "scail.commons.ops.Conditional.|", "link" : "scail\/commons\/ops\/Conditional.html#|(false:=>A):A", "kind" : "def"}, {"member" : "scail.commons.ops.Conditional#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/ops\/Conditional.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/ops\/Conditional.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/ops\/Conditional.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/ops\/Conditional.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/ops\/Conditional.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/ops\/Conditional.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/ops\/Conditional.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/ops\/Conditional.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/ops\/Conditional.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/ops\/Conditional.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/ops\/Conditional.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/ops\/Conditional.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/ops\/Conditional.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/ops\/Conditional.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/ops\/Conditional.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/ops\/Conditional.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/ops\/Conditional.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/Conditional.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/Conditional.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/Conditional.html", "kind" : "class"}, {"name" : "scail.commons.ops.DefaultValue", "members_trait" : [{"label" : "nonNull", "tail" : "(): Boolean", "member" : "scail.commons.ops.AnyRefOps.nonNull", "link" : "scail\/commons\/ops\/DefaultValue.html#nonNull:Boolean", "kind" : "def"}, {"label" : "isNull", "tail" : "(): Boolean", "member" : "scail.commons.ops.AnyRefOps.isNull", "link" : "scail\/commons\/ops\/DefaultValue.html#isNull:Boolean", "kind" : "def"}, {"label" : "tap", "tail" : "(f: (DefaultValue[A]) ⇒ Unit): DefaultValue[A]", "member" : "scail.commons.ops.AnyOps.tap", "link" : "scail\/commons\/ops\/DefaultValue.html#tap(f:A=>Unit):A", "kind" : "def"}, {"label" : "option", "tail" : "(): Option[DefaultValue[A]]", "member" : "scail.commons.ops.AnyOps.option", "link" : "scail\/commons\/ops\/DefaultValue.html#option:Option[A]", "kind" : "def"}, {"label" : "future", "tail" : "(): Future[DefaultValue[A]]", "member" : "scail.commons.ops.AnyOps.future", "link" : "scail\/commons\/ops\/DefaultValue.html#future:scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/DefaultValue.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/DefaultValue.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DefaultValue[A]) ⇒ Boolean, msg: ⇒ Any): DefaultValue[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/DefaultValue.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DefaultValue[A]) ⇒ Boolean): DefaultValue[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/DefaultValue.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): DefaultValue[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/DefaultValue.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): DefaultValue[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/DefaultValue.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (DefaultValue[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/DefaultValue.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (DefaultValue[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/DefaultValue.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/ops\/DefaultValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/ops\/DefaultValue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/ops\/DefaultValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/ops\/DefaultValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/ops\/DefaultValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/ops\/DefaultValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/ops\/DefaultValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/ops\/DefaultValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/ops\/DefaultValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/ops\/DefaultValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/ops\/DefaultValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/ops\/DefaultValue.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/ops\/DefaultValue.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/ops\/DefaultValue.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/ops\/DefaultValue.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/ops\/DefaultValue.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/ops\/DefaultValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/DefaultValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/DefaultValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "default", "tail" : "(): A", "member" : "scail.commons.ops.DefaultValue.default", "link" : "scail\/commons\/ops\/DefaultValue.html#default:A", "kind" : "abstract def"}], "shortDescription" : "Typeclass to create default empty values.", "object" : "scail\/commons\/ops\/DefaultValue$.html", "members_object" : [{"label" : "collImpl", "tail" : "(c: Context)(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[A]): scala.reflect.macros.blackbox.Context.Tree", "member" : "scail.commons.ops.DefaultValue.collImpl", "link" : "scail\/commons\/ops\/DefaultValue$.html#collImpl[A](c:scala.reflect.macros.blackbox.Context)(implicitevidence$2:c.WeakTypeTag[A]):c.Tree", "kind" : "def"}, {"label" : "coll", "tail" : "(): DefaultValue[A]", "member" : "scail.commons.ops.DefaultValue.coll", "link" : "scail\/commons\/ops\/DefaultValue$.html#coll[A<:scala.collection.GenTraversable[_]]:scail.commons.ops.DefaultValue[A]", "kind" : "implicit macro def"}, {"label" : "numeric", "tail" : "(arg0: Numeric[A]): DefaultValue[A]", "member" : "scail.commons.ops.DefaultValue.numeric", "link" : "scail\/commons\/ops\/DefaultValue$.html#numeric[A](implicitevidence$1:Numeric[A]):scail.commons.ops.DefaultValue[A]", "kind" : "implicit def"}, {"label" : "string", "tail" : ": DefaultValue[String]", "member" : "scail.commons.ops.DefaultValue.string", "link" : "scail\/commons\/ops\/DefaultValue$.html#string:scail.commons.ops.DefaultValue[String]", "kind" : "implicit val"}, {"label" : "boolean", "tail" : ": DefaultValue[Boolean]", "member" : "scail.commons.ops.DefaultValue.boolean", "link" : "scail\/commons\/ops\/DefaultValue$.html#boolean:scail.commons.ops.DefaultValue[Boolean]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(value: ⇒ A): DefaultValue[A]", "member" : "scail.commons.ops.DefaultValue.apply", "link" : "scail\/commons\/ops\/DefaultValue$.html#apply[A](value:=>A):scail.commons.ops.DefaultValue[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/ops\/DefaultValue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/ops\/DefaultValue$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/ops\/DefaultValue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/ops\/DefaultValue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/ops\/DefaultValue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/ops\/DefaultValue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/ops\/DefaultValue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/ops\/DefaultValue$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/ops\/DefaultValue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/ops\/DefaultValue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/ops\/DefaultValue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/ops\/DefaultValue$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/ops\/DefaultValue$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/ops\/DefaultValue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/ops\/DefaultValue$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/ops\/DefaultValue$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/ops\/DefaultValue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/DefaultValue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/DefaultValue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "scail\/commons\/ops\/DefaultValue.html", "kind" : "trait"}, {"name" : "scail.commons.ops.EnumerationOps", "shortDescription" : "Extension methods for Enumeration.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/package$$EnumerationOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/package$$EnumerationOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EnumerationOps[A]) ⇒ Boolean, msg: ⇒ Any): EnumerationOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$EnumerationOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EnumerationOps[A]) ⇒ Boolean): EnumerationOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$EnumerationOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): EnumerationOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$EnumerationOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): EnumerationOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$EnumerationOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (EnumerationOps[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/package$$EnumerationOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (EnumerationOps[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/package$$EnumerationOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "byName", "tail" : "(s: String): Option[A.Value]", "member" : "scail.commons.ops.EnumerationOps.byName", "link" : "scail\/commons\/ops\/package$$EnumerationOps.html#byName(s:String):Option[A#Value]", "kind" : "def"}, {"member" : "scail.commons.ops.EnumerationOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/package$$EnumerationOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/package$$EnumerationOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/package$$EnumerationOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/package$$EnumerationOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/package$$EnumerationOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/package$$EnumerationOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/package$$EnumerationOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/package$$EnumerationOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.IntOps", "shortDescription" : "Extension methods for Int.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/package$$IntOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/package$$IntOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntOps) ⇒ Boolean, msg: ⇒ Any): IntOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$IntOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntOps) ⇒ Boolean): IntOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$IntOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IntOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$IntOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IntOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$IntOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IntOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/package$$IntOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IntOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/package$$IntOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "ordinalize", "tail" : "(): String", "member" : "scail.commons.ops.IntOps.ordinalize", "link" : "scail\/commons\/ops\/package$$IntOps.html#ordinalize:String", "kind" : "def"}, {"label" : "isOdd", "tail" : "(): Boolean", "member" : "scail.commons.ops.IntOps.isOdd", "link" : "scail\/commons\/ops\/package$$IntOps.html#isOdd:Boolean", "kind" : "def"}, {"label" : "isEven", "tail" : "(): Boolean", "member" : "scail.commons.ops.IntOps.isEven", "link" : "scail\/commons\/ops\/package$$IntOps.html#isEven:Boolean", "kind" : "def"}, {"member" : "scail.commons.ops.IntOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/package$$IntOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/package$$IntOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/package$$IntOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/package$$IntOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/package$$IntOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/package$$IntOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/package$$IntOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/package$$IntOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.LongOps", "shortDescription" : "Extension methods for Long.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/package$$LongOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/package$$LongOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LongOps) ⇒ Boolean, msg: ⇒ Any): LongOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$LongOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LongOps) ⇒ Boolean): LongOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$LongOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): LongOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$LongOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): LongOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$LongOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (LongOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/package$$LongOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (LongOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/package$$LongOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "isOdd", "tail" : "(): Boolean", "member" : "scail.commons.ops.LongOps.isOdd", "link" : "scail\/commons\/ops\/package$$LongOps.html#isOdd:Boolean", "kind" : "def"}, {"label" : "isEven", "tail" : "(): Boolean", "member" : "scail.commons.ops.LongOps.isEven", "link" : "scail\/commons\/ops\/package$$LongOps.html#isEven:Boolean", "kind" : "def"}, {"member" : "scail.commons.ops.LongOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/package$$LongOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/package$$LongOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/package$$LongOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/package$$LongOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/package$$LongOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/package$$LongOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/package$$LongOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/package$$LongOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.OptionOps", "shortDescription" : "Extension methods for Option[A].", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/package$$OptionOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/package$$OptionOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (OptionOps[A]) ⇒ Boolean, msg: ⇒ Any): OptionOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$OptionOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (OptionOps[A]) ⇒ Boolean): OptionOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$OptionOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): OptionOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$OptionOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): OptionOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$OptionOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (OptionOps[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/package$$OptionOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (OptionOps[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/package$$OptionOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "orEmpty", "tail" : "(ev: DefaultValue[A]): A", "member" : "scail.commons.ops.OptionOps.orEmpty", "link" : "scail\/commons\/ops\/package$$OptionOps.html#orEmpty(implicitev:scail.commons.ops.DefaultValue[A]):A", "kind" : "def"}, {"label" : "forNone", "tail" : "(f: ⇒ Unit): Unit", "member" : "scail.commons.ops.OptionOps.forNone", "link" : "scail\/commons\/ops\/package$$OptionOps.html#forNone(f:=>Unit):Unit", "kind" : "def"}, {"member" : "scail.commons.ops.OptionOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/package$$OptionOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/package$$OptionOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/package$$OptionOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/package$$OptionOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/package$$OptionOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/package$$OptionOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/package$$OptionOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/package$$OptionOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.ShortOps", "shortDescription" : "Extension methods for Short.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/package$$ShortOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/package$$ShortOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ShortOps) ⇒ Boolean, msg: ⇒ Any): ShortOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$ShortOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ShortOps) ⇒ Boolean): ShortOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$ShortOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ShortOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$ShortOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ShortOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$ShortOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ShortOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/package$$ShortOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ShortOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/package$$ShortOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "isOdd", "tail" : "(): Boolean", "member" : "scail.commons.ops.ShortOps.isOdd", "link" : "scail\/commons\/ops\/package$$ShortOps.html#isOdd:Boolean", "kind" : "def"}, {"label" : "isEven", "tail" : "(): Boolean", "member" : "scail.commons.ops.ShortOps.isEven", "link" : "scail\/commons\/ops\/package$$ShortOps.html#isEven:Boolean", "kind" : "def"}, {"member" : "scail.commons.ops.ShortOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/package$$ShortOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/package$$ShortOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/package$$ShortOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/package$$ShortOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/package$$ShortOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/package$$ShortOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/package$$ShortOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/package$$ShortOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.ThrowableOps", "shortDescription" : "Extension methods for Throwable.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/package$$ThrowableOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/package$$ThrowableOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ThrowableOps) ⇒ Boolean, msg: ⇒ Any): ThrowableOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$ThrowableOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ThrowableOps) ⇒ Boolean): ThrowableOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$ThrowableOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ThrowableOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$ThrowableOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ThrowableOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$ThrowableOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ThrowableOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/package$$ThrowableOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ThrowableOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/package$$ThrowableOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "stackTrace", "tail" : "(): String", "member" : "scail.commons.ops.ThrowableOps.stackTrace", "link" : "scail\/commons\/ops\/package$$ThrowableOps.html#stackTrace:String", "kind" : "def"}, {"label" : "cause", "tail" : "(): Option[Throwable]", "member" : "scail.commons.ops.ThrowableOps.cause", "link" : "scail\/commons\/ops\/package$$ThrowableOps.html#cause:Option[Throwable]", "kind" : "def"}, {"member" : "scail.commons.ops.ThrowableOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/package$$ThrowableOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/package$$ThrowableOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/package$$ThrowableOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/package$$ThrowableOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/package$$ThrowableOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/package$$ThrowableOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/package$$ThrowableOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/package$$ThrowableOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.TryOps", "shortDescription" : "Extension methods for Try[A].", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/package$$TryOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/package$$TryOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TryOps[A]) ⇒ Boolean, msg: ⇒ Any): TryOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$TryOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TryOps[A]) ⇒ Boolean): TryOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$TryOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TryOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$TryOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TryOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$TryOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TryOps[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/package$$TryOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TryOps[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/package$$TryOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toFuture", "tail" : "(): Future[A]", "member" : "scail.commons.ops.TryOps.toFuture", "link" : "scail\/commons\/ops\/package$$TryOps.html#toFuture:scala.concurrent.Future[A]", "kind" : "def"}, {"member" : "scail.commons.ops.TryOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/package$$TryOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/package$$TryOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/package$$TryOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/package$$TryOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/package$$TryOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/package$$TryOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/package$$TryOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/package$$TryOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.Tuple2Ops", "shortDescription" : "Extension methods for Tuple2[A, B].", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/package$$Tuple2Ops.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/package$$Tuple2Ops.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Tuple2Ops[A, B]) ⇒ Boolean, msg: ⇒ Any): Tuple2Ops[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$Tuple2Ops.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Tuple2Ops[A, B]) ⇒ Boolean): Tuple2Ops[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$Tuple2Ops.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Tuple2Ops[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$Tuple2Ops.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Tuple2Ops[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/package$$Tuple2Ops.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Tuple2Ops[A, B], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/package$$Tuple2Ops.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Tuple2Ops[A, B], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/package$$Tuple2Ops.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "value", "tail" : "(): B", "member" : "scail.commons.ops.Tuple2Ops.value", "link" : "scail\/commons\/ops\/package$$Tuple2Ops.html#value:B", "kind" : "def"}, {"label" : "key", "tail" : "(): A", "member" : "scail.commons.ops.Tuple2Ops.key", "link" : "scail\/commons\/ops\/package$$Tuple2Ops.html#key:A", "kind" : "def"}, {"member" : "scail.commons.ops.Tuple2Ops#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/package$$Tuple2Ops.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/package$$Tuple2Ops.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/package$$Tuple2Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/package$$Tuple2Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/package$$Tuple2Ops.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/package$$Tuple2Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/package$$Tuple2Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/package$$Tuple2Ops.html", "kind" : "class"}], "scail.commons.i18n" : [{"name" : "scail.commons.i18n.i18n", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/i18n\/i18n.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/i18n\/i18n.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (i18n) ⇒ Boolean, msg: ⇒ Any): i18n", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/i18n\/i18n.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (i18n) ⇒ Boolean): i18n", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/i18n\/i18n.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): i18n", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/i18n\/i18n.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): i18n", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/i18n\/i18n.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (i18n, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/i18n\/i18n.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (i18n, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/i18n\/i18n.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "macroTransform", "tail" : "(annottees: Any*): Any", "member" : "scail.commons.i18n.i18n.macroTransform", "link" : "scail\/commons\/i18n\/i18n.html#macroTransform(annottees:Any*):Any", "kind" : "macro def"}, {"member" : "scail.commons.i18n.i18n#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/i18n\/i18n.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/i18n\/i18n.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/i18n\/i18n.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/i18n\/i18n.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/i18n\/i18n.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/i18n\/i18n.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/i18n\/i18n.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/i18n\/i18n.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/i18n\/i18n.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/i18n\/i18n.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/i18n\/i18n.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/i18n\/i18n.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/i18n\/i18n.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/i18n\/i18n.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/i18n\/i18n.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/i18n\/i18n.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/i18n\/i18n.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/i18n\/i18n.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/i18n\/i18n.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scail\/commons\/i18n\/i18n.html", "kind" : "class"}, {"name" : "scail.commons.i18n.i18nMacro", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/i18n\/i18nMacro.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/i18n\/i18nMacro.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (i18nMacro) ⇒ Boolean, msg: ⇒ Any): i18nMacro", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/i18n\/i18nMacro.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (i18nMacro) ⇒ Boolean): i18nMacro", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/i18n\/i18nMacro.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): i18nMacro", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/i18n\/i18nMacro.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): i18nMacro", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/i18n\/i18nMacro.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (i18nMacro, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/i18n\/i18nMacro.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (i18nMacro, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/i18n\/i18nMacro.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "impl", "tail" : "(annottees: scala.reflect.macros.Universe.Tree*): scala.reflect.macros.Universe.Tree", "member" : "scail.commons.i18n.i18nMacro.impl", "link" : "scail\/commons\/i18n\/i18nMacro.html#impl(annottees:i18nMacro.this.c.universe.Tree*):i18nMacro.this.c.universe.Tree", "kind" : "def"}, {"label" : "expand", "tail" : "(parents: Seq[scala.reflect.macros.Universe.Tree]): Expansion", "member" : "scail.commons.i18n.i18nMacro.expand", "link" : "scail\/commons\/i18n\/i18nMacro.html#expand(parents:Seq[i18nMacro.this.c.universe.Tree]):i18nMacro.this.Expansion", "kind" : "def"}, {"label" : "message", "tail" : "(prefix: String, key: String, params: Seq[Parameter]): scala.reflect.macros.Universe.Tree", "member" : "scail.commons.i18n.i18nMacro.message", "link" : "scail\/commons\/i18n\/i18nMacro.html#message(prefix:String,key:String,params:Seq[i18nMacro.this.Parameter]):i18nMacro.this.c.universe.Tree", "kind" : "def"}, {"label" : "expandString", "tail" : "(prefix: String, key: String, value: ConfigValue): scala.reflect.macros.Universe.Tree", "member" : "scail.commons.i18n.i18nMacro.expandString", "link" : "scail\/commons\/i18n\/i18nMacro.html#expandString(prefix:String,key:String,value:com.typesafe.config.ConfigValue):i18nMacro.this.c.universe.Tree", "kind" : "def"}, {"label" : "expandObject", "tail" : "(prefix: String, key: String, config: ConfigObject): scala.reflect.macros.Universe.Tree", "member" : "scail.commons.i18n.i18nMacro.expandObject", "link" : "scail\/commons\/i18n\/i18nMacro.html#expandObject(prefix:String,key:String,config:com.typesafe.config.ConfigObject):i18nMacro.this.c.universe.Tree", "kind" : "def"}, {"label" : "expandConfig", "tail" : "(config: ConfigObject, prefix: String): scala.reflect.macros.Universe.Tree", "member" : "scail.commons.i18n.i18nMacro.expandConfig", "link" : "scail\/commons\/i18n\/i18nMacro.html#expandConfig(config:com.typesafe.config.ConfigObject,prefix:String):i18nMacro.this.c.universe.Tree", "kind" : "def"}, {"label" : "parentMessages", "tail" : "(parents: Seq[scala.reflect.macros.Universe.Tree]): Option[Messages]", "member" : "scail.commons.i18n.i18nMacro.parentMessages", "link" : "scail\/commons\/i18n\/i18nMacro.html#parentMessages(parents:Seq[i18nMacro.this.c.universe.Tree]):Option[scail.commons.i18n.Messages]", "kind" : "def"}, {"label" : "locale", "tail" : ": Seq[scala.reflect.macros.Universe.ValDef]", "member" : "scail.commons.i18n.i18nMacro.locale", "link" : "scail\/commons\/i18n\/i18nMacro.html#locale:Seq[i18nMacro.this.c.universe.ValDef]", "kind" : "val"}, {"label" : "types", "tail" : "", "member" : "scail.commons.i18n.i18nMacro.types", "link" : "scail\/commons\/i18n\/i18nMacro.html#types", "kind" : "object"}, {"label" : "Parameter", "tail" : "", "member" : "scail.commons.i18n.i18nMacro.Parameter", "link" : "scail\/commons\/i18n\/i18nMacro.html#ParameterextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Expansion", "tail" : "", "member" : "scail.commons.i18n.i18nMacro.Expansion", "link" : "scail\/commons\/i18n\/i18nMacro.html#ExpansionextendsProductwithSerializable", "kind" : "case class"}, {"member" : "scail.commons.i18n.i18nMacro#<init>", "error" : "unsupported entity"}, {"label" : "c", "tail" : ": Context", "member" : "scail.commons.i18n.i18nMacro.c", "link" : "scail\/commons\/i18n\/i18nMacro.html#c:scala.reflect.macros.blackbox.Context", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/i18n\/i18nMacro.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/i18n\/i18nMacro.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/i18n\/i18nMacro.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/i18n\/i18nMacro.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/i18n\/i18nMacro.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/i18n\/i18nMacro.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/i18n\/i18nMacro.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/i18n\/i18nMacro.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/i18n\/i18nMacro.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/i18n\/i18nMacro.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/i18n\/i18nMacro.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/i18n\/i18nMacro.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/i18n\/i18nMacro.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/i18n\/i18nMacro.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/i18n\/i18nMacro.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/i18n\/i18nMacro.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/i18n\/i18nMacro.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/i18n\/i18nMacro.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/i18n\/i18nMacro.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scail\/commons\/i18n\/i18nMacro.html", "kind" : "class"}, {"name" : "scail.commons.i18n.KeyLocale", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/i18n\/KeyLocale.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/i18n\/KeyLocale.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (KeyLocale) ⇒ Boolean, msg: ⇒ Any): KeyLocale", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/i18n\/KeyLocale.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (KeyLocale) ⇒ Boolean): KeyLocale", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/i18n\/KeyLocale.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): KeyLocale", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/i18n\/KeyLocale.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): KeyLocale", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/i18n\/KeyLocale.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (KeyLocale, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/i18n\/KeyLocale.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (KeyLocale, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/i18n\/KeyLocale.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "scail.commons.i18n.KeyLocale#<init>", "error" : "unsupported entity"}, {"label" : "locale", "tail" : ": Locale", "member" : "scail.commons.i18n.KeyLocale.locale", "link" : "scail\/commons\/i18n\/KeyLocale.html#locale:java.util.Locale", "kind" : "val"}, {"label" : "key", "tail" : ": Key", "member" : "scail.commons.i18n.KeyLocale.key", "link" : "scail\/commons\/i18n\/KeyLocale.html#key:scail.commons.util.Key", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/i18n\/KeyLocale.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/i18n\/KeyLocale.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/i18n\/KeyLocale.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/i18n\/KeyLocale.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/i18n\/KeyLocale.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/i18n\/KeyLocale.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/i18n\/KeyLocale.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/i18n\/KeyLocale.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/i18n\/KeyLocale.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/i18n\/KeyLocale.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/i18n\/KeyLocale.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/i18n\/KeyLocale.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/i18n\/KeyLocale.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/i18n\/KeyLocale.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/i18n\/KeyLocale.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/i18n\/KeyLocale.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "scail\/commons\/i18n\/KeyLocale.html", "kind" : "case class"}, {"name" : "scail.commons.i18n.Messages", "shortDescription" : "Internationalization (i18n) and localization (l10n) helper class.", "object" : "scail\/commons\/i18n\/Messages$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/i18n\/Messages.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/i18n\/Messages.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Messages) ⇒ Boolean, msg: ⇒ Any): Messages", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/i18n\/Messages.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Messages) ⇒ Boolean): Messages", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/i18n\/Messages.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Messages", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/i18n\/Messages.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Messages", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/i18n\/Messages.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Messages, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/i18n\/Messages.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Messages, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/i18n\/Messages.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(key: Key, args: (String, Any)*)(locale: Locale): String", "member" : "scail.commons.i18n.Messages.apply", "link" : "scail\/commons\/i18n\/Messages.html#apply(key:scail.commons.util.Key,args:(String,Any)*)(implicitlocale:java.util.Locale):String", "kind" : "def"}, {"label" : "get", "tail" : "(key: Key, args: (String, Any)*)(locale: Locale): Option[String]", "member" : "scail.commons.i18n.Messages.get", "link" : "scail\/commons\/i18n\/Messages.html#get(key:scail.commons.util.Key,args:(String,Any)*)(implicitlocale:java.util.Locale):Option[String]", "kind" : "def"}, {"label" : "apply", "tail" : "(key: Key)(locale: Locale): String", "member" : "scail.commons.i18n.Messages.apply", "link" : "scail\/commons\/i18n\/Messages.html#apply(key:scail.commons.util.Key)(implicitlocale:java.util.Locale):String", "kind" : "def"}, {"label" : "get", "tail" : "(key: Key)(locale: Locale): Option[String]", "member" : "scail.commons.i18n.Messages.get", "link" : "scail\/commons\/i18n\/Messages.html#get(key:scail.commons.util.Key)(implicitlocale:java.util.Locale):Option[String]", "kind" : "def"}, {"member" : "scail.commons.i18n.Messages#<init>", "error" : "unsupported entity"}, {"label" : "logger", "tail" : ": Logger", "member" : "com.typesafe.scalalogging.LazyLogging.logger", "link" : "scail\/commons\/i18n\/Messages.html#logger:com.typesafe.scalalogging.Logger", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/i18n\/Messages.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/i18n\/Messages.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/i18n\/Messages.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/i18n\/Messages.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/i18n\/Messages.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/i18n\/Messages.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/i18n\/Messages.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/i18n\/Messages.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/i18n\/Messages.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/i18n\/Messages.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/i18n\/Messages.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/i18n\/Messages.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/i18n\/Messages.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/i18n\/Messages.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/i18n\/Messages.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/i18n\/Messages.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/i18n\/Messages.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/i18n\/Messages.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/i18n\/Messages.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "defaultLocale", "tail" : "(): Locale", "member" : "scail.commons.i18n.Messages.defaultLocale", "link" : "scail\/commons\/i18n\/Messages$.html#defaultLocale:java.util.Locale", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/i18n\/Messages$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/i18n\/Messages$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/i18n\/Messages$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/i18n\/Messages$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/i18n\/Messages$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/i18n\/Messages$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/i18n\/Messages$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/i18n\/Messages$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/i18n\/Messages$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/i18n\/Messages$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/i18n\/Messages$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/i18n\/Messages$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/i18n\/Messages$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/i18n\/Messages$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/i18n\/Messages$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/i18n\/Messages$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/i18n\/Messages$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/i18n\/Messages$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/i18n\/Messages$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scail\/commons\/i18n\/Messages.html", "kind" : "class"}], "scail.commons.ops.util" : [{"name" : "scail.commons.ops.util.BCryptOps", "shortDescription" : "Extension methods for bcrypt password hashing.", "object" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html", "members_class" : [{"label" : "tap", "tail" : "(f: (BCryptOps) ⇒ Unit): BCryptOps", "member" : "scail.commons.ops.AnyOps.tap", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#tap(f:A=>Unit):A", "kind" : "def"}, {"label" : "option", "tail" : "(): Option[BCryptOps]", "member" : "scail.commons.ops.AnyOps.option", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#option:Option[A]", "kind" : "def"}, {"label" : "future", "tail" : "(): Future[BCryptOps]", "member" : "scail.commons.ops.AnyOps.future", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#future:scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BCryptOps) ⇒ Boolean, msg: ⇒ Any): BCryptOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BCryptOps) ⇒ Boolean): BCryptOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): BCryptOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): BCryptOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (BCryptOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (BCryptOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "bcryptMatches", "tail" : "(hash: String): Boolean", "member" : "scail.commons.ops.util.BCryptOps.bcryptMatches", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#bcryptMatches(hash:String):Boolean", "kind" : "def"}, {"label" : "bcrypt", "tail" : "(salt: String): String", "member" : "scail.commons.ops.util.BCryptOps.bcrypt", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#bcrypt(salt:String):String", "kind" : "def"}, {"label" : "bcrypt", "tail" : "(rounds: Int): String", "member" : "scail.commons.ops.util.BCryptOps.bcrypt", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#bcrypt(rounds:Int):String", "kind" : "def"}, {"label" : "bcrypt", "tail" : "(): String", "member" : "scail.commons.ops.util.BCryptOps.bcrypt", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#bcrypt:String", "kind" : "def"}, {"member" : "scail.commons.ops.util.BCryptOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "salt", "tail" : "(rounds: Int): String", "member" : "scail.commons.ops.util.BCryptOps.salt", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#salt(rounds:Int):String", "kind" : "def"}, {"label" : "salt", "tail" : "(): String", "member" : "scail.commons.ops.util.BCryptOps.salt", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#salt:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/util\/package$$BCryptOps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/util\/package$$BCryptOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.util.FileOps", "shortDescription" : "Extension methods for File.", "members_class" : [{"label" : "tap", "tail" : "(f: (FileOps) ⇒ Unit): FileOps", "member" : "scail.commons.ops.AnyOps.tap", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#tap(f:A=>Unit):A", "kind" : "def"}, {"label" : "option", "tail" : "(): Option[FileOps]", "member" : "scail.commons.ops.AnyOps.option", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#option:Option[A]", "kind" : "def"}, {"label" : "future", "tail" : "(): Future[FileOps]", "member" : "scail.commons.ops.AnyOps.future", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#future:scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FileOps) ⇒ Boolean, msg: ⇒ Any): FileOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FileOps) ⇒ Boolean): FileOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): FileOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FileOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FileOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FileOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "path", "tail" : "(): Seq[String]", "member" : "scail.commons.ops.util.FileOps.path", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#path:Seq[String]", "kind" : "def"}, {"label" : "hasExtension", "tail" : "(extension: String): Boolean", "member" : "scail.commons.ops.util.FileOps.hasExtension", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#hasExtension(extension:String):Boolean", "kind" : "def"}, {"label" : "ancestors", "tail" : "(): Stream[File]", "member" : "scail.commons.ops.util.FileOps.ancestors", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#ancestors:Stream[java.io.File]", "kind" : "def"}, {"label" : "\/", "tail" : "(file: String): File", "member" : "scail.commons.ops.util.FileOps.\/", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#\/(file:String):java.io.File", "kind" : "def"}, {"member" : "scail.commons.ops.util.FileOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/util\/package$$FileOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/util\/package$$FileOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.util.LoggerOps", "shortDescription" : "Extension methods for Scala Logging.", "members_class" : [{"label" : "tap", "tail" : "(f: (LoggerOps) ⇒ Unit): LoggerOps", "member" : "scail.commons.ops.AnyOps.tap", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#tap(f:A=>Unit):A", "kind" : "def"}, {"label" : "option", "tail" : "(): Option[LoggerOps]", "member" : "scail.commons.ops.AnyOps.option", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#option:Option[A]", "kind" : "def"}, {"label" : "future", "tail" : "(): Future[LoggerOps]", "member" : "scail.commons.ops.AnyOps.future", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#future:scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LoggerOps) ⇒ Boolean, msg: ⇒ Any): LoggerOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LoggerOps) ⇒ Boolean): LoggerOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): LoggerOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): LoggerOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (LoggerOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (LoggerOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "trace", "tail" : "(e: ⇒ Throwable): Unit", "member" : "scail.commons.ops.util.LoggerOps.trace", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#trace(e:=>Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(e: ⇒ Throwable): Unit", "member" : "scail.commons.ops.util.LoggerOps.debug", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#debug(e:=>Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(e: ⇒ Throwable): Unit", "member" : "scail.commons.ops.util.LoggerOps.info", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#info(e:=>Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(e: ⇒ Throwable): Unit", "member" : "scail.commons.ops.util.LoggerOps.warn", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#warn(e:=>Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(e: ⇒ Throwable): Unit", "member" : "scail.commons.ops.util.LoggerOps.error", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#error(e:=>Throwable):Unit", "kind" : "def"}, {"member" : "scail.commons.ops.util.LoggerOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/util\/package$$LoggerOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/util\/package$$LoggerOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.util.RandomOps", "shortDescription" : "Extension methods for scala.util.Random.", "members_class" : [{"label" : "tap", "tail" : "(f: (RandomOps) ⇒ Unit): RandomOps", "member" : "scail.commons.ops.AnyOps.tap", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#tap(f:A=>Unit):A", "kind" : "def"}, {"label" : "option", "tail" : "(): Option[RandomOps]", "member" : "scail.commons.ops.AnyOps.option", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#option:Option[A]", "kind" : "def"}, {"label" : "future", "tail" : "(): Future[RandomOps]", "member" : "scail.commons.ops.AnyOps.future", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#future:scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RandomOps) ⇒ Boolean, msg: ⇒ Any): RandomOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RandomOps) ⇒ Boolean): RandomOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): RandomOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): RandomOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (RandomOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (RandomOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "nextAlphabetic", "tail" : "(length: Int): String", "member" : "scail.commons.ops.util.RandomOps.nextAlphabetic", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#nextAlphabetic(length:Int):String", "kind" : "def"}, {"label" : "nextAlphanumeric", "tail" : "(length: Int): String", "member" : "scail.commons.ops.util.RandomOps.nextAlphanumeric", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#nextAlphanumeric(length:Int):String", "kind" : "def"}, {"label" : "between", "tail" : "(a: Int, b: Int): Int", "member" : "scail.commons.ops.util.RandomOps.between", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#between(a:Int,b:Int):Int", "kind" : "def"}, {"member" : "scail.commons.ops.util.RandomOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/util\/package$$RandomOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/util\/package$$RandomOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.util.RegexOps", "shortDescription" : "Extension methods for Regex.", "members_class" : [{"label" : "tap", "tail" : "(f: (RegexOps) ⇒ Unit): RegexOps", "member" : "scail.commons.ops.AnyOps.tap", "link" : "scail\/commons\/ops\/util\/package$$RegexOps.html#tap(f:A=>Unit):A", "kind" : "def"}, {"label" : "option", "tail" : "(): Option[RegexOps]", "member" : "scail.commons.ops.AnyOps.option", "link" : "scail\/commons\/ops\/util\/package$$RegexOps.html#option:Option[A]", "kind" : "def"}, {"label" : "future", "tail" : "(): Future[RegexOps]", "member" : "scail.commons.ops.AnyOps.future", "link" : "scail\/commons\/ops\/util\/package$$RegexOps.html#future:scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/util\/package$$RegexOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/util\/package$$RegexOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RegexOps) ⇒ Boolean, msg: ⇒ Any): RegexOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$RegexOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RegexOps) ⇒ Boolean): RegexOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$RegexOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): RegexOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$RegexOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): RegexOps", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/util\/package$$RegexOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (RegexOps, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/util\/package$$RegexOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (RegexOps, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/util\/package$$RegexOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "matches", "tail" : "(input: CharSequence): Boolean", "member" : "scail.commons.ops.util.RegexOps.matches", "link" : "scail\/commons\/ops\/util\/package$$RegexOps.html#matches(input:CharSequence):Boolean", "kind" : "def"}, {"member" : "scail.commons.ops.util.RegexOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/util\/package$$RegexOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/util\/package$$RegexOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/util\/package$$RegexOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/util\/package$$RegexOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/util\/package$$RegexOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/util\/package$$RegexOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/util\/package$$RegexOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/util\/package$$RegexOps.html", "kind" : "class"}], "scail.commons.ops.collection" : [{"name" : "scail.commons.ops.collection.IndexedSeqOps", "shortDescription" : "Extension methods for IndexedSeq[A].", "members_class" : [{"label" : "tap", "tail" : "(f: (IndexedSeqOps[A]) ⇒ Unit): IndexedSeqOps[A]", "member" : "scail.commons.ops.AnyOps.tap", "link" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html#tap(f:A=>Unit):A", "kind" : "def"}, {"label" : "option", "tail" : "(): Option[IndexedSeqOps[A]]", "member" : "scail.commons.ops.AnyOps.option", "link" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html#option:Option[A]", "kind" : "def"}, {"label" : "future", "tail" : "(): Future[IndexedSeqOps[A]]", "member" : "scail.commons.ops.AnyOps.future", "link" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html#future:scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedSeqOps[A]) ⇒ Boolean, msg: ⇒ Any): IndexedSeqOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedSeqOps[A]) ⇒ Boolean): IndexedSeqOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IndexedSeqOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IndexedSeqOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IndexedSeqOps[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IndexedSeqOps[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "randomElement", "tail" : "(): A", "member" : "scail.commons.ops.collection.IndexedSeqOps.randomElement", "link" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html#randomElement:A", "kind" : "def"}, {"member" : "scail.commons.ops.collection.IndexedSeqOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/collection\/package$$IndexedSeqOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.collection.MapOps", "shortDescription" : "Extension methods for Map[A, B].", "members_class" : [{"label" : "tap", "tail" : "(f: (MapOps[A, B, M]) ⇒ Unit): MapOps[A, B, M]", "member" : "scail.commons.ops.AnyOps.tap", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#tap(f:A=>Unit):A", "kind" : "def"}, {"label" : "option", "tail" : "(): Option[MapOps[A, B, M]]", "member" : "scail.commons.ops.AnyOps.option", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#option:Option[A]", "kind" : "def"}, {"label" : "future", "tail" : "(): Future[MapOps[A, B, M]]", "member" : "scail.commons.ops.AnyOps.future", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#future:scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MapOps[A, B, M]) ⇒ Boolean, msg: ⇒ Any): MapOps[A, B, M]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MapOps[A, B, M]) ⇒ Boolean): MapOps[A, B, M]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MapOps[A, B, M]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MapOps[A, B, M]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MapOps[A, B, M], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MapOps[A, B, M], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "mapKeys", "tail" : "(f: (A) ⇒ C): M[C, B]", "member" : "scail.commons.ops.collection.MapOps.mapKeys", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#mapKeys[C](f:A=>C):M[C,B]", "kind" : "def"}, {"label" : "forallValue", "tail" : "(p: (B) ⇒ Boolean): Boolean", "member" : "scail.commons.ops.collection.MapOps.forallValue", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#forallValue(p:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "forallKey", "tail" : "(p: (A) ⇒ Boolean): Boolean", "member" : "scail.commons.ops.collection.MapOps.forallKey", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#forallKey(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "filterValues", "tail" : "(p: (B) ⇒ Boolean): M[A, B]", "member" : "scail.commons.ops.collection.MapOps.filterValues", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#filterValues(p:B=>Boolean):M[A,B]", "kind" : "def"}, {"label" : "existsValue", "tail" : "(p: (B) ⇒ Boolean): Boolean", "member" : "scail.commons.ops.collection.MapOps.existsValue", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#existsValue(p:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "existsKey", "tail" : "(p: (A) ⇒ Boolean): Boolean", "member" : "scail.commons.ops.collection.MapOps.existsKey", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#existsKey(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "containsEntry", "tail" : "(entry: (A, B)): Boolean", "member" : "scail.commons.ops.collection.MapOps.containsEntry", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#containsEntry(entry:(A,B)):Boolean", "kind" : "def"}, {"label" : "containsEntry", "tail" : "(k: A, v: B): Boolean", "member" : "scail.commons.ops.collection.MapOps.containsEntry", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#containsEntry(k:A,v:B):Boolean", "kind" : "def"}, {"member" : "scail.commons.ops.collection.MapOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/collection\/package$$MapOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/collection\/package$$MapOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.collection.TraversableOnceOps", "shortDescription" : "Extension methods for TraversableOnce[A].", "members_class" : [{"label" : "tap", "tail" : "(f: (TraversableOnceOps[A]) ⇒ Unit): TraversableOnceOps[A]", "member" : "scail.commons.ops.AnyOps.tap", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#tap(f:A=>Unit):A", "kind" : "def"}, {"label" : "option", "tail" : "(): Option[TraversableOnceOps[A]]", "member" : "scail.commons.ops.AnyOps.option", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#option:Option[A]", "kind" : "def"}, {"label" : "future", "tail" : "(): Future[TraversableOnceOps[A]]", "member" : "scail.commons.ops.AnyOps.future", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#future:scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TraversableOnceOps[A]) ⇒ Boolean, msg: ⇒ Any): TraversableOnceOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TraversableOnceOps[A]) ⇒ Boolean): TraversableOnceOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TraversableOnceOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TraversableOnceOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TraversableOnceOps[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TraversableOnceOps[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "safeMinBy", "tail" : "(f: (A) ⇒ B)(arg0: Ordering[B]): Option[A]", "member" : "scail.commons.ops.collection.TraversableOnceOps.safeMinBy", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#safeMinBy[B](f:A=>B)(implicitevidence$3:Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "safeMaxBy", "tail" : "(f: (A) ⇒ B)(arg0: Ordering[B]): Option[A]", "member" : "scail.commons.ops.collection.TraversableOnceOps.safeMaxBy", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#safeMaxBy[B](f:A=>B)(implicitevidence$2:Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "safeMin", "tail" : "(cmp: Ordering[B]): Option[A]", "member" : "scail.commons.ops.collection.TraversableOnceOps.safeMin", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#safeMin[B>:A](implicitcmp:Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "safeMax", "tail" : "(cmp: Ordering[B]): Option[A]", "member" : "scail.commons.ops.collection.TraversableOnceOps.safeMax", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#safeMax[B>:A](implicitcmp:Ordering[B]):Option[A]", "kind" : "def"}, {"member" : "scail.commons.ops.collection.TraversableOnceOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/collection\/package$$TraversableOnceOps.html", "kind" : "class"}, {"name" : "scail.commons.ops.collection.TraversableOps", "shortDescription" : "Extension methods for Traversable[A].", "members_class" : [{"label" : "tap", "tail" : "(f: (TraversableOps[A, T]) ⇒ Unit): TraversableOps[A, T]", "member" : "scail.commons.ops.AnyOps.tap", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#tap(f:A=>Unit):A", "kind" : "def"}, {"label" : "option", "tail" : "(): Option[TraversableOps[A, T]]", "member" : "scail.commons.ops.AnyOps.option", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#option:Option[A]", "kind" : "def"}, {"label" : "future", "tail" : "(): Future[TraversableOps[A, T]]", "member" : "scail.commons.ops.AnyOps.future", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#future:scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TraversableOps[A, T]) ⇒ Boolean, msg: ⇒ Any): TraversableOps[A, T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TraversableOps[A, T]) ⇒ Boolean): TraversableOps[A, T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TraversableOps[A, T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TraversableOps[A, T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TraversableOps[A, T], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TraversableOps[A, T], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "filterByType", "tail" : "(): T[B]", "member" : "scail.commons.ops.collection.TraversableOps.filterByType", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#filterByType[B<:A]:T[B]", "kind" : "def"}, {"label" : "duplicatesBy", "tail" : "(f: (A) ⇒ B): Seq[B]", "member" : "scail.commons.ops.collection.TraversableOps.duplicatesBy", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#duplicatesBy[B](f:A=>B):Seq[B]", "kind" : "def"}, {"label" : "duplicates", "tail" : "(): Seq[A]", "member" : "scail.commons.ops.collection.TraversableOps.duplicates", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#duplicates:Seq[A]", "kind" : "def"}, {"member" : "scail.commons.ops.collection.TraversableOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "scail\/commons\/ops\/collection\/package$$TraversableOps.html", "kind" : "class"}]};